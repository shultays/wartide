;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_palette
	.export		_grand8
	.export		_isCellBulletFree
	.export		_isFreeIn
	.export		_isFree
	.export		_damage_craft
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_wall_count:
	.byte	$00
_has_big_wall:
	.byte	$00
_craft_bullet_y:
	.byte	$FF
	.res	11,$00
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_scr:
	.word	$0000
_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00

.segment	"RODATA"

_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$0F
	.byte	$30
	.byte	$30
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$DC
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$DF
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$DD
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$DE
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A

.segment	"BSS"

_i:
	.res	1,$00
_pad:
	.res	1,$00
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_update_list:
	.res	47,$00
_next_wall:
	.res	1,$00
_current_wall:
	.res	1,$00
_prev_wall:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ grand8 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_grand8: near

.segment	"CODE"

;
; return craft_x[0] ^ craft_x[1] ^ frame ^ rand8();
;
	lda     _craft_x+1
	eor     _craft_x
	sta     ptr1
	lda     _frame
	eor     ptr1
	jsr     pusha0
	jsr     _rand8
	jmp     tosxorax

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L0EA0
	inx
	clc
L0EA0:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isFreeIn (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isFreeIn: near

.segment	"CODE"

;
; y += (scr&15);
;
	lda     _scr
	and     #$0F
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
;
; return !(blocked[y>>4] & (1<<(x>>4)));
;
	ldx     #$00
	lda     (sp),y
	jsr     asrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ isFree (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isFree: near

.segment	"CODE"

;
; if(dir == DIR_LEFT) x-=3;
;
	ldy     #$00
	lda     (sp),y
	cmp     #$08
	bne     L036C
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$03
;
; else if(dir == DIR_RIGHT) x+=3;
;
	jmp     L0EA1
L036C:	lda     (sp),y
	cmp     #$02
	bne     L0371
	tay
	clc
	lda     #$03
	adc     (sp),y
L0EA1:	sta     (sp),y
;
; if(dir == DIR_UP) y-=3;
;
L0371:	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0375
	iny
	lda     (sp),y
	sec
	sbc     #$03
;
; else if(dir == DIR_DOWN) y+=3;
;
	jmp     L0EA2
L0375:	lda     (sp),y
	cmp     #$04
	bne     L037A
	iny
	clc
	lda     #$03
	adc     (sp),y
L0EA2:	sta     (sp),y
;
; if(dir&3)
;
L037A:	ldy     #$00
	lda     (sp),y
	and     #$03
	beq     L037E
;
; return isFreeIn(x, y+2) && isFreeIn(x, y-2)/* && isFreeIn(x, y)*/;
;
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$02
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	tax
	jeq     incsp3
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	sec
	sbc     #$02
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	tax
	bne     L038A
	jmp     incsp3
;
; return isFreeIn(x+2, y) && isFreeIn(x-2, y)/* && isFreeIn(x, y)*/;
;
L037E:	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$02
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	tax
	jeq     incsp3
	jsr     decsp2
	ldy     #$04
	lda     (sp),y
	sec
	sbc     #$02
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	tax
	jeq     incsp3
L038A:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ damage_craft (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_damage_craft: near

.segment	"CODE"

;
; if(craft_hps[index] > damage){
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _craft_hps,y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L0394
	beq     L0394
;
; craft_hps[index]  -= damage;
;
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	iny
	clc
	adc     (sp),y
	bcc     L039A
	inx
L039A:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	dey
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     (sp),y
	sta     (sreg),y
;
; return 0;
;
	txa
	jmp     incsp2
;
; craft_hps[index] = 0;
;
L0394:	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	iny
	clc
	adc     (sp),y
	bcc     L039F
	inx
L039F:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; return 1;
;
	tax
	lda     #$01
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; temp = 0;
;
	lda     #$00
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; ++frame;
;
L03A7:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _pad
;
; if(temp2 != pad){
;
	cmp     _temp2
	beq     L03D5
;
; temp2 = pad;
;
	lda     _pad
	sta     _temp2
;
; if(pad&PAD_UP){
;
	lda     _pad
	and     #$10
	beq     L03B6
;
; --temp;
;
	dec     _temp
;
; if(temp == 255) temp = 2;
;
	lda     _temp
	cmp     #$FF
	bne     L03D5
	lda     #$02
	sta     _temp
;
; } else if(pad&PAD_DOWN){
;
	jmp     L03D5
L03B6:	lda     _pad
	and     #$20
	beq     L03BE
;
; ++temp;
;
	inc     _temp
;
; if(temp == 3) temp = 0;
;
	lda     _temp
	cmp     #$03
	bne     L03D5
	lda     #$00
	sta     _temp
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L03D5
L03BE:	lda     _pad
	and     #$0F
	beq     L03D5
;
; if(temp == 0){
;
	lda     _temp
	bne     L03C9
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_types[1] = 255;
;
	lda     #$FF
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(temp == 1){
;
L03C9:	lda     _temp
	cmp     #$01
	bne     L03D5
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + temp * 16, 0x24, 1, spr);
;
L03D5:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + temp * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L03A7

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; temp = craft_types[i]?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	beq     L03F2
	lda     #$00
	jmp     L03F4
L03F2:	lda     #$40
L03F4:	sta     _temp
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L03FC
	cmp     #$02
	beq     L0402
	cmp     #$04
	beq     L0408
	cmp     #$08
	beq     L040E
	jmp     L03FA
;
; temp += 0x04;
;
L03FC:	lda     #$04
	clc
	adc     _temp
	sta     _temp
;
; temp2 = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EA5
;
; temp += 0x24;
;
L0402:	lda     #$24
	clc
	adc     _temp
	sta     _temp
;
; temp2 = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EA5
;
; temp += 0x04;
;
L0408:	clc
	adc     _temp
	sta     _temp
;
; temp2 = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L0EA5
;
; temp += 0x34;
;
L040E:	lda     #$34
	clc
	adc     _temp
	sta     _temp
;
; temp2 = OAM_FLIP_H;
;
	lda     #$40
L0EA5:	sta     _temp2
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L03FA:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	beq     L0EA8
	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$02
	bne     L041A
;
; temp += 0x04;
;
	lda     #$04
L0EA8:	clc
	adc     _temp
	sta     _temp
;
; if(i < 2){
;
L041A:	lda     _i
	cmp     #$02
	bcs     L0420
;
; if((pad&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN)) && (frame & 8)){
;
	lda     _pad
	and     #$F0
	beq     L0422
	lda     _frame
	and     #$08
	beq     L0422
;
; temp += 2;
;
	lda     #$02
	clc
	adc     _temp
	sta     _temp
;
; temp2 = i | temp2;
;
L0422:	lda     _temp2
	ora     _i
	sta     _temp2
;
; }else{
;
	jmp     L0430
;
; temp2 |= 2;
;
L0420:	lda     _temp2
	ora     #$02
	sta     _temp2
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L0430
;
; temp += 2;
;
	lda     #$02
	clc
	adc     _temp
	sta     _temp
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, temp, temp2, spr);
;
L0430:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, temp^0x10, temp2, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0;i<6; i++){
;
	lda     #$00
L0EA9:	sta     _i
	cmp     #$06
	bcs     L044F
;
; if(craft_types[i] == 255) continue;
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	beq     L0450
;
; draw_tank();
;
	jsr     _draw_tank
;
; if(i<2){
;
	lda     _i
	cmp     #$02
	bcs     L0450
;
; temp2 = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp2
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L0462
	lda     _frame
	and     #$10
	bne     L0462
;
; temp2 += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; spr=oam_spr(i?256-20-8:20, 210, 0xA0+temp2, i, spr);
;
L0462:	jsr     decsp4
	lda     _i
	beq     L046F
	lda     #$E4
	jmp     L0471
L046F:	lda     #$14
L0471:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp2
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0;i<6; i++){
;
L0450:	lda     _i
	clc
	adc     #$01
	jmp     L0EA9
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L044F:	lda     #$00
	sta     _i
L0478:	lda     _i
	cmp     #$0C
	bcs     L0479
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L047A
;
; spr=oam_spr(craft_bullet_x[i]-2, craft_bullet_y[i]-2, 0x80, i<CRAFT_BULLET_COUNT?i&1:2, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	ldy     #$02
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _i
	cmp     #$08
	bcs     L0490
	lda     _i
	and     #$01
	jmp     L0492
L0490:	lda     #$02
L0492:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L047A:	inc     _i
	jmp     L0478
;
; }
;
L0479:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
	lda     #$00
	sta     _i
L04BD:	lda     _i
	cmp     #$0C
	bcc     L0ED3
;
; }
;
	rts
;
; if(craft_bullet_y[i] == 255) continue;
;
L0ED3:	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L04BF
;
; temp = craft_bullet_flag[i] & 0xF;
;
	ldy     _i
	lda     _craft_bullet_flag,y
	and     #$0F
	sta     _temp
;
; }
;
	cmp     #$01
	beq     L04D1
	cmp     #$02
	beq     L04E2
	cmp     #$03
	beq     L04D8
	cmp     #$04
	jeq     L04F3
	cmp     #$06
	beq     L04E9
	cmp     #$08
	jeq     L0504
	cmp     #$09
	jeq     L050B
	cmp     #$0C
	jeq     L04FA
	jmp     L04CF
;
; craft_bullet_y[i] -= 3;
;
L04D1:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L04D4
	inx
L04D4:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$03
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_y[i] -= 2;
;
L04D8:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L04DB
	inx
L04DB:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; craft_bullet_x[i] += 2;
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _i
	bcc     L04DF
	inx
L04DF:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_x[i] += 3;
;
L04E2:	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _i
	bcc     L04E5
	inx
L04E5:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$03
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_y[i] += 2;
;
L04E9:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L04EC
	inx
L04EC:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; craft_bullet_x[i] += 2;
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _i
	bcc     L04F0
	inx
L04F0:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_y[i] += 3;
;
L04F3:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L04F6
	inx
L04F6:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$03
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_y[i] += 2;
;
L04FA:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L04FD
	inx
L04FD:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
;
; break;
;
	jmp     L0ED2
;
; craft_bullet_x[i] -= 3;
;
L0504:	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _i
	bcc     L0507
	inx
L0507:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$03
;
; break;
;
	jmp     L0EBC
;
; craft_bullet_y[i] -= 2;
;
L050B:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L050E
	inx
L050E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
L0ED2:	sta     (ptr1),y
;
; craft_bullet_x[i] -= 2;
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _i
	bcc     L0512
	inx
L0512:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$02
L0EBC:	sta     (ptr1),y
;
; if(craft_bullet_y[i] < 10 || craft_bullet_x[i] >= 245 || craft_bullet_y[i] >= 245 || craft_bullet_y[i] < 10){
;
L04CF:	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$0A
	bcc     L0515
	ldy     _i
	lda     _craft_bullet_x,y
	cmp     #$F5
	bcs     L0515
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$F5
	bcs     L0515
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$0A
	bcs     L0514
;
; craft_bullet_y[i] = 255;
;
L0515:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L04BF
;
; temp2 = (craft_bullet_y[i] + (scr&15))>>4;
;
L0514:	ldy     _i
	ldx     #$00
	lda     _craft_bullet_y,y
	sta     ptr1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	bcc     L0EC5
	inx
L0EC5:	jsr     shrax4
	sta     _temp2
;
; temp3 = craft_bullet_x[i]>>4;
;
	ldy     _i
	ldx     #$00
	lda     _craft_bullet_x,y
	jsr     asrax4
	sta     _temp3
;
; temp = isCellBulletFree(temp3, temp2) == FALSE;
;
	jsr     decsp2
	lda     _temp3
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	jsr     _isCellBulletFree
	cmp     #$00
	jsr     booleq
	sta     _temp
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L0531
;
; if(temp)
;
	lda     _temp
	jeq     L0533
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != temp3 || (wall_hit_y[i&1]&15) != temp2)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L0536
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp3
	bne     L0536
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	beq     L0535
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | temp3;
;
L0536:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp3
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | temp2;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; wall_hit_hp[i&1]--;
;
L0535:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && temp3 != 0 && temp3 != 15)
;
	lda     _i
	and     #$01
	sta     ptr1
	tya
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L054C
	lda     _temp3
	jeq     L054C
	lda     _temp3
	cmp     #$0F
	jeq     L054C
;
; temp6 = 1;
;
	lda     #$01
	sta     _temp6
;
; bullet_blocked[temp2] ^= (1<<temp3);
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L0EC2
	inx
	clc
L0EC2:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp3
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[temp2] ^= (1<<temp3);
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L0EC3
	inx
	clc
L0EC3:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp3
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; temp = row_index;
;
	lda     _row_index
	sta     _temp
;
; if(temp&1) temp--;
;
	and     #$01
	beq     L055D
	lda     _temp
	sec
	sbc     #$01
	sta     _temp
;
; temp +=(temp2<<1);
;
L055D:	lda     _temp2
	asl     a
	clc
	adc     _temp
	sta     _temp
;
; if(temp>=60) temp-=60;
;
	cmp     #$3C
	bcc     L0563
	lda     _temp
	sec
	sbc     #$3C
	sta     _temp
;
; if(temp<30){
;
L0563:	lda     _temp
	cmp     #$1E
	bcs     L0567
;
; adr = NAMETABLE_A+(temp<<5);
;
	ldx     #$00
	lda     _temp
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L0EC7
;
; temp-=30;
;
L0567:	lda     _temp
	sec
	sbc     #$1E
	sta     _temp
;
; adr = NAMETABLE_C+(temp<<5);
;
	ldx     #$00
	lda     _temp
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L0EC7:	sta     _adr+1
;
; adr += temp3<<1;
;
	ldx     #$00
	lda     _temp3
	asl     a
	bcc     L0EC4
	inx
	clc
L0EC4:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0588
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0588:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; temp5 = 0;
;
	sty     _temp5
;
; if(temp2)
;
	lda     _temp2
	beq     L059D
;
; temp5 |= (!isCellBulletFree(temp3, temp2-1) || (((wall_hit_x[i&1])>>4) == temp3 && ((wall_hit_y[i&1])>>4) == temp2-1));
;
	lda     _temp5
	jsr     pusha0
	jsr     decsp2
	lda     _temp3
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _isCellBulletFree
	tax
	beq     L05A1
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB8
	cmp     _temp3
	bne     L0EB8
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L05AD
	dex
L05AD:	cpx     ptr1+1
	bne     L0EB8
	cmp     ptr1
	beq     L05A1
L0EB8:	lda     #$00
	jmp     L05AF
L05A1:	lda     #$01
L05AF:	jsr     tosora0
	sta     _temp5
;
; if(temp3)
;
L059D:	lda     _temp3
	jeq     L05B0
;
; temp5 |= (!isCellBulletFree(temp3-1, temp2) || (((wall_hit_x[i&1])>>4) == temp3-1 && ((wall_hit_y[i&1])>>4) == temp2))<<1;
;
	lda     _temp5
	jsr     pusha0
	jsr     decsp2
	lda     _temp3
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	jsr     _isCellBulletFree
	tax
	beq     L05B4
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L05BC
	dex
L05BC:	cpx     ptr1+1
	bne     L0EB9
	cmp     ptr1
	bne     L0EB9
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB9
	cmp     _temp2
	beq     L05B4
L0EB9:	ldx     #$00
	txa
	jmp     L05C2
L05B4:	lda     #$01
L05C2:	asl     a
	bcc     L0EAD
	inx
L0EAD:	jsr     tosorax
	sta     _temp5
;
; if(temp2<14)
;
L05B0:	lda     _temp2
	cmp     #$0E
	bcs     L05C3
;
; temp5 |= (!isCellBulletFree(temp3, temp2+1) || (((wall_hit_x[i&1])>>4) == temp3 && ((wall_hit_y[i&1])>>4) == temp2+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	jsr     decsp2
	lda     _temp3
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	clc
	adc     #$01
	dey
	sta     (sp),y
	jsr     _isCellBulletFree
	tax
	beq     L05C7
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EBA
	cmp     _temp3
	bne     L0EBA
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L05D3
	inx
L05D3:	cpx     ptr1+1
	bne     L0EBA
	cmp     ptr1
	beq     L05C7
L0EBA:	ldx     #$00
	txa
	jmp     L05D5
L05C7:	ldx     #$00
	lda     #$01
L05D5:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(temp3<15)
;
L05C3:	lda     _temp3
	cmp     #$0F
	jcs     L05D6
;
; temp5 |= (!isCellBulletFree(temp3+1, temp2) || (((wall_hit_x[i&1])>>4) == temp3+1 && ((wall_hit_y[i&1])>>4) == temp2))<<3;
;
	lda     _temp5
	jsr     pusha0
	jsr     decsp2
	lda     _temp3
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	jsr     _isCellBulletFree
	tax
	beq     L05DA
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L05E2
	inx
L05E2:	cpx     ptr1+1
	bne     L0EBB
	cmp     ptr1
	bne     L0EBB
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EBB
	cmp     _temp2
	beq     L05DA
L0EBB:	ldx     #$00
	txa
	jmp     L05E8
L05DA:	lda     #$01
L05E8:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((temp5 & 3) == 3)
;
L05D6:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L05E9
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(temp5 & 1)
;
	jmp     L0EBE
L05E9:	lda     _temp5
	and     #$01
	beq     L05F1
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(temp5 & 2)
;
	jmp     L0EBE
L05F1:	lda     _temp5
	and     #$02
	beq     L0EBE
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L0EBE:	sta     _update_list+3
;
; if((temp5 & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L0600
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(temp5 & 1)
;
	jmp     L0EBF
L0600:	lda     _temp5
	and     #$01
	beq     L0608
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(temp5 & 8)
;
	jmp     L0EBF
L0608:	lda     _temp5
	and     #$08
	beq     L0EBF
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L0EBF:	sta     _update_list+4
;
; if((temp5 & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L0617
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(temp5 & 4)
;
	jmp     L0EC0
L0617:	lda     _temp5
	and     #$04
	beq     L061F
;
; update_list[8] = 0xC4;
;
	lda     #$C4
;
; else if(temp5 & 2)
;
	jmp     L0EC0
L061F:	lda     _temp5
	and     #$02
	beq     L0EC0
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L0EC0:	sta     _update_list+8
;
; if((temp5 & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L062E
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(temp5 & 4)
;
	jmp     L0EC1
L062E:	lda     _temp5
	and     #$04
	beq     L0636
;
; update_list[9] = 0xC5;
;
	lda     #$C5
;
; else if(temp5 & 8)
;
	jmp     L0EC1
L0636:	lda     _temp5
	and     #$08
	beq     L0EC1
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L0EC1:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_y[i] = 255;
;
L054C:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L04BF
;
; for(temp2=2; temp2<6; temp2++){
;
L0533:	lda     #$02
L0EC8:	sta     _temp2
	cmp     #$06
	jcs     L04BF
;
; if(craft_types[temp2] != 255){
;
	ldy     _temp2
	lda     _craft_types,y
	cmp     #$FF
	jeq     L0651
;
; if(craft_bullet_x[i] > craft_x[temp2]-6 && craft_bullet_x[i] < craft_x[temp2]+6 && craft_bullet_y[i] > craft_y[temp2]-6 && craft_bullet_y[i] < craft_y[temp2]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0661
	ldx     #$FF
L0661:	jsr     tosicmp
	bcc     L0651
	beq     L0651
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0667
	ldx     #$01
L0667:	jsr     tosicmp
	bcs     L0651
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L066C
	ldx     #$FF
L066C:	jsr     tosicmp
	bcc     L0651
	beq     L0651
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0671
	ldx     #$01
L0671:	jsr     tosicmp
	bcs     L0651
;
; damage_craft(temp2, 1);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     _damage_craft
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; break;
;
	jmp     L04BF
;
; for(temp2=2; temp2<6; temp2++){
;
L0651:	lda     _temp2
	clc
	adc     #$01
	jmp     L0EC8
;
; if(temp)
;
L0531:	lda     _temp
	beq     L067B
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L04BF
;
; for(temp2=0; temp2<2; temp2++){
;
L067B:	sta     _temp2
	cmp     #$02
	jcs     L04BF
;
; if(craft_lives[temp2] > 0){
;
	ldy     _temp2
	lda     _craft_lives,y
	jeq     L0683
;
; if(craft_bullet_x[i] > craft_x[temp2]-6 && craft_bullet_x[i] < craft_x[temp2]+6 && craft_bullet_y[i] > craft_y[temp2]-6 && craft_bullet_y[i] < craft_y[temp2]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0693
	ldx     #$FF
L0693:	jsr     tosicmp
	bcc     L0683
	beq     L0683
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0699
	ldx     #$01
L0699:	jsr     tosicmp
	bcs     L0683
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L069E
	ldx     #$FF
L069E:	jsr     tosicmp
	bcc     L0683
	beq     L0683
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L06A3
	ldx     #$01
L06A3:	jsr     tosicmp
	bcs     L0683
;
; damage_craft(temp2, 1);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     _damage_craft
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(temp2=0; temp2<2; temp2++){
;
L0683:	lda     _temp2
	clc
	adc     #$01
	jmp     L067B
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04BF:	inc     _i
	jmp     L04BD

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; for(i=0;i<2;++i){
;
	lda     #$00
	sta     _i
L06AD:	lda     _i
	cmp     #$02
	bcc     L0ED9
;
; }
;
	rts
;
; if(!craft_lives[i]) continue;
;
L0ED9:	ldy     _i
	lda     _craft_lives,y
	jeq     L06AF
;
; if(craft_hps[i] == 0)
;
	ldy     _i
	lda     _craft_hps,y
	bne     L06B9
;
; craft_hps[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L06C3
	inx
L06C3:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; pad=pad_poll(i);
;
L06B9:	lda     _i
	jsr     _pad_poll
	sta     _pad
;
; temp2 = (pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT;
;
	and     #$30
	beq     L06CB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L06CB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	bne     L06C8
L06CB:	lda     #$00
	jmp     L06D0
L06C8:	lda     #$01
L06D0:	sta     _temp2
;
; temp4 = (pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN;
;
	lda     _pad
	and     #$C0
	beq     L06D5
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L06D5
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	bne     L06D2
L06D5:	lda     #$00
	jmp     L06DA
L06D2:	lda     #$01
L06DA:	sta     _temp4
;
; temp3 = 0;
;
	lda     #$00
	sta     _temp3
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	sta     _sprite_look_dirs,y
;
; temp5 = 0;
;
	sta     _temp5
;
; if(pad&PAD_LEFT){
;
	lda     _pad
	and     #$40
	beq     L06E3
;
; temp5++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; temp3 |= DIR_LEFT;
;
	lda     _temp3
	ora     #$08
	sta     _temp3
;
; if(temp2){
;
	lda     _temp2
	beq     L06E8
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06FF
;
; sprite_dirs[i] = DIR_LEFT;
;
L06E8:	ldy     _i
	lda     #$08
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L0ED4
L06E3:	lda     _pad
	and     #$80
	beq     L06FF
;
; temp5++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; temp3 |= DIR_RIGHT;
;
	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(temp2){
;
	lda     _temp2
	beq     L06F9
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$02
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06FF
;
; sprite_dirs[i] = DIR_RIGHT;
;
L06F9:	ldy     _i
	lda     #$02
L0ED4:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L06FF:	lda     _pad
	and     #$10
	beq     L0704
;
; temp5++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; temp3 |= DIR_UP;
;
	lda     _temp3
	ora     #$01
	sta     _temp3
;
; if(temp4){
;
	lda     _temp4
	beq     L0709
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0720
;
; sprite_dirs[i] = DIR_UP;
;
L0709:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L0ED5
L0704:	lda     _pad
	and     #$20
	beq     L0720
;
; temp5++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; temp3 |= DIR_DOWN;
;
	lda     _temp3
	ora     #$04
	sta     _temp3
;
; if(temp4){
;
	lda     _temp4
	beq     L071A
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$02
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0720
;
; sprite_dirs[i] = DIR_DOWN;
;
L071A:	ldy     _i
	lda     #$04
L0ED5:	sta     _sprite_dirs,y
;
; if(temp5 == 1 || (frame&3) != 0)
;
L0720:	lda     _temp5
	cmp     #$01
	beq     L0726
	lda     _frame
	and     #$03
	jeq     L0739
;
; if((temp3&DIR_LEFT) && isFree(craft_x[i], craft_y[i], DIR_LEFT)){
;
L0726:	lda     _temp3
	and     #$08
	beq     L072A
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	jsr     _isFree
	tax
	beq     L072A
;
; craft_x[i]--;
;
	lda     #<(_craft_x)
	ldx     #>(_craft_x)
	clc
	adc     _i
	bcc     L0738
	inx
L0738:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if((temp3&DIR_RIGHT) && isFree(craft_x[i], craft_y[i], DIR_RIGHT)){
;
L072A:	lda     _temp3
	and     #$02
	beq     L0739
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	jsr     _isFree
	tax
	beq     L0739
;
; craft_x[i]++;
;
	lda     #<(_craft_x)
	ldx     #>(_craft_x)
	clc
	adc     _i
	bcc     L0747
	inx
L0747:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if(temp5 == 1 || (frame&3) != 1)
;
L0739:	lda     _temp5
	cmp     #$01
	beq     L0749
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L0748
;
; if((temp3&DIR_UP) && (((craft_y[i]-3+(scr&15))>>4) == 15 || isFree(craft_x[i], craft_y[i], DIR_UP))){
;
L0749:	lda     _temp3
	and     #$01
	beq     L074D
	ldy     _i
	ldx     #$00
	lda     _craft_y,y
	sec
	sbc     #$03
	bcs     L0756
	dex
L0756:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0ED7
	inx
L0ED7:	jsr     shrax4
	cpx     #$00
	bne     L0ED8
	cmp     #$0F
	beq     L074E
L0ED8:	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     _isFree
	tax
	beq     L074D
;
; craft_y[i]--;
;
L074E:	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0764
	inx
L0764:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if((temp3&DIR_DOWN) && isFree(craft_x[i], craft_y[i], DIR_DOWN)){
;
L074D:	lda     _temp3
	and     #$04
	beq     L0748
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	jsr     _isFree
	tax
	beq     L0748
;
; craft_y[i]++;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0773
	inx
L0773:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if(craft_y[i] >= MAX_Y) craft_y[i] = MAX_Y;
;
L0748:	ldy     _i
	lda     _craft_y,y
	cmp     #$ED
	bcc     L0774
	ldy     _i
	lda     #$ED
	sta     _craft_y,y
;
; if(craft_bullet_timers[i] == 0){
;
L0774:	ldy     _i
	lda     _craft_bullet_timers,y
	jne     L077E
;
; if(pad&PAD_A){
;
	lda     _pad
	and     #$01
	jeq     L06AF
;
; for(temp=i; temp < CRAFT_BULLET_COUNT; temp += 2){
;
	lda     _i
L0ED6:	sta     _temp
	cmp     #$08
	jcs     L06AF
;
; if(craft_bullet_y[temp] != 255) continue;
;
	ldy     _temp
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0786
;
; craft_bullet_x[temp] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _temp
	bcc     L0793
	inx
L0793:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[temp] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _temp
	bcc     L0799
	inx
L0799:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[temp] = temp3 | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _temp
	bcc     L079F
	inx
L079F:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprite_dirs,y
	ora     _temp3
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L06AF
;
; for(temp=i; temp < CRAFT_BULLET_COUNT; temp += 2){
;
L0786:	lda     #$02
	clc
	adc     _temp
	jmp     L0ED6
;
; --craft_bullet_timers[i];
;
L077E:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L07AA
	inx
L07AA:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; for(i=0;i<2;++i){
;
L06AF:	inc     _i
	jmp     L06AD

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(temp < 150){
;
	lda     _temp
	cmp     #$96
	bcc     L0F81
;
; }
;
	rts
;
; temp2 = 150 - temp;
;
L0F81:	lda     #$96
	sec
	sbc     _temp
	sta     _temp2
;
; if(enemy_spawn_scr > temp2){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _temp2
	bcc     L07B0
	beq     L07B0
;
; enemy_spawn_scr -= temp2;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L0EF7
;
; enemy_spawn_scr = 0;
;
L07B0:	lda     #$00
L0EF7:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L07B7:	lda     _i
	cmp     #$06
	bcs     L07B8
;
; craft_y[i] += temp2;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L07C1
	inx
L07C1:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp2
	sta     (sreg),y
;
; if(craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	ldy     _i
	lda     _craft_y,y
	cmp     #$EE
	bcc     L07B9
	ldy     _i
	lda     #$EE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L07B9:	inc     _i
	jmp     L07B7
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07B8:	lda     #$00
	sta     _i
L07CD:	lda     _i
	cmp     #$0C
	bcs     L07CE
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L07CF
;
; if(craft_bullet_y[i] > 255 - temp2){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _temp2
	jsr     tosicmp0
	bcc     L07D9
	beq     L07D9
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; }else{
;
	jmp     L07CF
;
; craft_bullet_y[i] += temp2;
;
L07D9:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L07E4
	inx
L07E4:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp2
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07CF:	inc     _i
	jmp     L07CD
;
; scr -= temp2;
;
L07CE:	lda     _temp2
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L07E8
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; temp = scr>>3;
;
L07E8:	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp
;
; if(temp>=60) temp-=60;
;
	cmp     #$3C
	bcc     L07EE
	lda     _temp
	sec
	sbc     #$3C
	sta     _temp
;
; if(row_index != temp){
;
L07EE:	ldx     #$00
	lda     _temp
	cpx     _row_index+1
	bne     L0F34
	cmp     _row_index
	jeq     L0C06
;
; row_index = temp;
;
L0F34:	lda     _temp
	sta     _row_index
	stx     _row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(temp<30){
;
	lda     _temp
	cmp     #$1E
	bcs     L07F9
;
; adr = NAMETABLE_A+(temp<<5);
;
	lda     _temp
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((temp>>2)<<3);
;
	ldx     #$00
	lda     _temp
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L0F5A
;
; temp-=30;
;
L07F9:	lda     _temp
	sec
	sbc     #$1E
	sta     _temp
;
; adr = NAMETABLE_C+(temp<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((temp>>2)<<3);
;
	ldx     #$00
	lda     _temp
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L0F5A:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(temp&1){
;
	lda     _temp
	and     #$01
	jeq     L0A16
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L083E
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L083E:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0845
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0845:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L084C
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L084C:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L0854
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L0854:	lda     #$02
L0F37:	sta     _i
	cmp     #$10
	bcs     L085D
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0866
	inx
L0866:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L086C
	inx
L086C:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L0871
	lda     _i
	cmp     #$0F
	bne     L0870
;
; if(rand8() < 30){
;
L0871:	jsr     _rand8
	cmp     #$1E
	bcs     L085E
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L0870
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L0EF9
;
; next_line[i] = GRASS;
;
L0870:	ldy     _i
	lda     #$00
L0EF9:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L085E:	lda     _i
	clc
	adc     #$01
	jmp     L0F37
;
; prev_wall = current_wall;
;
L085D:	lda     _current_wall
	sta     _prev_wall
;
; current_wall = next_wall;
;
	lda     _next_wall
	sta     _current_wall
;
; next_wall = 0;
;
	lda     #$00
	sta     _next_wall
;
; wall_count -= (wall_count>>3);
;
	tax
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(wall_count>0) wall_count--;
;
	lda     _wall_count
	beq     L0890
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L0890:	lda     _has_big_wall
	beq     L0893
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (grand8()<150)){
;
L0893:	lda     _wall_count
	cmp     #$02
	jcs     L08D7
	jsr     _grand8
	cmp     #$96
	jcs     L08D7
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; temp3 = grand8();
;
	jsr     _grand8
	sta     _temp3
;
; if(has_big_wall) temp2 = WALL;
;
	lda     _has_big_wall
;
; else if(temp3 < 60) temp2 = WATER;
;
	bne     L08AE
	lda     _temp3
	cmp     #$3C
	bcs     L08A4
	lda     #$02
;
; else if(temp3 < 120) temp2 = FOREST;
;
	jmp     L0EFA
L08A4:	lda     _temp3
	cmp     #$78
	bcs     L08A9
	lda     #$04
;
; else if(temp3 < 180){
;
	jmp     L0EFA
L08A9:	lda     _temp3
	cmp     #$B4
	bcs     L08AE
;
; temp2 = WALL_BIG;
;
	lda     #$05
	sta     _temp2
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L08B4
;
; temp2 = WALL;
;
L08AE:	lda     #$01
L0EFA:	sta     _temp2
;
; temp3 = 4+(grand8()&1)+(grand8()&3)+(grand8()&5);
;
L08B4:	jsr     _grand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L08BA
	inx
L08BA:	jsr     pushax
	jsr     _grand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _grand8
	and     #$05
	jsr     tosadda0
	sta     _temp3
;
; temp4 = temp3;
;
	sta     _temp4
;
; if(grand8()&1) temp3--;
;
	jsr     _grand8
	and     #$01
	beq     L08BF
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(grand8()&1) temp4++;
;
L08BF:	jsr     _grand8
	and     #$01
	beq     L08C2
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if(temp2 != WALL_BIG){
;
L08C2:	lda     _temp2
	cmp     #$05
	beq     L08C5
;
; if(grand8()&1) temp3--;
;
	jsr     _grand8
	and     #$01
	beq     L08C7
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(grand8()&1) temp4++;
;
L08C7:	jsr     _grand8
	and     #$01
	beq     L08D4
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; }else{
;
	jmp     L08D4
;
; if(temp3 == temp4) (grand8()&1)?temp4++:temp3--;
;
L08C5:	lda     _temp4
	cmp     _temp3
	bne     L08D4
	jsr     _grand8
	and     #$01
	beq     L08D2
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
	jmp     L08D4
L08D2:	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; for(i=temp3; i<=temp4; i++){
;
L08D4:	lda     _temp3
L0F38:	sta     _i
	sec
	sbc     _temp4
	bcc     L08D9
	bne     L08D7
;
; next_line[i] = temp2;
;
L08D9:	ldy     _i
	lda     _temp2
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; next_wall++;
;
	lda     _next_wall
	clc
	adc     #$01
	sta     _next_wall
;
; for(i=temp3; i<=temp4; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F38
;
; for(i=2; i<16; i++){
;
L08D7:	lda     #$02
L0F3C:	sta     _i
	cmp     #$10
	jcs     L08E5
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L08EC
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L08F0
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else{
;
	jmp     L08EC
;
; temp4 = ((next_line[i+1]&WALL&(i<13))<<1)+
;
L08F0:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L08FE
	inx
L08FE:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L0EDF
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L0EDF:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0903
	dex
L0903:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L0F52
	inx
	clc
L0F52:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L0F0A
	inx
	clc
L0F0A:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L090C
	dex
L090C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L0F49
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L0F49:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0911
	inx
L0911:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp4
;
; temp3 = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp3
;
; if(temp4 > temp3){
;
	lda     _temp4
	sec
	sbc     _temp3
	bcc     L0916
	beq     L0916
;
; temp4 -= temp3;
;
	lda     _temp3
	eor     #$FF
	sec
	adc     _temp4
;
; } else {
;
	jmp     L0EFC
;
; temp4 = 0;
;
L0916:	lda     #$00
L0EFC:	sta     _temp4
;
; if(temp4 >= 4){
;
	cmp     #$04
;
; }else if(temp4 >= 2){
;
	bcs     L0F6F
	lda     _temp4
	cmp     #$02
	bcc     L0927
;
; if(grand8()&1){
;
	jsr     _grand8
	and     #$01
	beq     L0927
;
; next_line[i] = WALL;
;
L0F6F:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; temp4 = ((next_line[i+1]==WATER)<<1)+
;
L0927:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0933
	inx
L0933:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EE2
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L0EE2:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0937
	dex
L0937:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EE3
	inx
L0EE3:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EE4
	inx
L0EE4:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L093F
	dex
L093F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0943
	inx
L0943:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp4
;
; temp3 = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp3
;
; if(temp4 > temp3){
;
	lda     _temp4
	sec
	sbc     _temp3
	bcc     L0947
	beq     L0947
;
; temp4 -= temp3;
;
	lda     _temp3
	eor     #$FF
	sec
	adc     _temp4
;
; } else {
;
	jmp     L0EFE
;
; temp4 = 0;
;
L0947:	lda     #$00
L0EFE:	sta     _temp4
;
; if(temp4 >= 5){
;
	cmp     #$05
;
; }else if(temp4 >= 3){
;
	bcs     L0F70
	lda     _temp4
	cmp     #$03
	bcc     L0958
;
; if(grand8()&3){
;
	jsr     _grand8
	and     #$03
	beq     L0958
;
; next_line[i] = WATER;
;
L0F70:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; temp4 = ((next_line[i+1]==FOREST)<<1)+
;
L0958:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0964
	inx
L0964:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE5
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L0EE5:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0968
	dex
L0968:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE6
	inx
L0EE6:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE7
	inx
L0EE7:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0970
	dex
L0970:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0974
	inx
L0974:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp4
;
; temp3 = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp3
;
; if(temp4 > temp3){
;
	lda     _temp4
	sec
	sbc     _temp3
	bcc     L0978
	beq     L0978
;
; temp4 -= temp3;
;
	lda     _temp3
	eor     #$FF
	sec
	adc     _temp4
;
; } else {
;
	jmp     L0F00
;
; temp4 = 0;
;
L0978:	lda     #$00
L0F00:	sta     _temp4
;
; if(temp4 >= 5){
;
	cmp     #$05
;
; }else if(temp4 >= 3){
;
	bcs     L0F71
	lda     _temp4
	cmp     #$03
	bcc     L08EC
;
; if(grand8()&3){
;
	jsr     _grand8
	and     #$03
	beq     L08EC
;
; next_line[i] = FOREST;
;
L0F71:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; if(next_line[i] & (WALL|WATER|FOREST)){
;
L08EC:	ldy     _i
	lda     _next_line,y
	and     #$07
	beq     L08E6
;
; next_wall++;
;
	lda     _next_wall
	clc
	adc     #$01
	sta     _next_wall
;
; for(i=2; i<16; i++){
;
L08E6:	lda     _i
	clc
	adc     #$01
	jmp     L0F3C
;
; for(i=2; i<16; i++){
;
L08E5:	lda     #$02
L0F3D:	sta     _i
	cmp     #$10
	bcs     L0997
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0998
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09A5
	dex
L09A5:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L099F
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09A7
	inx
L09A7:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0998
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L099F:	lda     _i
	cmp     #$02
	beq     L09AB
	lda     _i
	cmp     #$0F
	bne     L09AA
L09AB:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L0F02
L09AA:	ldy     _i
	lda     #$05
L0F02:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0998:	lda     _i
	clc
	adc     #$01
	jmp     L0F3D
;
; for(i=2; i<16; i++){
;
L0997:	lda     #$02
L0F3E:	sta     _i
	cmp     #$10
	jcs     L09B7
;
; if(current_line[i] == WALL && 
;
	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L09B8
;
; ((current_line[i-1]&WALL) && (current_line[i+1]&WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09C6
	dex
L09C6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L09B8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09CA
	inx
L09CA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L09B8
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L09B8
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]&WALL) && (next_line[i+1]&WALL) 
;
	beq     L09B8
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09D3
	dex
L09D3:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	beq     L09B8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09D6
	inx
L09D6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	beq     L09B8
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09D9
	dex
L09D9:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09B8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09DC
	inx
L09DC:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09B8
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L09B8:	lda     _i
	clc
	adc     #$01
	jmp     L0F3E
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L09B7:	lda     _current_line+2
	and     #$01
	beq     L09E3
	lda     _prev_line+2
	and     #$01
	beq     L09E3
	lda     _next_line+2
	and     #$01
	beq     L09E3
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L09E3:	lda     _current_line+15
	and     #$01
	beq     L09F0
	lda     _prev_line+15
	and     #$01
	beq     L09F0
	lda     _next_line+15
	and     #$01
	beq     L09F0
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--)
;
L09F0:	lda     #$0E
L0F3F:	sta     _i
	lda     _i
	jeq     L09FE
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F0B
	inx
	clc
L0F0B:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A09
	dex
L0A09:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F0C
	inx
	clc
L0F0C:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A0E
	dex
L0A0E:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--)
;
	lda     _i
	sec
	sbc     #$01
	jmp     L0F3F
;
; blocked[0] = 0;
;
L09FE:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; for(i=0; i<16; i++)
;
L0F40:	sta     _i
	cmp     #$10
	jcs     L0A16
;
; temp4 = i+1;
;
	lda     _i
	clc
	adc     #$01
	sta     _temp4
;
; if(current_line[i+1] != GRASS)
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A23
	inx
L0A23:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	jeq     L0A17
;
; if(temp6 && i != 0 && i != 15){
;
	lda     _temp6
	beq     L0A24
	lda     _i
	beq     L0A24
	lda     _i
	cmp     #$0F
	beq     L0A24
;
; current_line[i+1] = GRASS;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0F0D
	inx
	clc
L0F0D:	adc     #<(_current_line)
	sta     ptr1
	txa
	adc     #>(_current_line)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A17
;
; blocked[0] |= (1<<i);
;
L0A24:	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER)
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A34
	inx
L0A34:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0A17
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; for(i=0; i<16; i++)
;
L0A17:	lda     _i
	clc
	adc     #$01
	jmp     L0F40
;
; for(i=0; i<32; i++){
;
L0A16:	lda     #$00
L0F48:	sta     _i
	cmp     #$20
	jcs     L0A3A
;
; temp4 = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp4
;
; temp2 = ((((temp&1)==0)<<1)+(i&1));
;
	lda     _temp
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp2
;
; switch(current_line[temp4]){
;
	ldy     _temp4
	lda     _current_line,y
;
; }
;
	jeq     L0ADB
	cmp     #$01
	beq     L0A55
	cmp     #$02
	beq     L0A55
	cmp     #$03
	jeq     L0ADB
	cmp     #$04
	jeq     L0B3E
	cmp     #$05
	jeq     L0AED
	jmp     L0A3B
;
; temp5 = current_line[temp4];
;
L0A55:	ldy     _temp4
	lda     _current_line,y
	sta     _temp5
;
; if(temp2&1){
;
	lda     _temp2
	and     #$01
	beq     L0A5A
;
; temp3 = (current_line[temp4+1]&temp5)!=0;
;
	lda     _temp4
	clc
	adc     #$01
	bcc     L0A60
	inx
L0A60:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp5
	and     ptr1
	jsr     boolne
	sta     _temp3
;
; if(temp2<2){
;
	lda     _temp2
	cmp     #$02
	bcs     L0A62
;
; temp3 += (((prev_line[temp4+1]&temp5)!=0)<<2);
;
	lda     _temp4
	clc
	adc     #$01
	bcc     L0A6A
	inx
L0A6A:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp5
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F5E
;
; temp3 += ((next_line[temp4+1]==temp5)<<2);
;
L0A62:	lda     _temp4
	clc
	adc     #$01
	bcc     L0A8A
	inx
;
; }else{
;
	jmp     L0A8A
;
; temp3 = (current_line[temp4-1]&temp5)!=0;
;
L0A5A:	lda     _temp4
	sec
	sbc     #$01
	bcs     L0A78
	dex
L0A78:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp5
	and     ptr1
	jsr     boolne
	sta     _temp3
;
; if(temp2<2){
;
	lda     _temp2
	cmp     #$02
	bcs     L0A7A
;
; temp3 += (((prev_line[temp4-1]&temp5)!=0)<<2);
;
	lda     _temp4
	sec
	sbc     #$01
	bcs     L0A82
	dex
L0A82:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp5
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F5E
;
; temp3 += ((next_line[temp4-1]==temp5)<<2);
;
L0A7A:	lda     _temp4
	sec
	sbc     #$01
	bcs     L0A8A
	dex
L0A8A:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp5
	jsr     booleq
L0F5E:	asl     a
	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; if(temp2<2){
;
	lda     _temp2
	cmp     #$02
	bcs     L0A8B
;
; temp3 += (((prev_line[temp4]&temp5)!=0)<<1);
;
	ldy     _temp4
	lda     _prev_line,y
	sta     ptr1
	lda     _temp5
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F58
;
; temp3 += ((next_line[temp4]==temp5)<<1);
;
L0A8B:	ldy     _temp4
	lda     _next_line,y
	cmp     _temp5
	jsr     booleq
L0F58:	asl     a
	clc
	adc     _temp3
	sta     _temp3
;
; if(temp3 == 7){
;
	cmp     #$07
	bne     L0A9C
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0A9E
;
; update_list[3+i] = (temp5 == WALL?0:0xEC);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F0E
	inx
	clc
L0F0E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp5
	cmp     #$01
	bne     L0AA5
	lda     #$00
	jmp     L0F44
L0AA5:	lda     #$EC
;
; }else{
;
	jmp     L0F44
;
; update_list[3+i] =  (temp5 == WALL?0x66:0xCC) + (rand8()&3);
;
L0A9E:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L0F0F
	inx
	clc
L0F0F:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp5
	cmp     #$01
	bne     L0AAF
	lda     #$66
	jmp     L0AB1
L0AAF:	lda     #$CC
L0AB1:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; }else{
;
	jmp     L0F44
;
; if(temp3>=4) temp3 -= 4;
;
L0A9C:	lda     _temp3
	cmp     #$04
	bcc     L0AB5
	lda     _temp3
	sec
	sbc     #$04
	sta     _temp3
;
; if(temp5 == WALL){
;
L0AB5:	lda     _temp5
	cmp     #$01
	bne     L0AB9
;
; update_list[3+i] = wall_tiles[(temp2<<2)+temp3];
;
	lda     _i
	clc
	adc     #$03
	bcc     L0F10
	inx
	clc
L0F10:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp2
	jsr     aslax2
	clc
	adc     _temp3
	bcc     L0EDC
	inx
L0EDC:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L0F50
;
; update_list[3+i] = water_tiles[(temp2<<2)+temp3];
;
L0AB9:	lda     _i
	clc
	adc     #$03
	bcc     L0F11
	inx
	clc
L0F11:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp2
	jsr     aslax2
	clc
	adc     _temp3
	bcc     L0EDD
	inx
L0EDD:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L0F50:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(temp3==1 || temp3 == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp3
	cmp     #$01
	beq     L0AC9
	lda     _temp3
	cmp     #$02
	bne     L0AC8
L0AC9:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F12
	inx
	clc
L0F12:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; else if(temp3==0 && temp5 == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0F44
L0AC8:	lda     _temp3
	jne     L0A3B
	lda     _temp5
	cmp     #$01
	jne     L0A3B
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F13
	inx
	clc
L0F13:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
;
; break;
;
	jmp     L0F44
;
; temp2 = grand8()&0x3F;
;
L0ADB:	jsr     _grand8
	and     #$3F
	sta     _temp2
;
; if(temp2 > 9){
;
	cmp     #$0A
	bcc     L0AE0
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F14
	inx
	clc
L0F14:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A3B
;
; update_list[3+i] = 0x60 + temp2;
;
L0AE0:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F15
	inx
	clc
L0F15:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L0A3B
;
; switch(temp2){
;
L0AED:	lda     _temp2
;
; }
;
	beq     L0AF2
	cmp     #$01
	beq     L0B05
	cmp     #$02
	jeq     L0B18
	cmp     #$03
	jeq     L0B2B
	jmp     L0A3B
;
; if(current_line[temp4-1] != WALL_BIG){
;
L0AF2:	lda     _temp4
	sec
	sbc     #$01
	bcs     L0AF6
	dex
L0AF6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0AF3
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F16
	inx
	clc
L0F16:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
;
; }else{
;
	jmp     L0F44
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0AF3:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F17
	inx
	clc
L0F17:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L0F44
;
; if(current_line[temp4+1] != WALL_BIG){
;
L0B05:	lda     _temp4
	clc
	adc     #$01
	bcc     L0B09
	inx
L0B09:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B06
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F18
	inx
	clc
L0F18:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
;
; }else{
;
	jmp     L0F44
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0B06:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F19
	inx
	clc
L0F19:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L0F44
;
; if(current_line[temp4-1] != WALL_BIG){
;
L0B18:	lda     _temp4
	sec
	sbc     #$01
	bcs     L0B1C
	dex
L0B1C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B19
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1A
	inx
	clc
L0F1A:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
;
; }else{
;
	jmp     L0F44
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B19:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1B
	inx
	clc
L0F1B:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L0F44
;
; if(current_line[temp4+1] != WALL_BIG){
;
L0B2B:	lda     _temp4
	clc
	adc     #$01
	bcc     L0B2F
	inx
L0B2F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B2C
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1C
	inx
	clc
L0F1C:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
;
; }else{
;
	jmp     L0F44
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B2C:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1D
	inx
	clc
L0F1D:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L0F44
;
; temp3 = 0;
;
L0B3E:	stx     _temp3
;
; switch(temp2){
;
	lda     _temp2
;
; }
;
	beq     L0B45
	cmp     #$01
	beq     L0B53
	cmp     #$02
	jeq     L0B61
	cmp     #$03
	jeq     L0B6F
	jmp     L0B43
;
; update_list[3+i] = 0x4;
;
L0B45:	lda     _i
	clc
	adc     #$03
	bcc     L0F1E
	inx
	clc
L0F1E:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; temp3 += current_line[temp4-1] == FOREST;
;
	ldx     #$00
	lda     _temp4
	sec
	sbc     #$01
	bcs     L0B4D
	dex
L0B4D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp3
	sta     _temp3
;
; temp3 += prev_line[temp4] == FOREST;
;
	ldy     _temp4
	lda     _prev_line,y
;
; break;
;
	jmp     L0F5F
;
; update_list[3+i] = 0x5;
;
L0B53:	lda     _i
	clc
	adc     #$03
	bcc     L0F1F
	inx
	clc
L0F1F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; temp3 += current_line[temp4+1] == FOREST;
;
	ldx     #$00
	lda     _temp4
	clc
	adc     #$01
	bcc     L0B5B
	inx
L0B5B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp3
	sta     _temp3
;
; temp3 += prev_line[temp4] == FOREST;
;
	ldy     _temp4
	lda     _prev_line,y
;
; break;
;
	jmp     L0F5F
;
; update_list[3+i] = 0x6;
;
L0B61:	lda     _i
	clc
	adc     #$03
	bcc     L0F20
	inx
	clc
L0F20:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; temp3 += current_line[temp4-1] == FOREST;
;
	ldx     #$00
	lda     _temp4
	sec
	sbc     #$01
	bcs     L0B77
	dex
;
; break;
;
	jmp     L0B77
;
; update_list[3+i] = 0x7;
;
L0B6F:	lda     _i
	clc
	adc     #$03
	bcc     L0F21
	inx
	clc
L0F21:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; temp3 += current_line[temp4+1] == FOREST;
;
	ldx     #$00
	lda     _temp4
	clc
	adc     #$01
	bcc     L0B77
	inx
L0B77:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp3
	sta     _temp3
;
; temp3 += next_line[temp4] == FOREST;
;
	ldy     _temp4
	lda     _next_line,y
L0F5F:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp3
	sta     _temp3
;
; temp5 = 0;
;
L0B43:	stx     _temp5
;
; if(temp2 == ((row_index + temp4)&3)){
;
	lda     _temp2
	jsr     pusha0
	lda     _row_index
	clc
	adc     _temp4
	and     #$03
	jsr     tosicmp0
	bne     L0B8B
;
; if(temp3 == 0){
;
	lda     _temp3
	bne     L0B82
;
; temp5 = 1;
;
	lda     #$01
;
; }else if(temp3==1){
;
	jmp     L0F09
L0B82:	lda     _temp3
	cmp     #$01
	bne     L0B87
;
; temp5 = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L0F47
;
; temp5 = rand8() < 60;
;
L0B87:	jsr     _rand8
	cmp     #$3C
L0F47:	jsr     boolult
L0F09:	sta     _temp5
;
; if(temp5){
;
L0B8B:	lda     _temp5
	beq     L0B8E
;
; temp2 = grand8()&0x3F;
;
	jsr     _grand8
	and     #$3F
	sta     _temp2
;
; if(temp2 > 9){
;
	cmp     #$0A
	bcc     L0B92
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F22
	inx
	clc
L0F22:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A3B
;
; update_list[3+i] = 0x60 + temp2;
;
L0B92:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F23
	inx
	clc
L0F23:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A3B
;
; if((temp2 < 2 && temp3 <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0B8E:	lda     _temp2
	cmp     #$02
	bcs     L0EF6
	lda     _temp3
	cmp     #$02
	bcs     L0EF6
	jsr     _rand8
	and     #$03
	bne     L0BA0
L0EF6:	jsr     _rand8
	and     #$03
	bne     L0B9F
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0BA0:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F24
	inx
	clc
L0F24:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
;
; } else {
;
	jmp     L0F44
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0B9F:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F25
	inx
	clc
L0F25:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
L0F44:	ldy     #$00
	jsr     staspidx
;
; for(i=0; i<32; i++){
;
L0A3B:	lda     _i
	clc
	adc     #$01
	jmp     L0F48
;
; if( (temp&1) != 0){
;
L0A3A:	lda     _temp
	and     #$01
	jeq     L0BB5
;
; if(temp == 29){
;
	lda     _temp
	cmp     #$1D
	jne     L0BB9
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0BBB:	lda     _i
	cmp     #$08
	jcs     L0C06
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F26
	inx
	clc
L0F26:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F27
	inx
	clc
L0F27:	adc     #$01
	bcc     L0BCB
	inx
L0BCB:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F28
	inx
	clc
L0F28:	adc     #$01
	bcc     L0F29
	inx
	clc
L0F29:	adc     #$01
	bcc     L0BD1
	inx
L0BD1:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BBB
;
; }else if( (temp&3) == 3 ){
;
L0BB9:	lda     _temp
	and     #$03
	cmp     #$03
	jne     L0BD3
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0BD7:	lda     _i
	cmp     #$08
	jcs     L0C06
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F2A
	inx
	clc
L0F2A:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F2B
	inx
	clc
L0F2B:	adc     #$01
	bcc     L0BE7
	inx
L0BE7:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F2C
	inx
	clc
L0F2C:	adc     #$01
	bcc     L0F2D
	inx
	clc
L0F2D:	adc     #$01
	bcc     L0BED
	inx
L0BED:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BD7
;
; for(i=0;i<8;++i){
;
L0BD3:	lda     #$00
	sta     _i
L0BEF:	lda     _i
	cmp     #$08
	jcs     L0C06
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F2E
	inx
	clc
L0F2E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L0F2F
	inx
	clc
L0F2F:	adc     #$01
	bcc     L0BFF
	inx
L0BFF:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F30
	inx
	clc
L0F30:	adc     #$01
	bcc     L0F31
	inx
	clc
L0F31:	adc     #$01
	bcc     L0C05
	inx
L0C05:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BEF
;
; current_line[1] = WALL;
;
L0BB5:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0C06:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=180;
;
	lda     #$B4
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=180;
;
	lda     #$B4
	sta     _craft_y+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; next_line[0] = next_line[1] = WALL;
;
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; next_wall = 0;
;
	lda     #$00
	sta     _next_wall
;
; current_wall = 0;
;
	sta     _current_wall
;
; prev_wall = 0;
;
	sta     _prev_wall
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L0F88:	sta     _i
	cmp     #$06
	bcc     L0F89
;
; }
;
	rts
;
; if(craft_types[i] == 255){
;
L0F89:	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	jne     L0C5E
;
; if(enemy_spawn_scr == 0){
;
	lda     _enemy_spawn_scr
	jne     L0C58
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; temp = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L0F85:	sta     _temp
;
; while((blocked[0] & (1<<temp))){
;
L0C6A:	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0C6B
;
; temp++;
;
	lda     _temp
	clc
	adc     #$01
	sta     _temp
;
; if(temp == 16) temp = 0;
;
	cmp     #$10
	bne     L0C6A
	lda     #$00
;
; }                    
;
	jmp     L0F85
;
; craft_x[i] = temp*16 + (rand8()&7);
;
L0C6B:	lda     #<(_craft_x)
	ldx     #>(_craft_x)
	clc
	adc     _i
	bcc     L0C77
	inx
L0C77:	jsr     pushax
	ldx     #$00
	lda     _temp
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; craft_y[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_y,y
;
; sprite_dirs[i] = DIR_DOWN;
;
	ldy     _i
	lda     #$04
	sta     _sprite_dirs,y
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0C94
	inx
L0C94:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; else
;
	jmp     L0C58
;
; temp = (sprite_dirs[i]>0)+(sprite_look_dirs[i]>0);
;
L0C5E:	ldy     _i
	lda     _sprite_dirs,y
	jsr     boolne
	jsr     pusha0
	ldy     _i
	lda     _sprite_look_dirs,y
	jsr     boolne
	jsr     tosadda0
	sta     _temp
;
; temp2 = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp2
;
; temp3 = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp3
;
; temp4 = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp4
;
; if(temp == 1 || (frame&3) != 0){
;
	lda     _temp
	cmp     #$01
	beq     L0CAC
	lda     _frame
	and     #$03
	beq     L0CB5
;
; if(temp2&DIR_LEFT){
;
L0CAC:	lda     _temp2
	and     #$08
	beq     L0CB0
;
; craft_x[i]--;
;
	lda     #<(_craft_x)
	ldx     #>(_craft_x)
	clc
	adc     _i
	bcc     L0CB4
	inx
L0CB4:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(temp2&DIR_RIGHT){
;
L0CB0:	lda     _temp2
	and     #$02
	beq     L0CB5
;
; craft_x[i]++;
;
	lda     #<(_craft_x)
	ldx     #>(_craft_x)
	clc
	adc     _i
	bcc     L0CB9
	inx
L0CB9:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if(temp == 1 || (frame&3) != 1){
;
L0CB5:	lda     _temp
	cmp     #$01
	beq     L0CBB
	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0CBA
;
; if(temp2&DIR_UP){
;
L0CBB:	lda     _temp2
	and     #$01
	beq     L0CBF
;
; craft_y[i]--;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0CC3
	inx
L0CC3:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(temp2&DIR_DOWN){
;
L0CBF:	lda     _temp2
	and     #$04
	beq     L0CBA
;
; craft_y[i]++;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0CC8
	inx
L0CC8:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; temp2 = craft_flags[i]&15;
;
L0CBA:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp2
;
; if(temp2 && (frame & 7) == 0){
;
	lda     _temp2
	beq     L0CCD
	lda     _frame
	and     #$07
	bne     L0CCD
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0CD5
	inx
L0CD5:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(((frame+i)&3) == 0 ){
;
L0CCD:	lda     _frame
	clc
	adc     _i
	and     #$03
	bne     L0CD6
;
; craft_x[i] = temp3;
;
	ldy     _i
	lda     _temp3
	sta     _craft_x,y
;
; craft_y[i] = temp4;
;
	ldy     _i
	lda     _temp4
	sta     _craft_y,y
;
; } else if(temp2 == 0 || (craft_y[i] < 20 && sprite_dirs[i] == DIR_UP) || (craft_y[i] > 220 && sprite_dirs[i] == DIR_DOWN)|| isFreeIn(craft_x[i], craft_y[i]) == FALSE){
;
	jmp     L0CE3
L0CD6:	lda     _temp2
	beq     L0CE5
	ldy     _i
	lda     _craft_y,y
	cmp     #$14
	bcs     L0F83
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L0CE5
L0F83:	ldy     _i
	lda     _craft_y,y
	cmp     #$DD
	bcc     L0F84
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L0CE5
L0F84:	jsr     decsp2
	ldy     _i
	lda     _craft_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	cmp     #$00
	jne     L0CE3
;
; craft_x[i] = temp3;
;
L0CE5:	ldy     _i
	lda     _temp3
	sta     _craft_x,y
;
; craft_y[i] = temp4;
;
	ldy     _i
	lda     _temp4
	sta     _craft_y,y
;
; temp3 = 0;
;
	lda     #$00
	sta     _temp3
;
; temp3 |= sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
	ora     _temp3
	sta     _temp3
;
; if(isFreeIn(craft_x[i], craft_y[i]-1) == FALSE){
;
	jsr     decsp2
	ldy     _i
	lda     _craft_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	cmp     #$00
	bne     L0D09
;
; temp3 |= DIR_UP;
;
	lda     _temp3
	ora     #$01
	sta     _temp3
;
; if(isFreeIn(craft_x[i], craft_y[i]+1) == FALSE){
;
L0D09:	jsr     decsp2
	ldy     _i
	lda     _craft_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	cmp     #$00
	bne     L0D14
;
; temp3 |= DIR_DOWN;
;
	lda     _temp3
	ora     #$04
	sta     _temp3
;
; if(isFreeIn(craft_x[i]-1, craft_y[i]) == FALSE){
;
L0D14:	jsr     decsp2
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	cmp     #$00
	bne     L0D1F
;
; temp3 |= DIR_LEFT;
;
	lda     _temp3
	ora     #$08
	sta     _temp3
;
; if(isFreeIn(craft_x[i]+1, craft_y[i]) == FALSE){
;
L0D1F:	jsr     decsp2
	ldy     _i
	lda     _craft_x,y
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (sp),y
	jsr     _isFreeIn
	cmp     #$00
	bne     L0D2A
;
; temp3 |= DIR_RIGHT;
;
	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(craft_y[i] < 20){
;
L0D2A:	ldy     _i
	lda     _craft_y,y
	cmp     #$14
	bcs     L0D35
;
; temp3 |= DIR_UP;
;
	lda     _temp3
	ora     #$01
	sta     _temp3
;
; if(craft_y[i] > 220){
;
L0D35:	ldy     _i
	lda     _craft_y,y
	cmp     #$DD
	bcc     L0D3B
;
; temp3 |= DIR_DOWN;
;
	lda     _temp3
	ora     #$04
	sta     _temp3
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L0D3B:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0D43
	inx
L0D43:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L0D48
	inx
L0D48:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(temp3 == 0xF){
;
	lda     _temp3
	cmp     #$0F
	bne     L0D4A
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0C58
;
; }else if(temp3 == 0){
;
L0D4A:	lda     _temp3
	bne     L0D51
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0D55
	inx
L0D55:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L0CE3
;
; temp2 = rand8()&3;
;
L0D51:	jsr     _rand8
	and     #$03
	sta     _temp2
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L0D5C:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0D61
	inx
L0D61:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&temp3);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp3
	and     ptr1
	pha
	pla
	bne     L0D5C
;
; if(craft_bullet_timers[i])
;
L0CE3:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0D68
;
; craft_bullet_timers[i]--;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0D6E
	inx
L0D6E:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_bullet_timers[i] == 0)
;
L0D68:	ldy     _i
	lda     _craft_bullet_timers,y
	jne     L0D6F
;
; for(temp=CRAFT_BULLET_COUNT; temp < ENEMY_BULLET_COUNT; temp++){
;
	lda     #$08
L0F86:	sta     _temp
	cmp     #$0C
	bcs     L0D6F
;
; if(craft_bullet_y[temp] != 255) continue;
;
	ldy     _temp
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0D75
;
; craft_bullet_x[temp] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _temp
	bcc     L0D81
	inx
L0D81:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[temp] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _temp
	bcc     L0D87
	inx
L0D87:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[temp] = sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _temp
	bcc     L0D8D
	inx
L0D8D:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _sprite_dirs,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0D93
	inx
L0D93:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D6F
;
; for(temp=CRAFT_BULLET_COUNT; temp < ENEMY_BULLET_COUNT; temp++){
;
L0D75:	lda     _temp
	clc
	adc     #$01
	jmp     L0F86
;
; if(craft_y[i] >= MAX_Y-1 || craft_hps[i] == 0){
;
L0D6F:	ldy     _i
	lda     _craft_y,y
	cmp     #$EC
	bcs     L0D98
	ldy     _i
	lda     _craft_hps,y
	bne     L0D97
;
; craft_types[i] = 255;
;
L0D98:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0C58
;
; for(temp2=0; temp2<2; temp2++){
;
L0D97:	lda     #$00
L0F87:	sta     _temp2
	cmp     #$02
	jcs     L0C58
;
; if(craft_lives[temp2] != 0){
;
	ldy     _temp2
	lda     _craft_lives,y
	jeq     L0DA5
;
; if(craft_x[i] > craft_x[temp2]-12 && craft_x[i] < craft_x[temp2]+12 && craft_y[i] > craft_y[temp2]-12 && craft_y[i] < craft_y[temp2]+12){
;
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L0DB5
	ldx     #$FF
L0DB5:	jsr     tosicmp
	bcc     L0DA5
	beq     L0DA5
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L0DBB
	ldx     #$01
L0DBB:	jsr     tosicmp
	bcs     L0DA5
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L0DC0
	ldx     #$FF
L0DC0:	jsr     tosicmp
	bcc     L0DA5
	beq     L0DA5
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	ldy     _temp2
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L0DC5
	ldx     #$01
L0DC5:	jsr     tosicmp
	bcs     L0DA5
;
; damage_craft(temp2, 2);
;
	jsr     decsp2
	lda     _temp2
	ldy     #$01
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	jsr     _damage_craft
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; break;
;
	jmp     L0C58
;
; for(temp2=0; temp2<2; temp2++){
;
L0DA5:	lda     _temp2
	clc
	adc     #$01
	jmp     L0F87
;
; for(i=2; i<6; i++){
;
L0C58:	lda     _i
	clc
	adc     #$01
	jmp     L0F88

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L0F8D
;
; }
;
	rts
;
; temp = 4;
;
L0F8D:	lda     #$04
	sta     _temp
;
; while(temp>0){
;
L0DD6:	lda     _temp
	beq     L0DD7
;
; temp--;
;
	lda     _temp
	sec
	sbc     #$01
	sta     _temp
;
; pal_bright(temp);
;
	jsr     _pal_bright
;
; temp2 = 3;
;
	lda     #$03
	sta     _temp2
;
; while(temp2--){
;
L0DDE:	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
	pla
	tax
	beq     L0DD6
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0DDE
;
; oam_clear();
;
L0DD7:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L0F8C:	sta     _i
	cmp     #$07
	bcs     L0DE6
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L0F8B
	clc
L0F8B:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F8C
;
; temp = 0;
;
L0DE6:	lda     #$00
	sta     _temp
;
; while(temp<4){
;
L0DFA:	lda     _temp
	cmp     #$04
	bcs     L0DFB
;
; temp++;
;
	lda     _temp
	clc
	adc     #$01
	sta     _temp
;
; pal_spr_bright(temp);
;
	jsr     _pal_spr_bright
;
; temp2 = 3;
;
	lda     #$03
	sta     _temp2
;
; while(temp2--){
;
L0E02:	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
	pla
	tax
	beq     L0DFA
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E02
;
; ppu_wait_frame();
;
L0DFB:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L0DFB
;
; temp = 4;
;
	lda     #$04
	sta     _temp
;
; while(temp>0){
;
L0E11:	lda     _temp
	beq     L0E12
;
; temp--;
;
	lda     _temp
	sec
	sbc     #$01
	sta     _temp
;
; pal_spr_bright(temp);
;
	jsr     _pal_spr_bright
;
; temp2 = 3;
;
	lda     #$03
	sta     _temp2
;
; while(temp2--){
;
L0E19:	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
	pla
	tax
	beq     L0E11
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E19
;
; oam_clear();
;
L0E12:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; temp = 0;
;
	lda     #$00
	sta     _temp
;
; while(temp<4){
;
L0E23:	lda     _temp
	cmp     #$04
	bcs     L0E24
;
; temp++;
;
	lda     _temp
	clc
	adc     #$01
	sta     _temp
;
; pal_bright(temp);
;
	jsr     _pal_bright
;
; temp2 = 3;
;
	lda     #$03
	sta     _temp2
;
; while(temp2--){
;
L0E2B:	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
	pla
	tax
	beq     L0E23
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E2B
;
; }
;
L0E24:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; menu();
;
	jsr     _menu
;
; reset();
;
	jsr     _reset
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L0E34:	lda     _scr+1
	bne     L0F8E
	lda     _scr
	cmp     #$F0
	beq     L0E35
;
; ppu_wait_frame();
;
L0F8E:	jsr     _ppu_wait_frame
;
; temp = 146;
;
	lda     #$92
	sta     _temp
;
; temp6 = scr > 400;
;
	lda     _scr
	cmp     #$91
	lda     _scr+1
	sbc     #$01
	bvs     L0E3D
	eor     #$80
L0E3D:	asl     a
	lda     #$00
	rol     a
	sta     _temp6
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0E34
;
; temp6 = 0;
;
L0E35:	lda     #$00
	sta     _temp6
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=200;
;
	lda     #$C8
	sta     _craft_y+1
;
; craft_types[2] = 255;
;
	lda     #$FF
	sta     _craft_types+2
;
; craft_types[3] = 255;
;
	sta     _craft_types+3
;
; craft_types[4] = 255;
;
	sta     _craft_types+4
;
; craft_types[5] = 255;
;
	sta     _craft_types+5
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; ppu_wait_frame();
;
L0E62:	jsr     _ppu_wait_frame
;
; oam_clear();
;
	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; spr=oam_spr(20, wall_count, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$14
	ldy     #$03
	sta     (sp),y
	lda     _wall_count
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(40, has_big_wall, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$28
	ldy     #$03
	sta     (sp),y
	lda     _has_big_wall
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(60, wall_hit_y[0]&15, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$3C
	ldy     #$03
	sta     (sp),y
	lda     _wall_hit_y
	and     #$0F
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; tick_crafts();
;
	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; temp = 255;
;
	lda     #$FF
	sta     _temp
;
; if(craft_lives[0] && temp > craft_y[0]) temp = craft_y[0];
;
	lda     _craft_lives
	beq     L0E85
	lda     _temp
	sec
	sbc     _craft_y
	sta     tmp1
	lda     tmp1
	beq     L0E85
	bcc     L0E85
	lda     _craft_y
	sta     _temp
;
; if(craft_lives[1] && temp > craft_y[1]) temp = craft_y[1];
;
L0E85:	lda     _craft_lives+1
	beq     L0E8E
	lda     _temp
	sec
	sbc     _craft_y+1
	sta     tmp1
	lda     tmp1
	beq     L0E8E
	bcc     L0E8E
	lda     _craft_y+1
	sta     _temp
;
; if(temp6){
;
L0E8E:	lda     _temp6
	beq     L0E97
;
; temp6 = 0;
;
	lda     #$00
	sta     _temp6
;
; else
;
	jmp     L0E9B
;
; scroll_screen();
;
L0E97:	jsr     _scroll_screen
;
; check_pause();
;
L0E9B:	jsr     _check_pause
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0E62

.endproc

