;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_col
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
_enemy_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_craft_bullet_y:
	.byte	$FF
	.res	11,$00
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$0F
	.byte	$30
	.byte	$30
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$E0
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$E3
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$E1
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$E2
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_dont_change_bg_pallette:
	.res	1,$00
_building_shift:
	.res	1,$00
_sprite_to_bg_x:
	.res	1,$00
_sprite_to_bg_y:
	.res	1,$00
_building_index_x:
	.res	1,$00
_building_index_y:
	.res	1,$00
_scroll_amount:
	.res	1,$00
_is_update_dirty:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L1019
	inx
	clc
L1019:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L0366:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L0394
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L0375
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L0394
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L0394
L0375:	lda     _temp2
	and     #$20
	beq     L037D
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L0394
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L0394
L037D:	lda     _temp2
	and     #$0F
	beq     L0394
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L0388
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_types[1] = 255;
;
	lda     #$FF
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L0388:	lda     _temp0
	cmp     #$01
	bne     L0394
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L0394:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L0366

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = craft_types[i]?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	beq     L03B1
	lda     #$00
	jmp     L03B3
L03B1:	lda     #$40
L03B3:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L03BB
	cmp     #$02
	beq     L03C7
	cmp     #$04
	beq     L03CD
	cmp     #$08
	beq     L03C1
	jmp     L03B9
;
; craft_sprite += 0x04;
;
L03BB:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L101C
;
; craft_sprite += 0x24;
;
L03C1:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L101C
;
; craft_sprite += 0x04;
;
L03C7:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L101C
;
; craft_sprite += 0x34;
;
L03CD:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L101C:	sta     _temp3
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L03B9:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L03D2
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L101F
L03D2:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L03D9
;
; craft_sprite += 0x04;
;
	lda     #$04
L101F:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L03D9:	lda     _i
	cmp     #$02
	bcs     L03DF
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L03E7
	lda     #$08
L03E7:	cpx     ptr1+1
	bne     L03E1
	cmp     ptr1
	bne     L03E1
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L03E1
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L03E1:	lda     _temp3
	ora     _i
	sta     _temp3
;
; }else{
;
	jmp     L03F5
;
; craft_sprite_prop |= 2;
;
L03DF:	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L03F5
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; if(sprite_to_bg_y != 255){
;
L03F5:	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L03FB
;
; if(craft_x[i] > sprite_to_bg_x && craft_x[i] < sprite_to_bg_x + 48 &&
;
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     _sprite_to_bg_x
	bcc     L03FB
	beq     L03FB
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$30
	bcc     L0402
	ldx     #$01
L0402:	jsr     tosicmp
	bcs     L03FB
;
; craft_y[i] < sprite_to_bg_y && craft_y[i] > sprite_to_bg_y - 48){
;
	ldy     _i
	lda     _craft_y,y
	cmp     _sprite_to_bg_y
	bcs     L03FB
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$30
	bcs     L0407
	ldx     #$FF
L0407:	jsr     tosicmp
	beq     L03FB
	bcc     L03FB
;
; craft_sprite_prop |= (1<<5);
;
	lda     _temp3
	ora     #$20
	sta     _temp3
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L03FB:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0;i<6; i++){
;
	lda     #$00
L1021:	sta     _i
	cmp     #$06
	bcs     L0427
;
; if(craft_types[i] == 255) continue;
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	beq     L0428
;
; draw_tank();
;
	jsr     _draw_tank
;
; if(i<2){
;
	lda     _i
	cmp     #$02
	bcs     L0428
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L043A
	lda     _frame
	and     #$10
	bne     L043A
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-20-8:20, 210, 0xA0+craft_hp_sprite, i, spr);
;
L043A:	jsr     decsp4
	lda     _i
	beq     L0447
	lda     #$E4
	jmp     L0449
L0447:	lda     #$14
L0449:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0;i<6; i++){
;
L0428:	lda     _i
	clc
	adc     #$01
	jmp     L1021
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0427:	lda     #$00
	sta     _i
L0450:	lda     _i
	cmp     #$0C
	bcc     L1022
;
; }
;
	rts
;
; if(craft_bullet_y[i] == 255) continue;
;
L1022:	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L0452
;
; props = i<CRAFT_BULLET_COUNT?i&1:2;
;
	lda     _i
	cmp     #$08
	bcs     L045E
	lda     _i
	and     #$01
	jmp     L0460
L045E:	lda     #$02
L0460:	sta     _temp2
;
; if(sprite_to_bg_y != 255){
;
	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L0464
;
; if(craft_bullet_x[i] >= sprite_to_bg_x+8 && craft_bullet_x[i] < sprite_to_bg_x + 32 &&
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$08
	bcc     L0468
	ldx     #$01
L0468:	jsr     tosicmp
	bcc     L0464
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$20
	bcc     L046C
	ldx     #$01
L046C:	jsr     tosicmp
	bcs     L0464
;
; craft_bullet_y[i] <= sprite_to_bg_y-8 && craft_bullet_y[i] > sprite_to_bg_y - 32){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$08
	bcs     L046F
	ldx     #$FF
L046F:	jsr     tosicmp
	beq     L1020
	bcs     L0464
L1020:	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$20
	bcs     L0472
	ldx     #$FF
L0472:	jsr     tosicmp
	beq     L0464
	bcc     L0464
;
; props |= (1<<5);
;
	lda     _temp2
	ora     #$20
	sta     _temp2
;
; spr=oam_spr(craft_bullet_x[i]-2, craft_bullet_y[i]-2, 0x80, props, spr);
;
L0464:	jsr     decsp4
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	ldy     #$02
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _temp2
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0452:	inc     _i
	jmp     L0450

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
	stx     _i
L04AF:	lda     _i
	cmp     #$0C
	jcs     L04B0
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L04B1
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L04C9
	cmp     #$02
	beq     L04DF
	cmp     #$04
	beq     L04EA
	cmp     #$05
	beq     L04EF
	cmp     #$06
	beq     L04E4
	cmp     #$08
	beq     L04D4
	cmp     #$09
	beq     L04CE
	cmp     #$0A
	beq     L04D9
	jmp     L04C7
;
; bullet_y -= 3;
;
L04C9:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L04C7
;
; bullet_y -= 2;
;
L04CE:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L1041
;
; bullet_x += 3;
;
L04D4:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L1041
;
; bullet_y += 2;
;
L04D9:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L1041
;
; bullet_y += 3;
;
L04DF:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L04C7
;
; bullet_y += 2;
;
L04E4:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L105B
;
; bullet_x -= 3;
;
L04EA:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L1041
;
; bullet_y -= 2;
;
L04EF:	lda     _temp3
	sec
	sbc     #$02
L105B:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L1041:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L04C7:	lda     _temp0
	cmp     #$0A
	bcc     L04F5
	lda     _temp0
	cmp     #$F5
	bcs     L04F5
	lda     _temp3
	cmp     #$F5
	bcs     L04F5
	lda     _temp3
	cmp     #$0A
	bcs     L04F4
;
; craft_bullet_y[i] = 255;
;
L04F5:	ldy     _i
	lda     #$FF
;
; continue;
;
	jmp     L1042
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L04F4:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1053
	inx
L1053:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1048
	inx
	clc
L1048:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L0507
	cmp     #$00
L0507:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L0508
;
; if(has_collision){
;
	lda     _temp4
	jeq     L050A
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L050D
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L050D
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L050C
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L050D:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; if(is_update_dirty == 0){
;
L050C:	lda     _is_update_dirty
	bne     L0521
;
; wall_hit_hp[i&1]--;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
L0521:	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L0525
	lda     _temp2
	jeq     L0525
	lda     _temp2
	cmp     #$0F
	jeq     L0525
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1049
	inx
	clc
L1049:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L104A
	inx
	clc
L104A:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L104B
	inx
	clc
L104B:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L0538
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L0538:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L053E
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L053E:	lda     _temp0
	cmp     #$1E
	bcs     L0542
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L1057
;
; row_index_on_ns-=30;
;
L0542:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L1057:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L104C
	inx
	clc
L104C:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; if(building_index_y < 17 && (bullet_grid_pos_x == building_index_x || bullet_grid_pos_x == building_index_x+1) && bullet_grid_pos_y+1 == building_index_y){
;
	lda     _building_index_y
	cmp     #$11
	jcs     L054F
	lda     _building_index_x
	cmp     _temp2
	beq     L0552
	ldx     #$00
	lda     _building_index_x
	clc
	adc     #$01
	bcc     L0553
	inx
L0553:	cpx     #$00
	jne     L054F
	cmp     _temp2
	jne     L054F
L0552:	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0555
	inx
L0555:	cpx     #$00
	jne     L054F
	cmp     _building_index_y
	jne     L054F
;
; if(bullet_grid_pos_x == building_index_x){
;
	lda     _building_index_x
	cmp     _temp2
	jne     L0557
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	lda     _temp1
	asl     a
	bcc     L104D
	inx
	clc
L104D:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L104E
	inx
	clc
L104E:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L104F
	inx
	clc
L104F:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L056D
	dex
L056D:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; }else{
;
	jmp     L0572
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
L0557:	lda     _temp1
	asl     a
	bcc     L1050
	inx
	clc
L1050:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1051
	inx
	clc
L1051:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1052
	inx
	clc
L1052:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0587
	dex
L0587:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; adr-=2;
;
	lda     _adr
	sec
	sbc     #$02
	sta     _adr
	bcs     L0572
	dec     _adr+1
;
; building_index_y = 17;
;
L0572:	lda     #$11
	sta     _building_index_y
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2]=4;
;
	lda     #$04
	sta     _update_list+2
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L05A4
	inc     _adr+1
;
; update_list[7]=MSB(adr)|NT_UPD_HORZ;
;
L05A4:	lda     _adr+1
	ora     #$40
	sta     _update_list+7
;
; update_list[8]=LSB(adr);
;
	lda     _adr
	sta     _update_list+8
;
; update_list[9]= 4;
;
	lda     #$04
	sta     _update_list+9
;
; adr -= 96;
;
	lda     _adr
	sec
	sbc     #$60
	sta     _adr
	bcs     L05B6
	dec     _adr+1
;
; update_list[14]=MSB(adr)|NT_UPD_HORZ;
;
L05B6:	lda     _adr+1
	ora     #$40
	sta     _update_list+14
;
; update_list[15]=LSB(adr);
;
	lda     _adr
	sta     _update_list+15
;
; update_list[16]=4;
;
	lda     #$04
	sta     _update_list+16
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L05C8
	inc     _adr+1
;
; update_list[21]=MSB(adr)|NT_UPD_HORZ;
;
L05C8:	lda     _adr+1
	ora     #$40
	sta     _update_list+21
;
; update_list[22]=LSB(adr);
;
	lda     _adr
	sta     _update_list+22
;
; update_list[23]=4;
;
	lda     #$04
	sta     _update_list+23
;
; update_list[28] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+28
;
; update_list[10]=0xC0;
;
	lda     #$C0
	sta     _update_list+10
;
; update_list[11]=0xB7;
;
	lda     #$B7
	sta     _update_list+11
;
; update_list[12]=0xB7;
;
	sta     _update_list+12
;
; update_list[13]=0xC1;
;
	lda     #$C1
	sta     _update_list+13
;
; update_list[3]=0xB0;
;
	lda     #$B0
	sta     _update_list+3
;
; update_list[4]=0xB4;
;
	lda     #$B4
	sta     _update_list+4
;
; update_list[5]=0xB4;
;
	sta     _update_list+5
;
; update_list[6]=0xB1;
;
	lda     #$B1
	sta     _update_list+6
;
; update_list[17]=0x0;
;
	tya
	sta     _update_list+17
;
; update_list[18]=0x0;
;
	sta     _update_list+18
;
; update_list[19]=0x0;
;
	sta     _update_list+19
;
; update_list[20]=0x0;
;
	sta     _update_list+20
;
; update_list[24]=0x0;
;
	sta     _update_list+24
;
; update_list[25]=0x0;
;
	sta     _update_list+25
;
; update_list[26]=0x0;
;
	sta     _update_list+26
;
; update_list[27]=0x0;
;
	sta     _update_list+27
;
; }else{
;
	jmp     L06D9
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
L054F:	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0620
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0620:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	sty     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L0635
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0639
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L103D
	cmp     _temp2
	bne     L103D
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0645
	dex
L0645:	cpx     ptr1+1
	bne     L103D
	cmp     ptr1
	beq     L0639
L103D:	lda     #$00
	jmp     L0647
L0639:	lda     #$01
L0647:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L0635:	lda     _temp2
	beq     L0648
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L064C
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0654
	dex
L0654:	cpx     ptr1+1
	bne     L103E
	cmp     ptr1
	bne     L103E
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L103E
	cmp     _temp1
	beq     L064C
L103E:	ldx     #$00
	txa
	jmp     L065A
L064C:	lda     #$01
L065A:	asl     a
	bcc     L102E
	inx
L102E:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L0648:	lda     _temp1
	cmp     #$0E
	bcs     L065B
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L065F
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L103F
	cmp     _temp2
	bne     L103F
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L066B
	inx
L066B:	cpx     ptr1+1
	bne     L103F
	cmp     ptr1
	beq     L065F
L103F:	ldx     #$00
	txa
	jmp     L066D
L065F:	ldx     #$00
	lda     #$01
L066D:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L065B:	lda     _temp2
	cmp     #$0F
	bcs     L066E
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0672
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L067A
	inx
L067A:	cpx     ptr1+1
	bne     L1040
	cmp     ptr1
	bne     L1040
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L1040
	cmp     _temp1
	beq     L0672
L1040:	ldx     #$00
	txa
	jmp     L0680
L0672:	lda     #$01
L0680:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L066E:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L0681
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L1044
L0681:	lda     _temp5
	and     #$01
	beq     L0689
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L1044
L0689:	lda     _temp5
	and     #$02
	beq     L1044
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L1044:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L0698
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L1045
L0698:	lda     _temp5
	and     #$01
	beq     L06A0
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L1045
L06A0:	lda     _temp5
	and     #$08
	beq     L1045
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L1045:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L06AF
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L1046
L06AF:	lda     _temp5
	and     #$04
	beq     L06B7
;
; update_list[8] = 0xB6;
;
	lda     #$B6
;
; else if(collision_edge_data & 2)
;
	jmp     L1046
L06B7:	lda     _temp5
	and     #$02
	beq     L1046
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L1046:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L06C6
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L1047
L06C6:	lda     _temp5
	and     #$04
	beq     L06CE
;
; update_list[9] = 0XB7;
;
	lda     #$B7
;
; else if(collision_edge_data & 8)
;
	jmp     L1047
L06CE:	lda     _temp5
	and     #$08
	beq     L1047
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L1047:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
L06D9:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_y[i] = 255;
;
L0525:	ldy     _i
	lda     #$FF
;
; continue;
;
	jmp     L1042
;
; for(j=2; j<6; j++){
;
L050A:	lda     #$02
L1058:	sta     _j
	cmp     #$06
	jcs     L070C
;
; if(craft_types[j] != 255){
;
	ldy     _j
	lda     _craft_types,y
	cmp     #$FF
	jeq     L06E9
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L06F7
	ldx     #$FF
L06F7:	jsr     tosicmp
	bcc     L06E9
	beq     L06E9
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L06FB
	ldx     #$01
L06FB:	jsr     tosicmp
	bcs     L06E9
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L06FE
	ldx     #$FF
L06FE:	jsr     tosicmp
	bcc     L06E9
	beq     L06E9
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0701
	ldx     #$01
L0701:	jsr     tosicmp
	bcs     L06E9
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L0703
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0709
	inx
L0709:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; bullet_y = 255;
;
L0703:	lda     #$FF
	sta     _temp3
;
; break;
;
	jmp     L070C
;
; for(j=2; j<6; j++){
;
L06E9:	lda     _j
	clc
	adc     #$01
	jmp     L1058
;
; if(has_collision){
;
L0508:	lda     _temp4
	beq     L070D
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
;
; continue;
;
	jmp     L1042
;
; for(j=0; j<2; j++){
;
L070D:	sta     _j
	cmp     #$02
	jcs     L070C
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0715
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0725
	ldx     #$FF
L0725:	jsr     tosicmp
	jcc     L0715
	jeq     L0715
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L072B
	ldx     #$01
L072B:	jsr     tosicmp
	bcs     L0715
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0730
	ldx     #$FF
L0730:	jsr     tosicmp
	bcc     L0715
	beq     L0715
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0735
	ldx     #$01
L0735:	jsr     tosicmp
	bcs     L0715
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L0737
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L073D
	inx
L073D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; bullet_y = 255;
;
L0737:	lda     #$FF
	sta     _temp3
;
; break;
;
	jmp     L070C
;
; for(j=0; j<2; j++){
;
L0715:	lda     _j
	clc
	adc     #$01
	jmp     L070D
;
; craft_bullet_x[i] = bullet_x;
;
L070C:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
L1042:	sta     _craft_bullet_y,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04B1:	inc     _i
	jmp     L04AF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L04B0:	lda     #$00
	jsr     _pad_poll
	ldx     #$00
	and     #$02
	stx     tmp1
	ora     tmp1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; for(i=0;i<2;++i){
;
	lda     #$00
	sta     _i
L074C:	lda     _i
	cmp     #$02
	bcc     L1067
;
; }
;
	rts
;
; if(!craft_lives[i]) continue;
;
L1067:	ldy     _i
	lda     _craft_lives,y
	jeq     L074E
;
; if(craft_hps[i] == 0)
;
	ldy     _i
	lda     _craft_hps,y
	bne     L0758
;
; craft_hps[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L0762
	inx
L0762:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; pad=pad_poll(i);
;
L0758:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L076C
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L076F
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L076F
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L076F
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0794
;
; sprite_dirs[i] = DIR_LEFT;
;
L076F:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L105C
L076C:	lda     _temp0
	and     #$80
	beq     L0794
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L0786
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L0786
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L0786
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0794
;
; sprite_dirs[i] = DIR_RIGHT;
;
L0786:	ldy     _i
	lda     #$08
L105C:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L0794:	lda     _temp0
	and     #$10
	beq     L0799
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L079C
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L079C
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L079C
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07C1
;
; sprite_dirs[i] = DIR_UP;
;
L079C:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L105D
L0799:	lda     _temp0
	and     #$20
	beq     L07C1
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L07B3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L07B3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L07B3
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07C1
;
; sprite_dirs[i] = DIR_DOWN;
;
L07B3:	ldy     _i
	lda     #$02
L105D:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L07C1:	lda     _temp4
	jeq     L07C6
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L07D1
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L07FD
;
; if(pad&PAD_LEFT){
;
L07D1:	lda     _temp0
	and     #$40
	jeq     L07D5
;
; int_temp0 = (((unsigned int)1)<<(new_x-9+COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$09
	bcs     L07DC
	ldx     #$FF
L07DC:	clc
	adc     #$02
	bcc     L07DD
	inx
L07DD:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L07E7
	inx
L07E7:	sec
	sbc     #$02
	bcs     L07E8
	dex
L07E8:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L07E3
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L07EC
	dex
L07EC:	clc
	adc     #$02
	bcc     L07ED
	inx
L07ED:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L07EE
L07E3:	lda     #$01
L07EE:	jsr     bnega
	jeq     L07FD
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L1065
L07D5:	lda     _temp0
	and     #$80
	jeq     L07FD
;
; int_temp0 = (((unsigned int)1)<<(new_x+8-COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$08
	bcc     L07F8
	ldx     #$01
L07F8:	sec
	sbc     #$02
	bcs     L07F9
	dex
L07F9:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L0803
	inx
L0803:	sec
	sbc     #$02
	bcs     L0804
	dex
L0804:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L07FF
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L0808
	dex
L0808:	clc
	adc     #$02
	bcc     L0809
	inx
L0809:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L080A
L07FF:	lda     #$01
L080A:	jsr     bnega
	beq     L07FD
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L1065:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L07FD:	lda     _temp4
	cmp     #$01
	beq     L080D
	lda     _frame
	and     #$03
	jeq     L0829
;
; if(pad&PAD_UP){
;
L080D:	lda     _temp0
	and     #$10
	jeq     L0810
;
; if(!((blocked[new_y-8+COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$08
	bcs     L0817
	dex
L0817:	clc
	adc     #$02
	bcc     L0818
	inx
L0818:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1063
	inx
L1063:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L081E
	ldx     #$FF
L081E:	clc
	adc     #$02
	bcc     L081F
	inx
L081F:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L0823
	ldx     #$01
L0823:	sec
	sbc     #$02
	bcs     L0824
	dex
L0824:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L0829
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L1066
L0810:	lda     _temp0
	and     #$20
	jeq     L0829
;
; if(!((blocked[new_y+9-COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$09
	bcc     L082E
	inx
L082E:	sec
	sbc     #$02
	bcs     L082F
	dex
L082F:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1064
	inx
L1064:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L0835
	ldx     #$FF
L0835:	clc
	adc     #$02
	bcc     L0836
	inx
L0836:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L083A
	ldx     #$01
L083A:	sec
	sbc     #$02
	bcs     L083B
	dex
L083B:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L0829
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L1066:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L0829:	lda     _temp6
	cmp     #$DD
	bcc     L083D
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L083D:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L07C6:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L084B
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0851
	inx
L0851:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L074E
L084B:	lda     _temp0
	and     #$01
	jeq     L074E
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L1060:	sta     _j
	cmp     #$08
	bcs     L074E
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0857
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L0864
	inx
L0864:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L086A
	inx
L086A:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L0870
	inx
L0870:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L074E
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L0857:	lda     #$02
	clc
	adc     _j
	jmp     L1060
;
; for(i=0;i<2;++i){
;
L074E:	inc     _i
	jmp     L074C

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(scroll_amount){
;
	lda     _scroll_amount
	bne     L1117
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L1117:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _scroll_amount
	bcc     L0882
	beq     L0882
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L1087
;
; enemy_spawn_scr = 0;
;
L0882:	lda     #$00
L1087:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L0889:	lda     _i
	cmp     #$06
	bcs     L088A
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0893
	inx
L0893:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; if(i<2&& craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	lda     _i
	cmp     #$02
	bcs     L088B
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L088B
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L088B:	inc     _i
	jmp     L0889
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L088A:	lda     #$00
	sta     _i
L08A1:	lda     _i
	cmp     #$0C
	bcs     L08A2
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L08A3
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L08AD
	beq     L08AD
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; }else{
;
	jmp     L08A3
;
; craft_bullet_y[i] += scroll_amount;
;
L08AD:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L08B8
	inx
L08B8:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L08A3:	inc     _i
	jmp     L08A1
;
; scr -= scroll_amount;
;
L08A2:	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L08BC
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; if(sprite_to_bg_y<255-scroll_amount) sprite_to_bg_y+=scroll_amount;
;
L08BC:	lda     _sprite_to_bg_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcs     L08C0
	lda     _scroll_amount
	clc
	adc     _sprite_to_bg_y
;
; else sprite_to_bg_y = 255;
;
	jmp     L1088
L08C0:	lda     #$FF
L1088:	sta     _sprite_to_bg_y
;
; row_index = scr>>3;
;
	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L08C9
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L08C9:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L10C9
	cmp     _last_row_index
	jeq     L0D6D
;
; last_row_index = row_index;
;
L10C9:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L08D4
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L10F0
;
; row_index-=30;
;
L08D4:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L10F0:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0B52
;
; is_update_dirty = 1;
;
	lda     #$01
	sta     _is_update_dirty
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L091B
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L091B:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0922
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0922:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0929
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0929:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L0931
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L0931:	lda     #$02
L10CC:	sta     _i
	cmp     #$10
	bcs     L093A
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0943
	inx
L0943:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0949
	inx
L0949:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L094E
	lda     _i
	cmp     #$0F
	bne     L094D
;
; if(rand8() < 30){
;
L094E:	jsr     _rand8
	cmp     #$1E
	bcs     L093B
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L094D
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L108A
;
; next_line[i] = GRASS;
;
L094D:	ldy     _i
	lda     #$00
L108A:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L093B:	lda     _i
	clc
	adc     #$01
	jmp     L10CC
;
; wall_count -= (wall_count>>3);
;
L093A:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(building_index_y<17) building_index_y++;
;
	lda     _building_index_y
	cmp     #$11
	bcs     L0967
	lda     _building_index_y
	clc
	adc     #$01
	sta     _building_index_y
;
; if(dont_change_bg_pallette) dont_change_bg_pallette--;
;
L0967:	lda     _dont_change_bg_pallette
	beq     L096A
	lda     _dont_change_bg_pallette
	sec
	sbc     #$01
	sta     _dont_change_bg_pallette
;
; if(wall_count) wall_count--;
;
L096A:	lda     _wall_count
	beq     L096D
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L096D:	lda     _has_big_wall
	beq     L0970
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L0970:	lda     _wall_count
	cmp     #$02
	jcs     L09E0
	jsr     _rand8
	cmp     #$96
	jcs     L09E0
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L09A0
	lda     _temp2
	cmp     #$3C
	bcs     L0981
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L108B
L0981:	lda     _temp2
	cmp     #$78
	bcs     L0986
	lda     #$04
;
; else if(!dont_change_bg_pallette && row_index != 29 && random < 160){
;
	jmp     L108B
L0986:	lda     _dont_change_bg_pallette
	bne     L098B
	lda     _temp0
	cmp     #$1D
	beq     L098B
	lda     _temp2
	cmp     #$A0
	bcs     L098B
;
; selected_grid = BUILDING;
;
	lda     #$08
	sta     _temp1
;
; dont_change_bg_pallette = 16;
;
	lda     #$10
	sta     _dont_change_bg_pallette
;
; building_shift = random>126?8:random>113?4:0;
;
	lda     _temp2
	cmp     #$7F
	bcc     L0995
	lda     #$08
	jmp     L099B
L0995:	lda     _temp2
	cmp     #$72
	bcc     L0999
	lda     #$04
	jmp     L099B
L0999:	lda     #$00
L099B:	sta     _building_shift
;
; building_index_y = 0;
;
	lda     #$00
	sta     _building_index_y
;
; }else if(random < 200){
;
	jmp     L09A6
L098B:	lda     _temp2
	cmp     #$C8
	bcs     L09A0
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L09A6
;
; selected_grid = WALL;
;
L09A0:	lda     #$01
L108B:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L09A6:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L09AC
	inx
L09AC:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(selected_grid == BUILDING){
;
	lda     _temp1
	cmp     #$08
	bne     L09B1
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L09B3
;
; grid_start--;
;
	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
;
; }else{
;
	jmp     L108C
;
; grid_end++;
;
L09B3:	lda     _temp3
	pha
	clc
	adc     #$01
	sta     _temp3
L108C:	pla
;
; building_index_x = grid_start-1;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _building_index_x
;
; sprite_to_bg_x = (grid_start<<4)-24;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	sec
	sbc     #$18
	sta     _sprite_to_bg_x
;
; }else{
;
	jmp     L09DB
;
; if(rand8()&1) grid_start--;
;
L09B1:	jsr     _rand8
	and     #$01
	beq     L09C0
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L09C0:	jsr     _rand8
	and     #$01
	beq     L09C3
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L09C3:	lda     _temp1
	cmp     #$05
	beq     L09C6
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L09C8
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L09C8:	jsr     _rand8
	and     #$01
	beq     L09DB
	lda     _temp3
	pha
	clc
	adc     #$01
;
; }else{
;
	jmp     L10CD
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L09C6:	lda     _temp3
	cmp     _temp2
	bne     L09D5
	jsr     _rand8
	and     #$01
	beq     L09D3
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L09D5
L09D3:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(grid_start == 2){
;
L09D5:	lda     _temp2
	cmp     #$02
	bne     L09D7
;
; grid_start++; 
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; grid_end++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(grid_start == 15){
;
L09D7:	lda     _temp2
	cmp     #$0F
	bne     L09DB
;
; grid_start--; 
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; grid_end--;
;
	lda     _temp3
	pha
	sec
	sbc     #$01
L10CD:	sta     _temp3
	pla
;
; for(i=grid_start; i<=grid_end; i++){
;
L09DB:	lda     _temp2
L10CE:	sta     _i
	sec
	sbc     _temp3
	bcc     L09E2
	bne     L09E0
;
; next_line[i] = selected_grid;
;
L09E2:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L10CE
;
; for(i=2; i<16; i++){
;
L09E0:	lda     #$02
L10D2:	sta     _i
	cmp     #$10
	jcs     L09ED
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L09EE
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L09F8
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else if(current_line[i] != BUILDING){
;
	jmp     L09EE
L09F8:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	jeq     L09EE
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A0A
	inx
L0A0A:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L106D
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L106D:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A0F
	dex
L0A0F:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L10E8
	inx
	clc
L10E8:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L109D
	inx
	clc
L109D:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A18
	dex
L0A18:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L10DF
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L10DF:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A1D
	inx
L0A1D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0A22
	beq     L0A22
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L108F
;
; chance_to_grow = 0;
;
L0A22:	lda     #$00
L108F:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L1105
	lda     _temp3
	cmp     #$02
	bcc     L0A33
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0A33
;
; next_line[i] = WALL;
;
L1105:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0A33:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A3F
	inx
L0A3F:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1070
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L1070:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A43
	dex
L0A43:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1071
	inx
L1071:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1072
	inx
L1072:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A4B
	dex
L0A4B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A4F
	inx
L0A4F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0A50
	beq     L0A50
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1091
;
; chance_to_grow = 0;
;
L0A50:	lda     #$00
L1091:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L1106
	lda     _temp3
	cmp     #$03
	bcc     L0A61
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0A61
;
; next_line[i] = WATER;
;
L1106:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0A61:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A6D
	inx
L0A6D:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1073
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L1073:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A71
	dex
L0A71:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1074
	inx
L1074:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1075
	inx
L1075:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A79
	dex
L0A79:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A7D
	inx
L0A7D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0A7E
	beq     L0A7E
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1093
;
; chance_to_grow = 0;
;
L0A7E:	lda     #$00
L1093:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L1107
	lda     _temp3
	cmp     #$03
	bcc     L09EE
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L09EE
;
; next_line[i] = FOREST;
;
L1107:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L09EE:	lda     _i
	clc
	adc     #$01
	jmp     L10D2
;
; for(i=2; i<16; i++){
;
L09ED:	lda     #$02
L10D3:	sta     _i
	cmp     #$10
	jcs     L0A97
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0A9E
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0AA5
	dex
L0AA5:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0A9F
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0AA7
	inx
L0AA7:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0A9E
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L0A9F:	lda     _i
	cmp     #$02
	beq     L0AAB
	lda     _i
	cmp     #$0F
	bne     L0AAA
L0AAB:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L1095
L0AAA:	ldy     _i
	lda     #$05
L1095:	sta     _next_line,y
;
; if(current_line[i] == BUILDING && dont_change_bg_pallette == 15){
;
L0A9E:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	bne     L0AB6
	lda     _dont_change_bg_pallette
	cmp     #$0F
	bne     L0AB6
;
; next_line[i] = BUILDING_PASSABLE;
;
	ldy     _i
	lda     #$18
	sta     _next_line,y
;
; if(current_line[i]  == BUILDING_PASSABLE){
;
L0AB6:	ldy     _i
	lda     _current_line,y
	cmp     #$18
	bne     L0A98
;
; sprite_to_bg_y = 24;
;
	sta     _sprite_to_bg_y
;
; for(i=2; i<16; i++){
;
L0A98:	lda     _i
	clc
	adc     #$01
	jmp     L10D3
;
; for(i=2; i<16; i++){
;
L0A97:	lda     #$02
L10D4:	sta     _i
	cmp     #$10
	jcs     L0AC7
;
; if(current_line[i] == GRASS && (
;
	ldy     _i
	lda     _current_line,y
	jne     L0ACE
;
; (current_line[i+1]&BUILDING_PASSABLE) || 
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0AD6
	inx
L0AD6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	jne     L0ACF
;
; (current_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0AD9
	dex
L0AD9:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	bne     L0ACF
;
; (prev_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _prev_line,y
	and     #$18
	bne     L0ACF
;
; (prev_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0ADF
	dex
L0ADF:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0ACF
;
; (prev_line[i+1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0AE2
	inx
L0AE2:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0ACF
;
; (next_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _next_line,y
	and     #$18
	bne     L0ACF
;
; (next_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0AE8
	dex
L0AE8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
	bne     L0ACF
;
; (next_line[i+1]&BUILDING_PASSABLE)
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0AEB
	inx
L0AEB:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
;
; ))
;
	beq     L0ACE
;
; current_line[i] = GRASS_EMPTY;
;
L0ACF:	ldy     _i
	lda     #$20
	sta     _current_line,y
;
; if(current_line[i] == WALL && 
;
L0ACE:	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L0AC8
;
; ((current_line[i-1]==WALL) && (current_line[i+1]==WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0AFA
	dex
L0AFA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0AC8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0AFE
	inx
L0AFE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0AC8
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L0AC8
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]==WALL) && (next_line[i+1]==WALL) 
;
	beq     L0AC8
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B07
	dex
L0B07:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
	bne     L0AC8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B0A
	inx
L0B0A:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	bne     L0AC8
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B0D
	dex
L0B0D:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0AC8
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B10
	inx
L0B10:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0AC8
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L0AC8:	lda     _i
	clc
	adc     #$01
	jmp     L10D4
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L0AC7:	lda     _current_line+2
	and     #$01
	beq     L0B17
	lda     _prev_line+2
	and     #$01
	beq     L0B17
	lda     _next_line+2
	and     #$01
	beq     L0B17
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0B17:	lda     _current_line+15
	and     #$01
	beq     L0B24
	lda     _prev_line+15
	and     #$01
	beq     L0B24
	lda     _next_line+15
	and     #$01
	beq     L0B24
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0B24:	lda     #$0E
L10D5:	sta     _i
	lda     _i
	jeq     L0B32
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L109E
	inx
	clc
L109E:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B3D
	dex
L0B3D:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; enemy_blocked[i] = enemy_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L109F
	inx
	clc
L109F:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B42
	dex
L0B42:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10A0
	inx
	clc
L10A0:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B47
	dex
L0B47:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L10D5
;
; blocked[0] = 0;
;
L0B32:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; enemy_blocked[0] = 0;
;
	sta     _enemy_blocked
	sta     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L10D6:	sta     _i
	cmp     #$10
	jcs     L0B52
;
; if(current_line[i+1] != GRASS && current_line[i+1] != GRASS_EMPTY /*&& current_line[i+1] != BUILDING_PASSABLE*/){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B5C
	inx
L0B5C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	jeq     L0B53
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B5F
	inx
L0B5F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$20
	jeq     L0B53
;
; if(current_line[i+1] != BUILDING_PASSABLE){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B64
	inx
L0B64:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$18
	beq     L0B61
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B6C
	inx
L0B6C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0B61
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; enemy_blocked[0] |= (1<<i);
;
L0B61:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _enemy_blocked
	stx     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L0B53:	lda     _i
	clc
	adc     #$01
	jmp     L10D6
;
; for(i=0; i<32; i++){
;
L0B52:	lda     #$00
L10DE:	sta     _i
	cmp     #$20
	jcs     L0B76
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0C1D
	cmp     #$01
	beq     L0B97
	cmp     #$02
	beq     L0B97
	cmp     #$03
	jeq     L0C1D
	cmp     #$04
	jeq     L0C80
	cmp     #$05
	jeq     L0C2F
	cmp     #$08
	jeq     L0CFA
	cmp     #$18
	jeq     L0CFA
	cmp     #$20
	jne     L0B77
;
; update_list[3+i] = 0;
;
	lda     _i
	clc
	adc     #$03
	bcc     L10A1
	inx
	clc
L10A1:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; break;
;
	jmp     L10D7
;
; cell_type = current_line[column_index];
;
L0B97:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0B9C
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0BA2
	inx
L0BA2:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0BA4
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0BAC
	inx
L0BAC:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L10F4
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0BA4:	lda     _temp3
	clc
	adc     #$01
	bcc     L0BCC
	inx
;
; }else{
;
	jmp     L0BCC
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0B9C:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BBA
	dex
L0BBA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0BBC
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BC4
	dex
L0BC4:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L10F4
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0BBC:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BCC
	dex
L0BCC:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L10F4:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0BCD
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L10EE
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0BCD:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L10EE:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0BDE
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0BE0
;
; update_list[3+i] = (cell_type == WALL?0:0xF0);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10A2
	inx
	clc
L10A2:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0BE7
	lda     #$00
	jmp     L10DA
L0BE7:	lda     #$F0
;
; }else{
;
	jmp     L10DA
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xD0) + (rand8()&3);
;
L0BE0:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L10A3
	inx
	clc
L10A3:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0BF1
	lda     #$66
	jmp     L0BF3
L0BF1:	lda     #$D0
L0BF3:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0B77
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0BDE:	lda     _temp2
	cmp     #$04
	bcc     L0BF7
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0BF7:	lda     _temp4
	cmp     #$01
	bne     L0BFB
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L10A4
	inx
	clc
L10A4:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L106A
	inx
L106A:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L10E6
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0BFB:	lda     _i
	clc
	adc     #$03
	bcc     L10A5
	inx
	clc
L10A5:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L106B
	inx
L106B:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L10E6:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0C0B
	lda     _temp2
	cmp     #$02
	bne     L0C0A
L0C0B:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10A6
	inx
	clc
L10A6:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0B77
L0C0A:	lda     _temp2
	jne     L0B77
	lda     _temp4
	cmp     #$01
	jne     L0B77
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10A7
	inx
	clc
L10A7:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
L10DA:	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; random = rand8()&0x3F;
;
L0C1D:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0C22
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10A8
	inx
	clc
L10A8:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L10D7
;
; update_list[3+i] = 0x60 + random;
;
L0C22:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10A9
	inx
	clc
L10A9:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
;
; break;
;
	jmp     L10D7
;
; switch(cell_index){
;
L0C2F:	lda     _temp1
;
; }
;
	beq     L0C34
	cmp     #$01
	beq     L0C47
	cmp     #$02
	jeq     L0C5A
	cmp     #$03
	jeq     L0C6D
	jmp     L0B77
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0C34:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C38
	dex
L0C38:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C35
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AA
	inx
	clc
L10AA:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0B77
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0C35:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AB
	inx
	clc
L10AB:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0C47:	lda     _temp3
	clc
	adc     #$01
	bcc     L0C4B
	inx
L0C4B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C48
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AC
	inx
	clc
L10AC:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0B77
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0C48:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AD
	inx
	clc
L10AD:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0C5A:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C5E
	dex
L0C5E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C5B
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AE
	inx
	clc
L10AE:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0B77
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0C5B:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10AF
	inx
	clc
L10AF:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0C6D:	lda     _temp3
	clc
	adc     #$01
	bcc     L0C71
	inx
L0C71:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C6E
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B0
	inx
	clc
L10B0:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0B77
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0C6E:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B1
	inx
	clc
L10B1:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; neighbour_forest_count = 0;
;
L0C80:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0C87
	cmp     #$01
	beq     L0C95
	cmp     #$02
	jeq     L0CA3
	cmp     #$03
	jeq     L0CB1
	jmp     L0C85
;
; update_list[3+i] = 0x4;
;
L0C87:	lda     _i
	clc
	adc     #$03
	bcc     L10B2
	inx
	clc
L10B2:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C8F
	dex
L0C8F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L10F5
;
; update_list[3+i] = 0x5;
;
L0C95:	lda     _i
	clc
	adc     #$03
	bcc     L10B3
	inx
	clc
L10B3:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0C9D
	inx
L0C9D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L10F5
;
; update_list[3+i] = 0x6;
;
L0CA3:	lda     _i
	clc
	adc     #$03
	bcc     L10B4
	inx
	clc
L10B4:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0CB9
	dex
;
; break;
;
	jmp     L0CB9
;
; update_list[3+i] = 0x7;
;
L0CB1:	lda     _i
	clc
	adc     #$03
	bcc     L10B5
	inx
	clc
L10B5:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0CB9
	inx
L0CB9:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L10F5:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0C85:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0CCD
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0CC4
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L109C
L0CC4:	lda     _temp2
	cmp     #$01
	bne     L0CC9
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L10DD
;
; cell_can_be_cleared = rand8() < 60;
;
L0CC9:	jsr     _rand8
	cmp     #$3C
L10DD:	jsr     boolult
L109C:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0CCD:	lda     _temp4
	beq     L0CD0
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0CD4
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B6
	inx
	clc
L10B6:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L10D7
;
; update_list[3+i] = 0x60 + random;
;
L0CD4:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B7
	inx
	clc
L10B7:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
;
; }else{
;
	jmp     L10D7
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0CD0:	lda     _temp1
	cmp     #$02
	bcs     L1086
	lda     _temp2
	cmp     #$02
	bcs     L1086
	jsr     _rand8
	and     #$03
	bne     L0CE2
L1086:	jsr     _rand8
	and     #$03
	bne     L0CE1
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0CE2:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B8
	inx
	clc
L10B8:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L0B77
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0CE1:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10B9
	inx
	clc
L10B9:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0B77
;
; if(prev_line[column_index] != BUILDING){
;
L0CFA:	ldy     _temp3
	lda     _prev_line,y
	cmp     #$08
	beq     L0CFB
;
; sprite_id = 0xF4+building_shift;
;
	lda     _building_shift
	clc
	adc     #$F4
	bcc     L0D05
;
; }else{
;
	jmp     L0D05
;
; sprite_id = 0xD4+building_shift;
;
L0CFB:	lda     _building_shift
	clc
	adc     #$D4
L0D05:	sta     _temp2
;
; if(current_line[column_index-1] == current_line[column_index]){
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D09
	dex
L0D09:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	ldx     #$00
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     _temp3
	lda     _current_line,y
	cpx     ptr1+1
	bne     L0D06
	cmp     ptr1
	bne     L0D06
;
; sprite_id += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; sprite_id += (cell_index&1);
;
L0D06:	lda     _temp1
	and     #$01
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index&2) sprite_id -= 0x10;
;
	lda     _temp1
	and     #$02
	beq     L0D11
	lda     _temp2
	sec
	sbc     #$10
	sta     _temp2
;
; update_list[3+i] = sprite_id;
;
L0D11:	lda     _i
	clc
	adc     #$03
	bcc     L10BA
	inx
	clc
L10BA:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
L10D7:	ldy     #$00
	sta     (ptr1),y
;
; for(i=0; i<32; i++){
;
L0B77:	lda     _i
	clc
	adc     #$01
	jmp     L10DE
;
; if( (row_index&1) != 0){
;
L0B76:	lda     _temp0
	and     #$01
	jeq     L0D19
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0D1D
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0D1F:	lda     _i
	cmp     #$08
	jcs     L0D6D
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10BB
	inx
	clc
L10BB:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10BC
	inx
	clc
L10BC:	adc     #$01
	bcc     L0D2F
	inx
L0D2F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10BD
	inx
	clc
L10BD:	adc     #$01
	bcc     L10BE
	inx
	clc
L10BE:	adc     #$01
	bcc     L0D36
	inx
L0D36:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0D1F
;
; }else if( (row_index&3) == 3 ){
;
L0D1D:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0D38
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0D3C:	lda     _i
	cmp     #$08
	jcs     L0D6D
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10BF
	inx
	clc
L10BF:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10C0
	inx
	clc
L10C0:	adc     #$01
	bcc     L0D4C
	inx
L0D4C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10C1
	inx
	clc
L10C1:	adc     #$01
	bcc     L10C2
	inx
	clc
L10C2:	adc     #$01
	bcc     L0D53
	inx
L0D53:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0D3C
;
; for(i=0;i<8;++i){
;
L0D38:	lda     #$00
	sta     _i
L0D55:	lda     _i
	cmp     #$08
	jcs     L0D6D
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10C3
	inx
	clc
L10C3:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L10C4
	inx
	clc
L10C4:	adc     #$01
	bcc     L0D65
	inx
L0D65:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10C5
	inx
	clc
L10C5:	adc     #$01
	bcc     L10C6
	inx
	clc
L10C6:	adc     #$01
	bcc     L0D6C
	inx
L0D6C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0D55
;
; current_line[1] = WALL;
;
L0D19:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0D6D:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=180;
;
	lda     #$B4
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=180;
;
	lda     #$B4
	sta     _craft_y+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; craft_types[0] = 0;
;
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_bullet_timers[0] = 0;
;
	lda     #$00
	sta     _craft_bullet_timers
;
; craft_bullet_timers[1] = 0;
;
	sta     _craft_bullet_timers+1
;
; for(i=0; i<18; i++){
;
L111C:	sta     _i
	cmp     #$12
	bcs     L0DA9
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0DB2
	inx
L0DB2:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0DB5
	inx
L0DB5:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L111C
;
; next_line[0] = next_line[1] = WALL;
;
L0DA9:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; dont_change_bg_pallette = 14;
;
	lda     #$0E
	sta     _dont_change_bg_pallette
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; for(i=0; i<6; i++){
;
L111D:	sta     _i
	cmp     #$06
	bcs     L0DE5
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L111D
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0DE5:	lda     #$00
L111E:	sta     _i
	cmp     #$0C
	bcs     L0DF1
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L111E
;
; for(i=0; i<15; i++){
;
L0DF1:	lda     #$00
L111F:	sta     _i
	cmp     #$0F
	bcs     L0DFD
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L111A
	inx
	clc
L111A:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L111B
	inx
	clc
L111B:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L111F
;
; }
;
L0DFD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L112D:	sta     _i
	cmp     #$06
	bcc     L112E
;
; }
;
	rts
;
; if(craft_types[i] == 255){
;
L112E:	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	jne     L0E13
;
; if(enemy_spawn_scr == 0){
;
	lda     _enemy_spawn_scr
	jne     L0E45
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L1123:	sta     _temp5
;
; while((enemy_blocked[0] & (1<<spawn_x))){
;
L0E1F:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0E20
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0E1F
	lda     #$00
;
; }                    
;
	jmp     L1123
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0E20:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0E43
	inx
L0E43:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; else
;
	jmp     L0E45
;
; move_dir = sprite_dirs[i];
;
L0E13:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0E52
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0E5A
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0E57
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0E57:	lda     _temp1
	and     #$08
	beq     L0E5A
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0E5A:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0E5D
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0E61
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0E61:	lda     _temp1
	and     #$02
	beq     L0E5D
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0E5D:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0E6B
	lda     _frame
	and     #$07
	bne     L0E6B
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0E73
	inx
L0E73:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeEnemy(new_x, new_y) == FALSE){
;
L0E6B:	lda     _temp4
	beq     L0E75
	lda     _temp3
	cmp     #$14
	bcs     L1121
	lda     _temp1
	cmp     #$01
	beq     L0E75
L1121:	lda     _temp3
	cmp     #$DD
	bcc     L1122
	lda     _temp1
	cmp     #$02
	beq     L0E75
L1122:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1125
	inx
L1125:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0E52
	cmp     #$00
	jne     L0E52
;
; new_x = craft_x[i];
;
L0E75:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeEnemy(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E91
	dex
L0E91:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1126
	inx
L1126:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0E8C
	cmp     #$00
	bne     L0E8C
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeEnemy(new_x, new_y+1) == FALSE){
;
L0E8C:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0E9D
	inx
L0E9D:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1127
	inx
L1127:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0E98
	cmp     #$00
	bne     L0E98
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeEnemy(new_x-1, new_y) == FALSE){
;
L0E98:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1128
	inx
L1128:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0EAC
	ldx     #$FF
L0EAC:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EA4
	cmp     #$00
	bne     L0EA4
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeEnemy(new_x+1, new_y) == FALSE){
;
L0EA4:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1129
	inx
L1129:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L0EB8
	ldx     #$01
L0EB8:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EB0
	cmp     #$00
	bne     L0EB0
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L0EB0:	lda     _temp3
	cmp     #$14
	bcs     L0EBC
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L0EBC:	lda     _temp3
	cmp     #$DD
	bcc     L0EC0
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L0EC0:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0EC6
	inx
L0EC6:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L0ECB
	inx
L0ECB:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L0ECD
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0E0D
;
; }else if(move_dir == 0){
;
L0ECD:	lda     _temp1
	bne     L0ED4
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L1124
;
; move_dir = rand8()&3;
;
L0ED4:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L0EDD:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0EE2
	inx
L0EE2:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L0EDD
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L1124:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0)
;
L0E52:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L0EED
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L112B:	sta     _j
	cmp     #$0C
	bcs     L0F0F
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0EF3
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F0B
	inx
L0F0B:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0F0F
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L0EF3:	lda     _j
	clc
	adc     #$01
	jmp     L112B
;
; craft_bullet_timers[i]--;
;
L0EED:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F12
	inx
L0F12:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y+8 || craft_hps[i] == 0){
;
L0F0F:	lda     _temp3
	cmp     #$E5
	bcs     L0F14
	ldy     _i
	lda     _craft_hps,y
	bne     L0F13
;
; craft_types[i] = 255;
;
L0F14:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0E0D
;
; for(j=0; j<2; j++){
;
L0F13:	lda     #$00
L112C:	sta     _j
	cmp     #$02
	jcs     L0E45
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0F1F
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L0F2D
	ldx     #$FF
L0F2D:	jsr     tosicmp
	jcc     L0F1F
	jeq     L0F1F
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L0F31
	ldx     #$01
L0F31:	jsr     tosicmp
	bcs     L0F1F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L0F34
	ldx     #$FF
L0F34:	jsr     tosicmp
	bcc     L0F1F
	beq     L0F1F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L0F37
	ldx     #$01
L0F37:	jsr     tosicmp
	bcs     L0F1F
;
; if(craft_hps[j]>2)craft_hps[j]-=2;
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L0F39
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0F3F
	inx
L0F3F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; else craft_hps[j] = 0;
;
	jmp     L0F41
L0F39:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_types[i] = 255;
;
L0F41:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; break;
;
	jmp     L0E45
;
; for(j=0; j<2; j++){
;
L0F1F:	lda     _j
	clc
	adc     #$01
	jmp     L112C
;
; craft_x[i] = new_x;
;
L0E45:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0E0D:	lda     _i
	clc
	adc     #$01
	jmp     L112D

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L1132
;
; }
;
	rts
;
; alpha = 4;
;
L1132:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0F5E:	lda     _temp0
	beq     L0F5F
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0F66:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0F5E
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0F66
;
; oam_clear();
;
L0F5F:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L1131:	sta     _i
	cmp     #$07
	bcs     L0F6E
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L1130
	clc
L1130:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1131
;
; alpha = 0;
;
L0F6E:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0F82:	lda     _temp0
	cmp     #$04
	bcs     L0F83
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0F8A:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0F82
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0F8A
;
; ppu_wait_frame();
;
L0F83:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L0F83
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0F99:	lda     _temp0
	beq     L0F9A
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FA1:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0F99
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FA1
;
; oam_clear();
;
L0F9A:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0FAB:	lda     _temp0
	cmp     #$04
	bcs     L0FAC
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FB3:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0FAB
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FB3
;
; }
;
L0FAC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L0FBC:	lda     _scr+1
	bne     L1133
	lda     _scr
	cmp     #$F0
	beq     L0FBD
;
; ppu_wait_frame();
;
L1133:	jsr     _ppu_wait_frame
;
; scroll_amount = 4;
;
	lda     #$04
	sta     _scroll_amount
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0FBC
;
; pal_col(9, 0x3d);
;
L0FBD:	lda     #$09
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(10, 0x2d);
;
	lda     #$0A
	jsr     pusha
	lda     #$2D
	jsr     _pal_col
;
; pal_col(11, 0x1d);
;
	lda     #$0B
	jsr     pusha
	lda     #$1D
	jsr     _pal_col
;
; temp5 = 0;
;
	lda     #$00
	sta     _temp5
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=200;
;
	lda     #$C8
	sta     _craft_y+1
;
; craft_types[2] = 255;
;
	lda     #$FF
	sta     _craft_types+2
;
; craft_types[3] = 255;
;
	sta     _craft_types+3
;
; craft_types[4] = 255;
;
	sta     _craft_types+4
;
; craft_types[5] = 255;
;
	sta     _craft_types+5
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; ppu_wait_frame();
;
L0FF0:	jsr     _ppu_wait_frame
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; is_update_dirty = 0;
;
	sta     _is_update_dirty
;
; scroll_amount = 0;
;
	sta     _scroll_amount
;
; if(craft_lives[0] && craft_y[0] < 150) scroll_amount = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L0FFA
	lda     _craft_y
	cmp     #$96
	bcs     L0FFA
	lda     #$96
	sec
	sbc     _craft_y
	sta     _scroll_amount
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L0FFA:	lda     _craft_lives+1
	beq     L100C
	lda     _craft_y+1
	cmp     #$96
	bcs     L100C
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > scroll_amount){
;
	sec
	sbc     _scroll_amount
	bcc     L100C
	beq     L100C
;
; scroll_amount = temp2;
;
	lda     _temp2
	sta     _scroll_amount
;
; scroll_screen();
;
L100C:	jsr     _scroll_screen
;
; tick_crafts();
;
	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_all();
;
	jsr     _draw_all
;
; check_pause();
;
	jsr     _check_pause
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0FF0

.endproc

