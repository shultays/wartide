;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_col
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_test
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
_enemy_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$36
	.byte	$26
	.byte	$16
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$E0
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$E3
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$E1
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$E2
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_small_exp_0:
	.byte	$F8
	.byte	$F8
	.byte	$8C
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8E
	.byte	$03
	.byte	$80
_small_exp_1:
	.byte	$F8
	.byte	$F8
	.byte	$88
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8A
	.byte	$03
	.byte	$80
_small_exp_2:
	.byte	$F8
	.byte	$F8
	.byte	$84
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$86
	.byte	$03
	.byte	$80
_big_exp_0:
	.byte	$EF
	.byte	$F1
	.byte	$90
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$92
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$94
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$96
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B0
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$B2
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$B4
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$B6
	.byte	$03
	.byte	$80
_big_exp_1:
	.byte	$EF
	.byte	$F1
	.byte	$98
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$9A
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$9C
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$9E
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B8
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$BA
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$BC
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$BE
	.byte	$03
	.byte	$80
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_y:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_dont_change_bg_pallette:
	.res	1,$00
_building_shift:
	.res	1,$00
_sprite_to_bg_x:
	.res	1,$00
_sprite_to_bg_y:
	.res	1,$00
_building_index_x:
	.res	1,$00
_building_index_y:
	.res	1,$00
_scroll_amount:
	.res	1,$00
_is_update_dirty:
	.res	1,$00
_explosion_x:
	.res	1,$00
_explosion_y:
	.res	1,$00
_explosion_state:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L11A3
	inx
	clc
L11A3:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ test (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_test: near

.segment	"CODE"

;
; i++;
;
	lda     _i
	clc
	adc     #$01
	sta     _i
;
; ++i;
;
	inc     _i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L03C5:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L03F6
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L03D4
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L03F6
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L03F6
L03D4:	lda     _temp2
	and     #$20
	beq     L03DC
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L03F6
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L03F6
L03DC:	lda     _temp2
	and     #$0F
	beq     L03F6
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L03E7
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_hps[1] = 0;
;
	sta     _craft_hps+1
;
; craft_types[1] = 0;
;
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L03E7:	lda     _temp0
	cmp     #$01
	bne     L03F6
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L03F6:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L03C5

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = (craft_types[i]&0xF)?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	and     #$0F
	beq     L0414
	lda     #$00
	jmp     L0416
L0414:	lda     #$40
L0416:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L041E
	cmp     #$02
	beq     L042A
	cmp     #$04
	beq     L0430
	cmp     #$08
	beq     L0424
	jmp     L041C
;
; craft_sprite += 0x04;
;
L041E:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L11A6
;
; craft_sprite += 0x24;
;
L0424:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L11A6
;
; craft_sprite += 0x04;
;
L042A:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L11A6
;
; craft_sprite += 0x34;
;
L0430:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L11A6:	sta     _temp3
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L041C:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L0435
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L11A9
L0435:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L043C
;
; craft_sprite += 0x04;
;
	lda     #$04
L11A9:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L043C:	lda     _i
	cmp     #$02
	bcs     L0442
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L044A
	lda     #$08
L044A:	cpx     ptr1+1
	bne     L0444
	cmp     ptr1
	bne     L0444
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L0444
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L0444:	lda     _temp3
	ora     _i
	sta     _temp3
;
; }else{
;
	jmp     L0458
;
; craft_sprite_prop |= 2;
;
L0442:	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L0458
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; if(sprite_to_bg_y != 255){
;
L0458:	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L045E
;
; if(craft_x[i] > sprite_to_bg_x && craft_x[i] < sprite_to_bg_x + 48 &&
;
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     _sprite_to_bg_x
	bcc     L045E
	beq     L045E
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$30
	bcc     L0465
	ldx     #$01
L0465:	jsr     tosicmp
	bcs     L045E
;
; craft_y[i] < sprite_to_bg_y && craft_y[i] > sprite_to_bg_y - 48){
;
	ldy     _i
	lda     _craft_y,y
	cmp     _sprite_to_bg_y
	bcs     L045E
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$30
	bcs     L046A
	ldx     #$FF
L046A:	jsr     tosicmp
	beq     L045E
	bcc     L045E
;
; craft_sprite_prop |= (1<<5);
;
	lda     _temp3
	ora     #$20
	sta     _temp3
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L045E:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; if(explosion_state){
;
	lda     _explosion_state
	jeq     L04B0
;
; if(explosion_state >= 14){
;
	lda     _explosion_state
	cmp     #$0E
	bcc     L048B
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_0);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_0)
	ldx     #>(_small_exp_0)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(explosion_state >= 12){
;
	jmp     L04B0
L048B:	lda     _explosion_state
	cmp     #$0C
	bcc     L0495
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_1);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_1)
	ldx     #>(_small_exp_1)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(explosion_state >= 9){
;
	jmp     L04B0
L0495:	lda     _explosion_state
	cmp     #$09
	bcc     L049F
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_2);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_2)
	ldx     #>(_small_exp_2)
;
; }else if(explosion_state >= 5){
;
	jmp     L11AF
L049F:	lda     _explosion_state
	cmp     #$05
	bcc     L04A8
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, big_exp_0);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_0)
	ldx     #>(_big_exp_0)
;
; }else{
;
	jmp     L11AF
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, big_exp_1);
;
L04A8:	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_1)
	ldx     #>(_big_exp_1)
L11AF:	jsr     _oam_meta_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04B0:	lda     #$00
	sta     _i
L04B7:	lda     _i
	cmp     #$0C
	jcs     L04B8
;
; bullet_flag = craft_bullet_flag[i];
;
	ldy     _i
	lda     _craft_bullet_flag,y
	sta     _temp5
;
; if(bullet_flag){
;
	lda     _temp5
	jeq     L04B9
;
; bullet_y = craft_bullet_y[i]-2;
;
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	sta     _temp4
;
; bullet_x = craft_bullet_x[i]-2;
;
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	sta     _temp3
;
; if(bullet_flag&0xF){
;
	lda     _temp5
	and     #$0F
	jeq     L04CF
;
; props = i<CRAFT_BULLET_COUNT?i&1:2;
;
	lda     _i
	cmp     #$08
	bcs     L04D3
	lda     _i
	and     #$01
	jmp     L04D5
L04D3:	lda     #$02
L04D5:	sta     _temp2
;
; if(sprite_to_bg_y != 255){
;
	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L04D9
;
; if(bullet_x >= sprite_to_bg_x+8 && bullet_x < sprite_to_bg_x + 32 &&
;
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$08
	bcc     L04DB
	ldx     #$01
L04DB:	jsr     tosicmp
	bcc     L04D9
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$20
	bcc     L04DD
	ldx     #$01
L04DD:	jsr     tosicmp
	bcs     L04D9
;
; bullet_y <= sprite_to_bg_y-8 && bullet_y > sprite_to_bg_y - 32){
;
	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$08
	bcs     L04DE
	ldx     #$FF
L04DE:	jsr     tosicmp
	beq     L11AE
	bcs     L04D9
L11AE:	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$20
	bcs     L04DF
	ldx     #$FF
L04DF:	jsr     tosicmp
	beq     L04D9
	bcc     L04D9
;
; props |= (1<<5);
;
	lda     _temp2
	ora     #$20
	sta     _temp2
;
; spr=oam_spr(bullet_x, bullet_y, 0x80, props, spr);
;
L04D9:	jsr     decsp4
	lda     _temp3
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _temp2
;
; }else{
;
	jmp     L11B5
;
; if(bullet_flag>0x70) bullet_flag = 8;
;
L04CF:	lda     _temp5
	cmp     #$71
	bcc     L04EC
	lda     #$08
;
; else if(bullet_flag>0x30) bullet_flag = 4;
;
	jmp     L11AC
L04EC:	lda     _temp5
	cmp     #$31
	bcc     L04F1
	lda     #$04
;
; else bullet_flag = 0;
;
	jmp     L11AC
L04F1:	lda     #$00
L11AC:	sta     _temp5
;
; spr=oam_spr(bullet_x-6, bullet_y-6, 0x84+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	sec
	sbc     #$06
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$84
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(bullet_x+2, bullet_y-6, 0x86+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	clc
	adc     #$02
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$86
	dey
	sta     (sp),y
	lda     #$03
L11B5:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04B9:	inc     _i
	jmp     L04B7
;
; for(i=5;i!=255;i--){
;
L04B8:	lda     #$05
L11B2:	sta     _i
	cmp     #$FF
	bne     L11B6
;
; }
;
	rts
;
; if(i<2 && craft_lives[i] == 0) continue;
;
L11B6:	lda     _i
	cmp     #$02
	bcs     L0514
	ldy     _i
	lda     _craft_lives,y
	jeq     L050E
;
; if(craft_hps[i]){
;
L0514:	ldy     _i
	lda     _craft_hps,y
	beq     L051A
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_bullet_timers[i]){
;
	jmp     L055D
L051A:	ldy     _i
	lda     _craft_bullet_timers,y
	jeq     L055D
;
; craft_hp_sprite = craft_bullet_timers[i];
;
	ldy     _i
	lda     _craft_bullet_timers,y
	sta     _temp1
;
; if(craft_hp_sprite >= 14){
;
	cmp     #$0E
	bcc     L0528
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_0)
	ldx     #>(_small_exp_0)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 12){
;
	jmp     L055D
L0528:	lda     _temp1
	cmp     #$0C
	bcc     L0536
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_1);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_1)
	ldx     #>(_small_exp_1)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 9){
;
	jmp     L055D
L0536:	lda     _temp1
	cmp     #$09
	bcc     L0544
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_2);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_2)
	ldx     #>(_small_exp_2)
;
; }else if(craft_hp_sprite >= 5){
;
	jmp     L11B1
L0544:	lda     _temp1
	cmp     #$05
	bcc     L0551
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_0)
	ldx     #>(_big_exp_0)
;
; }else{
;
	jmp     L11B1
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_1);
;
L0551:	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_1)
	ldx     #>(_big_exp_1)
L11B1:	jsr     _oam_meta_spr
	sta     _spr
;
; if(i<2){
;
L055D:	lda     _i
	cmp     #$02
	bcs     L050E
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L056F
	lda     _frame
	and     #$10
	bne     L056F
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-16-8:16, 210, 0xA0+craft_hp_sprite, i, spr);
;
L056F:	jsr     decsp4
	lda     _i
	beq     L057C
	lda     #$E8
	jmp     L057E
L057C:	lda     #$10
L057E:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=5;i!=255;i--){
;
L050E:	lda     _i
	sec
	sbc     #$01
	jmp     L11B2

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L05AD
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L05AD:	lda     $00FB
	and     #$01
	beq     L05B4
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L05B4:	sta     _i
L05BF:	lda     _i
	cmp     #$0C
	jcs     L05C0
;
; if(craft_bullet_flag[i]&0xF0){
;
	ldy     _i
	lda     _craft_bullet_flag,y
	and     #$F0
	beq     L05C7
;
; craft_bullet_flag[i]-=0x10;
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _i
	bcc     L05CD
	inx
L05CD:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$10
	sta     (ptr1),y
;
; continue;
;
	jmp     L05C1
;
; if(!craft_bullet_flag[i]) continue;
;
L05C7:	ldy     _i
	lda     _craft_bullet_flag,y
	jeq     L05C1
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L05E1
	cmp     #$02
	beq     L05F7
	cmp     #$04
	beq     L0602
	cmp     #$05
	beq     L0607
	cmp     #$06
	beq     L05FC
	cmp     #$08
	beq     L05EC
	cmp     #$09
	beq     L05E6
	cmp     #$0A
	beq     L05F1
	jmp     L05DF
;
; bullet_y -= 3;
;
L05E1:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L05DF
;
; bullet_y -= 2;
;
L05E6:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11D5
;
; bullet_x += 3;
;
L05EC:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L11D5
;
; bullet_y += 2;
;
L05F1:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11D5
;
; bullet_y += 3;
;
L05F7:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L05DF
;
; bullet_y += 2;
;
L05FC:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L11EF
;
; bullet_x -= 3;
;
L0602:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L11D5
;
; bullet_y -= 2;
;
L0607:	lda     _temp3
	sec
	sbc     #$02
L11EF:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L11D5:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L05DF:	lda     _temp0
	cmp     #$0A
	bcc     L060D
	lda     _temp0
	cmp     #$F5
	bcs     L060D
	lda     _temp3
	cmp     #$F5
	bcs     L060D
	lda     _temp3
	cmp     #$0A
	bcs     L060C
;
; craft_bullet_flag[i] = 0;
;
L060D:	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05C1
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L060C:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L11E7
	inx
L11E7:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11DC
	inx
	clc
L11DC:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L061F
	cmp     #$00
L061F:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L0620
;
; if(has_collision){
;
	lda     _temp4
	jeq     L0622
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L0625
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L0625
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L0624
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L0625:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; if(is_update_dirty == 0){
;
L0624:	lda     _is_update_dirty
	bne     L0639
;
; wall_hit_hp[i&1]--;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
L0639:	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L063D
	lda     _temp2
	jeq     L063D
	lda     _temp2
	cmp     #$0F
	jeq     L063D
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11DD
	inx
	clc
L11DD:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11DE
	inx
	clc
L11DE:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11DF
	inx
	clc
L11DF:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; explosion_state = 15;
;
	lda     #$0F
	sta     _explosion_state
;
; explosion_x = (bullet_grid_pos_x<<4)+7;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	clc
	adc     #$07
	sta     _explosion_x
;
; explosion_y = (bullet_grid_pos_y<<4)+4-(scr&15);
;
	ldx     #$00
	lda     _temp1
	jsr     aslax4
	clc
	adc     #$04
	bcc     L0657
	inx
L0657:	jsr     pushax
	lda     _scr
	and     #$0F
	jsr     tossuba0
	sta     _explosion_y
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L065B
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L065B:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L0661
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L0661:	lda     _temp0
	cmp     #$1E
	bcs     L0665
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L11EB
;
; row_index_on_ns-=30;
;
L0665:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L11EB:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L11E0
	inx
	clc
L11E0:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; if(building_index_y < 17 && (bullet_grid_pos_x == building_index_x || bullet_grid_pos_x == building_index_x+1) && bullet_grid_pos_y+1 == building_index_y){
;
	lda     _building_index_y
	cmp     #$11
	jcs     L0672
	lda     _building_index_x
	cmp     _temp2
	beq     L0675
	ldx     #$00
	lda     _building_index_x
	clc
	adc     #$01
	bcc     L0676
	inx
L0676:	cpx     #$00
	jne     L0672
	cmp     _temp2
	jne     L0672
L0675:	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0678
	inx
L0678:	cpx     #$00
	jne     L0672
	cmp     _building_index_y
	jne     L0672
;
; if(bullet_grid_pos_x == building_index_x){
;
	lda     _building_index_x
	cmp     _temp2
	jne     L067A
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	lda     _temp1
	asl     a
	bcc     L11E1
	inx
	clc
L11E1:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11E2
	inx
	clc
L11E2:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11E3
	inx
	clc
L11E3:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0690
	dex
L0690:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; explosion_x += 8;
;
	lda     #$08
	clc
	adc     _explosion_x
;
; }else{
;
	jmp     L11D7
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
L067A:	lda     _temp1
	asl     a
	bcc     L11E4
	inx
	clc
L11E4:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11E5
	inx
	clc
L11E5:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11E6
	inx
	clc
L11E6:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L06AC
	dex
L06AC:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; adr-=2;
;
	lda     _adr
	sec
	sbc     #$02
	sta     _adr
	bcs     L06B3
	dec     _adr+1
;
; explosion_x -= 8;
;
L06B3:	lda     _explosion_x
	sec
	sbc     #$08
L11D7:	sta     _explosion_x
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2]=4;
;
	lda     #$04
	sta     _update_list+2
;
; explosion_y -= 3;
;
	lda     _explosion_y
	sec
	sbc     #$03
	sta     _explosion_y
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L06CD
	inc     _adr+1
;
; update_list[7]=MSB(adr)|NT_UPD_HORZ;
;
L06CD:	lda     _adr+1
	ora     #$40
	sta     _update_list+7
;
; update_list[8]=LSB(adr);
;
	lda     _adr
	sta     _update_list+8
;
; update_list[9]= 4;
;
	lda     #$04
	sta     _update_list+9
;
; adr -= 96;
;
	lda     _adr
	sec
	sbc     #$60
	sta     _adr
	bcs     L06DF
	dec     _adr+1
;
; update_list[14]=MSB(adr)|NT_UPD_HORZ;
;
L06DF:	lda     _adr+1
	ora     #$40
	sta     _update_list+14
;
; update_list[15]=LSB(adr);
;
	lda     _adr
	sta     _update_list+15
;
; update_list[16]=4;
;
	lda     #$04
	sta     _update_list+16
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L06F1
	inc     _adr+1
;
; update_list[21]=MSB(adr)|NT_UPD_HORZ;
;
L06F1:	lda     _adr+1
	ora     #$40
	sta     _update_list+21
;
; update_list[22]=LSB(adr);
;
	lda     _adr
	sta     _update_list+22
;
; update_list[23]=4;
;
	lda     #$04
	sta     _update_list+23
;
; update_list[28] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+28
;
; update_list[10]=0xC0;
;
	lda     #$C0
	sta     _update_list+10
;
; update_list[11]=0xB7;
;
	lda     #$B7
	sta     _update_list+11
;
; update_list[12]=0xB7;
;
	sta     _update_list+12
;
; update_list[13]=0xC1;
;
	lda     #$C1
	sta     _update_list+13
;
; update_list[3]=0xB0;
;
	lda     #$B0
	sta     _update_list+3
;
; update_list[4]=0xB4;
;
	lda     #$B4
	sta     _update_list+4
;
; update_list[5]=0xB4;
;
	sta     _update_list+5
;
; update_list[6]=0xB1;
;
	lda     #$B1
	sta     _update_list+6
;
; update_list[17]=0x0;
;
	tya
	sta     _update_list+17
;
; update_list[18]=0x0;
;
	sta     _update_list+18
;
; update_list[19]=0x0;
;
	sta     _update_list+19
;
; update_list[20]=0x0;
;
	sta     _update_list+20
;
; update_list[24]=0x0;
;
	sta     _update_list+24
;
; update_list[25]=0x0;
;
	sta     _update_list+25
;
; update_list[26]=0x0;
;
	sta     _update_list+26
;
; update_list[27]=0x0;
;
	sta     _update_list+27
;
; }else{
;
	jmp     L0802
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
L0672:	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0749
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0749:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	lda     #$00
	sta     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L075E
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0762
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11D1
	cmp     _temp2
	bne     L11D1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L076E
	dex
L076E:	cpx     ptr1+1
	bne     L11D1
	cmp     ptr1
	beq     L0762
L11D1:	lda     #$00
	jmp     L0770
L0762:	lda     #$01
L0770:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L075E:	lda     _temp2
	beq     L0771
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0775
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L077D
	dex
L077D:	cpx     ptr1+1
	bne     L11D2
	cmp     ptr1
	bne     L11D2
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11D2
	cmp     _temp1
	beq     L0775
L11D2:	ldx     #$00
	txa
	jmp     L0783
L0775:	lda     #$01
L0783:	asl     a
	bcc     L11C2
	inx
L11C2:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L0771:	lda     _temp1
	cmp     #$0E
	bcs     L0784
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0788
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11D3
	cmp     _temp2
	bne     L11D3
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0794
	inx
L0794:	cpx     ptr1+1
	bne     L11D3
	cmp     ptr1
	beq     L0788
L11D3:	ldx     #$00
	txa
	jmp     L0796
L0788:	ldx     #$00
	lda     #$01
L0796:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0784:	lda     _temp2
	cmp     #$0F
	bcs     L0797
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L079B
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L07A3
	inx
L07A3:	cpx     ptr1+1
	bne     L11D4
	cmp     ptr1
	bne     L11D4
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11D4
	cmp     _temp1
	beq     L079B
L11D4:	ldx     #$00
	txa
	jmp     L07A9
L079B:	lda     #$01
L07A9:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L0797:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L07AA
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L11D8
L07AA:	lda     _temp5
	and     #$01
	beq     L07B2
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L11D8
L07B2:	lda     _temp5
	and     #$02
	beq     L11D8
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L11D8:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L07C1
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L11D9
L07C1:	lda     _temp5
	and     #$01
	beq     L07C9
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L11D9
L07C9:	lda     _temp5
	and     #$08
	beq     L11D9
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L11D9:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L07D8
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L11DA
L07D8:	lda     _temp5
	and     #$04
	beq     L07E0
;
; update_list[8] = 0xB6;
;
	lda     #$B6
;
; else if(collision_edge_data & 2)
;
	jmp     L11DA
L07E0:	lda     _temp5
	and     #$02
	beq     L11DA
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L11DA:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L07EF
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L11DB
L07EF:	lda     _temp5
	and     #$04
	beq     L07F7
;
; update_list[9] = 0XB7;
;
	lda     #$B7
;
; else if(collision_edge_data & 8)
;
	jmp     L11DB
L07F7:	lda     _temp5
	and     #$08
	beq     L11DB
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L11DB:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
L0802:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_flag[i] = 0xA0;
;
L063D:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05C1
;
; for(j=2; j<6; j++){
;
L0622:	lda     #$02
L11EC:	sta     _j
	cmp     #$06
	jcs     L083F
;
; if(craft_hps[j]){
;
	ldy     _j
	lda     _craft_hps,y
	jeq     L0812
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0820
	ldx     #$FF
L0820:	jsr     tosicmp
	jcc     L0812
	jeq     L0812
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0824
	ldx     #$01
L0824:	jsr     tosicmp
	bcs     L0812
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0827
	ldx     #$FF
L0827:	jsr     tosicmp
	bcc     L0812
	beq     L0812
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L082A
	ldx     #$01
L082A:	jsr     tosicmp
	bcs     L0812
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L082C
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0832
	inx
L0832:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L082C:	ldy     _j
	lda     _craft_hps,y
	bne     L0833
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L0833:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L083F
;
; for(j=2; j<6; j++){
;
L0812:	lda     _j
	clc
	adc     #$01
	jmp     L11EC
;
; if(has_collision){                        
;
L0620:	lda     _temp4
	beq     L0840
;
; craft_bullet_flag[i] = 0xA0;
;
	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05C1
;
; for(j=0; j<2; j++){
;
L0840:	sta     _j
	cmp     #$02
	jcs     L083F
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0848
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0858
	ldx     #$FF
L0858:	jsr     tosicmp
	jcc     L0848
	jeq     L0848
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L085E
	ldx     #$01
L085E:	jsr     tosicmp
	bcs     L0848
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0863
	ldx     #$FF
L0863:	jsr     tosicmp
	bcc     L0848
	beq     L0848
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0868
	ldx     #$01
L0868:	jsr     tosicmp
	bcs     L0848
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L086A
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0870
	inx
L0870:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L086A:	ldy     _j
	lda     _craft_hps,y
	bne     L0871
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L0871:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L083F
;
; for(j=0; j<2; j++){
;
L0848:	lda     _j
	clc
	adc     #$01
	jmp     L0840
;
; craft_bullet_x[i] = bullet_x;
;
L083F:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L05C1
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L05C1:	inc     _i
	jmp     L05BF
;
; TIMER_END(0);
;
L05C0:	lda     $00FB
	and     #$01
	beq     L088B
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L088B:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0895
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L0895:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L089D
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L089D:	sta     _i
L08A8:	lda     _i
	cmp     #$02
	jcs     L08A9
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L08AA
;
; if(craft_hps[i] == 0){
;
	ldy     _i
	lda     _craft_hps,y
	bne     L08B4
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L08B8
;
; if((frame&3) == 0) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$03
	jne     L08AA
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L08C2
	inx
L08C2:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	sec
	sbc     #$01
	sta     (sreg),y
;
; } else{
;
	jmp     L11F0
;
; craft_hps[i] = 8;
;
L08B8:	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L08CA
	inx
L08CA:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_y[i]=200;
;
	ldy     _i
	lda     #$C8
	sta     _craft_y,y
;
; if(i==0){
;
	lda     _i
	bne     L08CF
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; }else{
;
	jmp     L08AA
;
; craft_x[1]=178;
;
L08CF:	lda     #$B2
	sta     _craft_x+1
;
; continue;
;
	jmp     L08AA
;
; pad=pad_poll(i);
;
L08B4:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L08E1
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08E4
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08E4
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08E4
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0909
;
; sprite_dirs[i] = DIR_LEFT;
;
L08E4:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L11F1
L08E1:	lda     _temp0
	and     #$80
	beq     L0909
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08FB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08FB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08FB
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0909
;
; sprite_dirs[i] = DIR_RIGHT;
;
L08FB:	ldy     _i
	lda     #$08
L11F1:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L0909:	lda     _temp0
	and     #$10
	beq     L090E
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L0911
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L0911
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L0911
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0936
;
; sprite_dirs[i] = DIR_UP;
;
L0911:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L11F2
L090E:	lda     _temp0
	and     #$20
	beq     L0936
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L0928
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L0928
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L0928
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0936
;
; sprite_dirs[i] = DIR_DOWN;
;
L0928:	ldy     _i
	lda     #$02
L11F2:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L0936:	lda     _temp4
	jeq     L093B
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L0946
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L0972
;
; if(pad&PAD_LEFT){
;
L0946:	lda     _temp0
	and     #$40
	jeq     L094A
;
; int_temp0 = (((unsigned int)1)<<(new_x-9+COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$09
	bcs     L0951
	ldx     #$FF
L0951:	clc
	adc     #$02
	bcc     L0952
	inx
L0952:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L095C
	inx
L095C:	sec
	sbc     #$02
	bcs     L095D
	dex
L095D:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0958
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L0961
	dex
L0961:	clc
	adc     #$02
	bcc     L0962
	inx
L0962:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0963
L0958:	lda     #$01
L0963:	jsr     bnega
	jeq     L0972
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L11FA
L094A:	lda     _temp0
	and     #$80
	jeq     L0972
;
; int_temp0 = (((unsigned int)1)<<(new_x+8-COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$08
	bcc     L096D
	ldx     #$01
L096D:	sec
	sbc     #$02
	bcs     L096E
	dex
L096E:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L0978
	inx
L0978:	sec
	sbc     #$02
	bcs     L0979
	dex
L0979:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0974
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L097D
	dex
L097D:	clc
	adc     #$02
	bcc     L097E
	inx
L097E:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L097F
L0974:	lda     #$01
L097F:	jsr     bnega
	beq     L0972
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L11FA:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L0972:	lda     _temp4
	cmp     #$01
	beq     L0982
	lda     _frame
	and     #$03
	jeq     L099E
;
; if(pad&PAD_UP){
;
L0982:	lda     _temp0
	and     #$10
	jeq     L0985
;
; if(!((blocked[new_y-8+COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$08
	bcs     L098C
	dex
L098C:	clc
	adc     #$02
	bcc     L098D
	inx
L098D:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L11F8
	inx
L11F8:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L0993
	ldx     #$FF
L0993:	clc
	adc     #$02
	bcc     L0994
	inx
L0994:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L0998
	ldx     #$01
L0998:	sec
	sbc     #$02
	bcs     L0999
	dex
L0999:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L099E
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L11FB
L0985:	lda     _temp0
	and     #$20
	jeq     L099E
;
; if(!((blocked[new_y+9-COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$09
	bcc     L09A3
	inx
L09A3:	sec
	sbc     #$02
	bcs     L09A4
	dex
L09A4:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L11F9
	inx
L11F9:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L09AA
	ldx     #$FF
L09AA:	clc
	adc     #$02
	bcc     L09AB
	inx
L09AB:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L09AF
	ldx     #$01
L09AF:	sec
	sbc     #$02
	bcs     L09B0
	dex
L09B0:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L099E
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L11FB:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L099E:	lda     _temp6
	cmp     #$DD
	bcc     L09B2
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L09B2:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L093B:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L09C0
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L09C6
	inx
L09C6:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L09CB
L09C0:	lda     _temp0
	and     #$01
	jeq     L09CB
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L11F5:	sta     _j
	cmp     #$08
	bcs     L09CB
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L09CC
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L09D9
	inx
L09D9:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L09DF
	inx
L09DF:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L09E5
	inx
L09E5:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L09CB
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L09CC:	lda     #$02
	clc
	adc     _j
	jmp     L11F5
;
; TIMER_TICK(0);
;
L09CB:	lda     $00FB
	and     #$01
	beq     L08AA
	lda     $00FF
	pha
	clc
	adc     #$01
	sta     $00FF
L11F0:	pla
;
; for(i=0;i<2;++i){
;
L08AA:	inc     _i
	jmp     L08A8
;
; TIMER_END(0);
;
L08A9:	lda     $00FB
	and     #$01
	beq     L09F6
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L09F6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(scroll_amount){
;
	lda     _scroll_amount
	bne     L128C
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L128C:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _scroll_amount
	bcc     L0A07
	beq     L0A07
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L121B
;
; enemy_spawn_scr = 0;
;
L0A07:	lda     #$00
L121B:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L0A0E:	lda     _i
	cmp     #$06
	bcs     L0A0F
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0A18
	inx
L0A18:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; if(i<2&& craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	lda     _i
	cmp     #$02
	bcs     L0A10
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L0A10
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L0A10:	inc     _i
	jmp     L0A0E
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0A0F:	lda     #$00
	sta     _i
L0A26:	lda     _i
	cmp     #$0C
	bcs     L0A27
;
; if(!craft_bullet_flag[i]) continue;
;
	ldy     _i
	lda     _craft_bullet_flag,y
	beq     L0A28
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L0A32
	beq     L0A32
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; }else{
;
	jmp     L0A28
;
; craft_bullet_y[i] += scroll_amount;
;
L0A32:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L0A3D
	inx
L0A3D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0A28:	inc     _i
	jmp     L0A26
;
; if(explosion_state){
;
L0A27:	lda     _explosion_state
	beq     L0A45
;
; if(explosion_y > 255 - scroll_amount){
;
	lda     _explosion_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L0A41
	beq     L0A41
;
; explosion_y = 255;
;
	lda     #$FF
;
; }else{
;
	jmp     L121C
;
; explosion_y += scroll_amount;
;
L0A41:	lda     _scroll_amount
	clc
	adc     _explosion_y
L121C:	sta     _explosion_y
;
; scr -= scroll_amount;
;
L0A45:	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L0A4A
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; if(sprite_to_bg_y<255-scroll_amount) sprite_to_bg_y+=scroll_amount;
;
L0A4A:	lda     _sprite_to_bg_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcs     L0A4E
	lda     _scroll_amount
	clc
	adc     _sprite_to_bg_y
;
; else sprite_to_bg_y = 255;
;
	jmp     L121D
L0A4E:	lda     #$FF
L121D:	sta     _sprite_to_bg_y
;
; row_index = scr>>3;
;
	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0A57
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0A57:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L1241
	cmp     _last_row_index
	jeq     L0ECD
;
; last_row_index = row_index;
;
L1241:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L0A62
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L1265
;
; row_index-=30;
;
L0A62:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L1265:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0CDE
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0AA7
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0AA7:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0AAE
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0AAE:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0AB5
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0AB5:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L0ABD
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L0ABD:	lda     #$02
L1244:	sta     _i
	cmp     #$10
	bcs     L0AC6
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0ACF
	inx
L0ACF:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0AD5
	inx
L0AD5:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L0ADA
	lda     _i
	cmp     #$0F
	bne     L0AD9
;
; if(rand8() < 30){
;
L0ADA:	jsr     _rand8
	cmp     #$1E
	bcs     L0AC7
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L0AD9
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L121F
;
; next_line[i] = GRASS;
;
L0AD9:	ldy     _i
	lda     #$00
L121F:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0AC7:	lda     _i
	clc
	adc     #$01
	jmp     L1244
;
; wall_count -= (wall_count>>3);
;
L0AC6:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(building_index_y<17) building_index_y++;
;
	lda     _building_index_y
	cmp     #$11
	bcs     L0AF3
	lda     _building_index_y
	clc
	adc     #$01
	sta     _building_index_y
;
; if(dont_change_bg_pallette) dont_change_bg_pallette--;
;
L0AF3:	lda     _dont_change_bg_pallette
	beq     L0AF6
	lda     _dont_change_bg_pallette
	sec
	sbc     #$01
	sta     _dont_change_bg_pallette
;
; if(wall_count) wall_count--;
;
L0AF6:	lda     _wall_count
	beq     L0AF9
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L0AF9:	lda     _has_big_wall
	beq     L0AFC
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L0AFC:	lda     _wall_count
	cmp     #$02
	jcs     L0B6C
	jsr     _rand8
	cmp     #$96
	jcs     L0B6C
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L0B2C
	lda     _temp2
	cmp     #$3C
	bcs     L0B0D
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L1220
L0B0D:	lda     _temp2
	cmp     #$78
	bcs     L0B12
	lda     #$04
;
; else if(!dont_change_bg_pallette && row_index != 29 && row_index != 0 && random < 165){
;
	jmp     L1220
L0B12:	lda     _dont_change_bg_pallette
	bne     L0B17
	lda     _temp0
	cmp     #$1D
	beq     L0B17
	lda     _temp0
	beq     L0B17
	lda     _temp2
	cmp     #$A5
	bcs     L0B17
;
; selected_grid = BUILDING;
;
	lda     #$08
	sta     _temp1
;
; dont_change_bg_pallette = 16;
;
	lda     #$10
	sta     _dont_change_bg_pallette
;
; building_shift = random>126?8:random>113?4:0;
;
	lda     _temp2
	cmp     #$7F
	bcc     L0B21
	lda     #$08
	jmp     L0B27
L0B21:	lda     _temp2
	cmp     #$72
	bcc     L0B25
	lda     #$04
	jmp     L0B27
L0B25:	lda     #$00
L0B27:	sta     _building_shift
;
; building_index_y = 0;
;
	lda     #$00
	sta     _building_index_y
;
; }else if(random < 200){
;
	jmp     L0B32
L0B17:	lda     _temp2
	cmp     #$C8
	bcs     L0B2C
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L0B32
;
; selected_grid = WALL;
;
L0B2C:	lda     #$01
L1220:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L0B32:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L0B38
	inx
L0B38:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(selected_grid == BUILDING){
;
	lda     _temp1
	cmp     #$08
	bne     L0B3D
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0B3F
;
; grid_start--;
;
	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
;
; }else{
;
	jmp     L1221
;
; grid_end++;
;
L0B3F:	lda     _temp3
	pha
	clc
	adc     #$01
	sta     _temp3
L1221:	pla
;
; building_index_x = grid_start-1;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _building_index_x
;
; sprite_to_bg_x = (grid_start<<4)-24;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	sec
	sbc     #$18
	sta     _sprite_to_bg_x
;
; }else{
;
	jmp     L0B67
;
; if(rand8()&1) grid_start--;
;
L0B3D:	jsr     _rand8
	and     #$01
	beq     L0B4C
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B4C:	jsr     _rand8
	and     #$01
	beq     L0B4F
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L0B4F:	lda     _temp1
	cmp     #$05
	beq     L0B52
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L0B54
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B54:	jsr     _rand8
	and     #$01
	beq     L0B67
	lda     _temp3
	pha
	clc
	adc     #$01
;
; }else{
;
	jmp     L1245
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L0B52:	lda     _temp3
	cmp     _temp2
	bne     L0B61
	jsr     _rand8
	and     #$01
	beq     L0B5F
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L0B61
L0B5F:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(grid_start == 2){
;
L0B61:	lda     _temp2
	cmp     #$02
	bne     L0B63
;
; grid_start++; 
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; grid_end++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(grid_start == 15){
;
L0B63:	lda     _temp2
	cmp     #$0F
	bne     L0B67
;
; grid_start--; 
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; grid_end--;
;
	lda     _temp3
	pha
	sec
	sbc     #$01
L1245:	sta     _temp3
	pla
;
; for(i=grid_start; i<=grid_end; i++){
;
L0B67:	lda     _temp2
L1246:	sta     _i
	sec
	sbc     _temp3
	bcc     L0B6E
	bne     L0B6C
;
; next_line[i] = selected_grid;
;
L0B6E:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1246
;
; for(i=2; i<16; i++){
;
L0B6C:	lda     #$02
L124A:	sta     _i
	cmp     #$10
	jcs     L0B79
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L0B7A
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L0B84
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else if(current_line[i] != BUILDING){
;
	jmp     L0B7A
L0B84:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	jeq     L0B7A
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B96
	inx
L0B96:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L1201
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L1201:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B9B
	dex
L0B9B:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L125D
	inx
	clc
L125D:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L1232
	inx
	clc
L1232:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BA4
	dex
L0BA4:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L1255
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L1255:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BA9
	inx
L0BA9:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0BAE
	beq     L0BAE
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1224
;
; chance_to_grow = 0;
;
L0BAE:	lda     #$00
L1224:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L127A
	lda     _temp3
	cmp     #$02
	bcc     L0BBF
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0BBF
;
; next_line[i] = WALL;
;
L127A:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0BBF:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BCB
	inx
L0BCB:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1204
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L1204:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BCF
	dex
L0BCF:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1205
	inx
L1205:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L1206
	inx
L1206:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BD7
	dex
L0BD7:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BDB
	inx
L0BDB:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0BDC
	beq     L0BDC
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1226
;
; chance_to_grow = 0;
;
L0BDC:	lda     #$00
L1226:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L127B
	lda     _temp3
	cmp     #$03
	bcc     L0BED
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0BED
;
; next_line[i] = WATER;
;
L127B:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0BED:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BF9
	inx
L0BF9:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1207
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L1207:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BFD
	dex
L0BFD:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1208
	inx
L1208:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1209
	inx
L1209:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C05
	dex
L0C05:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C09
	inx
L0C09:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0C0A
	beq     L0C0A
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1228
;
; chance_to_grow = 0;
;
L0C0A:	lda     #$00
L1228:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L127C
	lda     _temp3
	cmp     #$03
	bcc     L0B7A
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0B7A
;
; next_line[i] = FOREST;
;
L127C:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L0B7A:	lda     _i
	clc
	adc     #$01
	jmp     L124A
;
; for(i=2; i<16; i++){
;
L0B79:	lda     #$02
L124B:	sta     _i
	cmp     #$10
	jcs     L0C23
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0C2A
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C31
	dex
L0C31:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C2B
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C33
	inx
L0C33:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0C2A
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L0C2B:	lda     _i
	cmp     #$02
	beq     L0C37
	lda     _i
	cmp     #$0F
	bne     L0C36
L0C37:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L122A
L0C36:	ldy     _i
	lda     #$05
L122A:	sta     _next_line,y
;
; if(current_line[i] == BUILDING && dont_change_bg_pallette == 15){
;
L0C2A:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	bne     L0C42
	lda     _dont_change_bg_pallette
	cmp     #$0F
	bne     L0C42
;
; next_line[i] = BUILDING_PASSABLE;
;
	ldy     _i
	lda     #$18
	sta     _next_line,y
;
; if(current_line[i]  == BUILDING_PASSABLE){
;
L0C42:	ldy     _i
	lda     _current_line,y
	cmp     #$18
	bne     L0C24
;
; sprite_to_bg_y = 24;
;
	sta     _sprite_to_bg_y
;
; for(i=2; i<16; i++){
;
L0C24:	lda     _i
	clc
	adc     #$01
	jmp     L124B
;
; for(i=2; i<16; i++){
;
L0C23:	lda     #$02
L124C:	sta     _i
	cmp     #$10
	jcs     L0C53
;
; if(current_line[i] == GRASS && (
;
	ldy     _i
	lda     _current_line,y
	jne     L0C5A
;
; (current_line[i+1]&BUILDING_PASSABLE) || 
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C62
	inx
L0C62:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	jne     L0C5B
;
; (current_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C65
	dex
L0C65:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C5B
;
; (prev_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _prev_line,y
	and     #$18
	bne     L0C5B
;
; (prev_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C6B
	dex
L0C6B:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C5B
;
; (prev_line[i+1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C6E
	inx
L0C6E:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C5B
;
; (next_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _next_line,y
	and     #$18
	bne     L0C5B
;
; (next_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C74
	dex
L0C74:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C5B
;
; (next_line[i+1]&BUILDING_PASSABLE)
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C77
	inx
L0C77:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
;
; ))
;
	beq     L0C5A
;
; current_line[i] = GRASS_EMPTY;
;
L0C5B:	ldy     _i
	lda     #$20
	sta     _current_line,y
;
; if(current_line[i] == WALL && 
;
L0C5A:	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L0C54
;
; ((current_line[i-1]==WALL) && (current_line[i+1]==WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C86
	dex
L0C86:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C54
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C8A
	inx
L0C8A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C54
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L0C54
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]==WALL) && (next_line[i+1]==WALL) 
;
	beq     L0C54
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C93
	dex
L0C93:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
	bne     L0C54
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C96
	inx
L0C96:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	bne     L0C54
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C99
	dex
L0C99:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C54
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C9C
	inx
L0C9C:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C54
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L0C54:	lda     _i
	clc
	adc     #$01
	jmp     L124C
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L0C53:	lda     _current_line+2
	and     #$01
	beq     L0CA3
	lda     _prev_line+2
	and     #$01
	beq     L0CA3
	lda     _next_line+2
	and     #$01
	beq     L0CA3
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0CA3:	lda     _current_line+15
	and     #$01
	beq     L0CB0
	lda     _prev_line+15
	and     #$01
	beq     L0CB0
	lda     _next_line+15
	and     #$01
	beq     L0CB0
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0CB0:	lda     #$0E
L124D:	sta     _i
	lda     _i
	jeq     L0CBE
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1233
	inx
	clc
L1233:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CC9
	dex
L0CC9:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; enemy_blocked[i] = enemy_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1234
	inx
	clc
L1234:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CCE
	dex
L0CCE:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1235
	inx
	clc
L1235:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CD3
	dex
L0CD3:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L124D
;
; blocked[0] = 0;
;
L0CBE:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; enemy_blocked[0] = 0;
;
	sta     _enemy_blocked
	sta     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L124E:	sta     _i
	cmp     #$10
	jcs     L0CDE
;
; if(current_line[i+1] != GRASS && current_line[i+1] != GRASS_EMPTY /*&& current_line[i+1] != BUILDING_PASSABLE*/){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CE8
	inx
L0CE8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	jeq     L0CDF
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CEB
	inx
L0CEB:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$20
	jeq     L0CDF
;
; if(current_line[i+1] != BUILDING_PASSABLE){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CF0
	inx
L0CF0:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$18
	beq     L0CED
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CF8
	inx
L0CF8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0CED
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; enemy_blocked[0] |= (1<<i);
;
L0CED:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _enemy_blocked
	stx     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L0CDF:	lda     _i
	clc
	adc     #$01
	jmp     L124E
;
; for(i=0; i<32; i++){
;
L0CDE:	lda     #$00
L1254:	sta     _i
	cmp     #$20
	jcs     L0D02
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0D9B
	cmp     #$01
	beq     L0D21
	cmp     #$02
	beq     L0D21
	cmp     #$03
	jeq     L0D9B
	cmp     #$04
	jeq     L0DEA
	cmp     #$05
	jeq     L0DA9
	cmp     #$08
	jeq     L0E54
	cmp     #$18
	jeq     L0E54
	cmp     #$20
	jne     L0D19
;
; scroll_temp = 0;
;
	txa
;
; break;
;
	jmp     L122B
;
; cell_type = current_line[column_index];
;
L0D21:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0D26
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D2C
	inx
L0D2C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D2E
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D36
	inx
L0D36:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1269
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0D2E:	lda     _temp3
	clc
	adc     #$01
	bcc     L0D56
	inx
;
; }else{
;
	jmp     L0D56
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0D26:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D44
	dex
L0D44:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D46
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D4E
	dex
L0D4E:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1269
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0D46:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D56
	dex
L0D56:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L1269:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D57
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1263
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0D57:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L1263:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0D68
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0D6A
;
; scroll_temp = (cell_type == WALL?0:0xF0);
;
	lda     _temp4
	cmp     #$01
	bne     L0D6F
	lda     #$00
	jmp     L122B
L0D6F:	lda     #$F0
;
; }else{
;
	jmp     L122B
;
; scroll_temp =  (cell_type == WALL?0x66:0xD0) + (rand8()&3);
;
L0D6A:	lda     _temp4
	cmp     #$01
	bne     L0D77
	lda     #$66
	jmp     L0D79
L0D77:	lda     #$D0
L0D79:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; }else{
;
	jmp     L122B
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0D68:	lda     _temp2
	cmp     #$04
	bcc     L0D7D
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0D7D:	lda     _temp4
	cmp     #$01
	bne     L0D81
;
; scroll_temp = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L11FE
	inx
L11FE:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L1251
;
; scroll_temp = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0D81:	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L11FF
	inx
L11FF:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L1251:	lda     (ptr1),y
	sta     _temp7
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) scroll_temp += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0D8D
	lda     _temp2
	cmp     #$02
	bne     L0D8C
L0D8D:	jsr     _rand8
	and     #$03
	clc
	adc     _temp7
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) scroll_temp  += (rand8()&1);
;
	jmp     L122B
L0D8C:	lda     _temp2
	jne     L0D19
	lda     _temp4
	cmp     #$01
	jne     L0D19
	jsr     _rand8
	and     #$01
	clc
	adc     _temp7
;
; break;
;
	jmp     L122B
;
; random = rand8()&0x3F;
;
L0D9B:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0DA0
;
; scroll_temp = 0;
;
	lda     #$00
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x60 + random;
;
L0DA0:	lda     _temp4
	clc
	adc     #$60
	jcc     L122B
;
; break;
;
	jmp     L122B
;
; switch(cell_index){
;
L0DA9:	lda     _temp1
;
; }
;
	beq     L0DAE
	cmp     #$01
	beq     L0DBD
	cmp     #$02
	beq     L0DCC
	cmp     #$03
	jeq     L0DDB
	jmp     L0D19
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0DAE:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DB2
	dex
L0DB2:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DAF
;
; scroll_temp = 0xA4 + (rand8()&1);
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x88 + (rand8()&3);
;
L0DAF:	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	jcc     L122B
;
; break;
;
	jmp     L122B
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0DBD:	lda     _temp3
	clc
	adc     #$01
	bcc     L0DC1
	inx
L0DC1:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DBE
;
; scroll_temp = 0xA6 + (rand8()&1);
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x88 + (rand8()&3);
;
L0DBE:	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	jcc     L122B
;
; break;
;
	jmp     L122B
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0DCC:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DD0
	dex
L0DD0:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DCD
;
; scroll_temp = 0x94 + (rand8()&1);
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x78 + (rand8()&3);
;
L0DCD:	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	jcc     L122B
;
; break;
;
	jmp     L122B
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0DDB:	lda     _temp3
	clc
	adc     #$01
	bcc     L0DDF
	inx
L0DDF:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DDC
;
; scroll_temp = 0x96 + (rand8()&1);
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x78 + (rand8()&3);
;
L0DDC:	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	jcc     L122B
;
; break;
;
	jmp     L122B
;
; neighbour_forest_count = 0;
;
L0DEA:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0DF1
	cmp     #$01
	beq     L0DFD
	cmp     #$02
	beq     L0E09
	cmp     #$03
	beq     L0E15
	jmp     L0DEF
;
; scroll_temp = 0x4;
;
L0DF1:	lda     #$04
	sta     _temp7
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DF7
	dex
L0DF7:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L126A
;
; scroll_temp = 0x5;
;
L0DFD:	lda     #$05
	sta     _temp7
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0E03
	inx
L0E03:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L126A
;
; scroll_temp = 0x6;
;
L0E09:	lda     #$06
	sta     _temp7
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E1B
	dex
;
; break;
;
	jmp     L0E1B
;
; scroll_temp = 0x7;
;
L0E15:	lda     #$07
	sta     _temp7
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0E1B
	inx
L0E1B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L126A:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0DEF:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0E2F
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0E26
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L1231
L0E26:	lda     _temp2
	cmp     #$01
	bne     L0E2B
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L1253
;
; cell_can_be_cleared = rand8() < 60;
;
L0E2B:	jsr     _rand8
	cmp     #$3C
L1253:	jsr     boolult
L1231:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0E2F:	lda     _temp4
	beq     L0E32
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0E36
;
; scroll_temp = 0;
;
	lda     #$00
;
; }else{
;
	jmp     L122B
;
; scroll_temp = 0x60 + random;
;
L0E36:	lda     _temp1
	clc
	adc     #$60
	jcc     L122B
;
; }else{
;
	jmp     L122B
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0E32:	lda     _temp1
	cmp     #$02
	bcs     L121A
	lda     _temp2
	cmp     #$02
	bcs     L121A
	jsr     _rand8
	and     #$03
	bne     L0E40
L121A:	jsr     _rand8
	and     #$03
	bne     L0E3F
;
; scroll_temp = 0xB8 + (rand8()&3);
;
L0E40:	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
	jcc     L122B
;
; } else {
;
	jmp     L122B
;
; scroll_temp = 0xA8 + (rand8()&3);
;
L0E3F:	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
	bcc     L122B
;
; break;
;
	jmp     L122B
;
; if(prev_line[column_index] != BUILDING){
;
L0E54:	ldy     _temp3
	lda     _prev_line,y
	cmp     #$08
	beq     L0E55
;
; sprite_id = 0xF4+building_shift;
;
	lda     _building_shift
	clc
	adc     #$F4
	bcc     L0E5F
;
; }else{
;
	jmp     L0E5F
;
; sprite_id = 0xD4+building_shift;
;
L0E55:	lda     _building_shift
	clc
	adc     #$D4
L0E5F:	sta     _temp2
;
; if(current_line[column_index-1] == current_line[column_index]){
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E63
	dex
L0E63:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	ldx     #$00
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     _temp3
	lda     _current_line,y
	cpx     ptr1+1
	bne     L0E60
	cmp     ptr1
	bne     L0E60
;
; sprite_id += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; sprite_id += (cell_index&1);
;
L0E60:	lda     _temp1
	and     #$01
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index&2) sprite_id -= 0x10;
;
	lda     _temp1
	and     #$02
	beq     L0E6B
	lda     _temp2
	sec
	sbc     #$10
	sta     _temp2
;
; scroll_temp = sprite_id;
;
L0E6B:	lda     _temp2
L122B:	sta     _temp7
;
; update_list_begin[i] = scroll_temp;
;
L0D19:	ldy     _i
	lda     _temp7
	sta     _update_list+3,y
;
; for(i=0; i<32; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1254
;
; if( (row_index&1) != 0){
;
L0D02:	lda     _temp0
	and     #$01
	jeq     L0E76
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0E7A
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0E7C:	lda     _i
	cmp     #$08
	jcs     L0ECD
;
; update_list_color_begin[i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	lda     #<(_update_list+38)
	ldx     #>(_update_list+38)
	clc
	adc     _i
	bcc     L0E87
	inx
L0E87:	sta     ptr2
	stx     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1236
	inx
	clc
L1236:	adc     #$01
	bcc     L0E8D
	inx
L0E8D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1237
	inx
	clc
L1237:	adc     #$01
	bcc     L1238
	inx
	clc
L1238:	adc     #$01
	bcc     L0E94
	inx
L0E94:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0E7C
;
; }else if( (row_index&3) == 3 ){
;
L0E7A:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0E96
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0E9A:	lda     _i
	cmp     #$08
	jcs     L0ECD
;
; update_list_color_begin[i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2))<<4;
;
	lda     #<(_update_list+38)
	ldx     #>(_update_list+38)
	clc
	adc     _i
	bcc     L0EA5
	inx
L0EA5:	sta     ptr2
	stx     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1239
	inx
	clc
L1239:	adc     #$01
	bcc     L0EAB
	inx
L0EAB:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L123A
	inx
	clc
L123A:	adc     #$01
	bcc     L123B
	inx
	clc
L123B:	adc     #$01
	bcc     L0EB2
	inx
L0EB2:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0E9A
;
; for(i=0;i<8;++i){
;
L0E96:	lda     #$00
	sta     _i
L0EB4:	lda     _i
	cmp     #$08
	jcs     L0ECD
;
; update_list_color_begin[i] += (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	lda     #<(_update_list+38)
	ldx     #>(_update_list+38)
	clc
	adc     _i
	bcc     L0EBF
	inx
L0EBF:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L123C
	inx
	clc
L123C:	adc     #$01
	bcc     L0EC5
	inx
L0EC5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L123D
	inx
	clc
L123D:	adc     #$01
	bcc     L123E
	inx
	clc
L123E:	adc     #$01
	bcc     L0ECC
	inx
L0ECC:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0EB4
;
; current_line[1] = WALL;
;
L0E76:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0ECD:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; for(i=0; i<6; i++){
;
L1293:	sta     _i
	cmp     #$06
	bcs     L0EF7
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_timers,y
;
; craft_types[i] = 0;
;
	ldy     _i
	sta     _craft_types,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	sta     _craft_hps,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1293
;
; craft_types[0] = 0;
;
L0EF7:	lda     #$00
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; explosion_state = 0;
;
	lda     #$00
	sta     _explosion_state
;
; for(i=0; i<18; i++){
;
L1294:	sta     _i
	cmp     #$12
	bcs     L0F1B
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0F24
	inx
L0F24:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0F27
	inx
L0F27:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1294
;
; next_line[0] = next_line[1] = WALL;
;
L0F1B:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; dont_change_bg_pallette = 14;
;
	lda     #$0E
	sta     _dont_change_bg_pallette
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L1295:	sta     _i
	cmp     #$06
	bcs     L0F5D
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1295
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0F5D:	lda     #$00
L1296:	sta     _i
	cmp     #$0C
	bcs     L0F69
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1296
;
; for(i=0; i<15; i++){
;
L0F69:	lda     #$00
L1297:	sta     _i
	cmp     #$0F
	bcs     L0F75
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1290
	inx
	clc
L1290:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L1291
	inx
	clc
L1291:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; enemy_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L1292
	inx
	clc
L1292:	adc     #<(_enemy_blocked)
	sta     ptr1
	txa
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1297
;
; }
;
L0F75:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L12A7:	sta     _i
	cmp     #$06
	bcc     L12A8
;
; }
;
	rts
;
; if(!craft_hps[i]){
;
L12A8:	ldy     _i
	lda     _craft_hps,y
	jne     L0F8E
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0F92
;
; if(frame&1) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$01
	jeq     L0F88
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F9A
	inx
L0F9A:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; continue;
;
	jmp     L0F88
;
; }else if(enemy_spawn_scr == 0){
;
L0F92:	lda     _enemy_spawn_scr
	jne     L0FCA
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L129B:	sta     _temp5
;
; while((enemy_blocked[0] & (1<<spawn_x))){
;
L0FA4:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0FA5
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0FA4
	lda     #$00
;
; }                    
;
	jmp     L129B
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0FA5:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0FC8
	inx
L0FC8:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0FCA
;
; move_dir = sprite_dirs[i];
;
L0F8E:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0FD7
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0FDF
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0FDC
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0FDC:	lda     _temp1
	and     #$08
	beq     L0FDF
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0FDF:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0FE2
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0FE6
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0FE6:	lda     _temp1
	and     #$02
	beq     L0FE2
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0FE2:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0FF0
	lda     _frame
	and     #$07
	bne     L0FF0
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0FF8
	inx
L0FF8:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeEnemy(new_x, new_y) == FALSE){
;
L0FF0:	lda     _temp4
	beq     L0FFA
	lda     _temp3
	cmp     #$14
	bcs     L1299
	lda     _temp1
	cmp     #$01
	beq     L0FFA
L1299:	lda     _temp3
	cmp     #$DD
	bcc     L129A
	lda     _temp1
	cmp     #$02
	beq     L0FFA
L129A:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L129E
	inx
L129E:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0FD7
	cmp     #$00
	jne     L0FD7
;
; new_x = craft_x[i];
;
L0FFA:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeEnemy(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L1016
	dex
L1016:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L129F
	inx
L129F:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1011
	cmp     #$00
	bne     L1011
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeEnemy(new_x, new_y+1) == FALSE){
;
L1011:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L1022
	inx
L1022:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L12A0
	inx
L12A0:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L101D
	cmp     #$00
	bne     L101D
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeEnemy(new_x-1, new_y) == FALSE){
;
L101D:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L12A1
	inx
L12A1:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L1031
	ldx     #$FF
L1031:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1029
	cmp     #$00
	bne     L1029
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeEnemy(new_x+1, new_y) == FALSE){
;
L1029:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L12A2
	inx
L12A2:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L103D
	ldx     #$01
L103D:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1035
	cmp     #$00
	bne     L1035
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L1035:	lda     _temp3
	cmp     #$14
	bcs     L1041
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L1041:	lda     _temp3
	cmp     #$DD
	bcc     L1045
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L1045:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L104B
	inx
L104B:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L1050
	inx
L1050:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L1052
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; continue;
;
	jmp     L0F88
;
; }else if(move_dir == 0){
;
L1052:	lda     _temp1
	bne     L105D
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L129C
;
; move_dir = rand8()&3;
;
L105D:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L1066:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L106B
	inx
L106B:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L1066
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L129C:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0) {
;
L0FD7:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L1076
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L12A4:	sta     _j
	cmp     #$0C
	bcs     L1098
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L107C
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L1094
	inx
L1094:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L1098
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L107C:	lda     _j
	clc
	adc     #$01
	jmp     L12A4
;
; craft_bullet_timers[i]--;
;
L1076:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L109B
	inx
L109B:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y+8 || craft_hps[i] == 0){
;
L1098:	lda     _temp3
	cmp     #$E5
	bcs     L109D
	ldy     _i
	lda     _craft_hps,y
	bne     L109C
;
; craft_hps[i] = 0;
;
L109D:	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; continue;
;
	jmp     L0F88
;
; for(j=0; j<2; j++){
;
L109C:	lda     #$00
L12A6:	sta     _j
	cmp     #$02
	jcs     L0FCA
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L10AC
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L10BA
	ldx     #$FF
L10BA:	jsr     tosicmp
	jcc     L10AC
	jeq     L10AC
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L10BE
	ldx     #$01
L10BE:	jsr     tosicmp
	bcs     L10AC
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L10C1
	ldx     #$FF
L10C1:	jsr     tosicmp
	bcc     L10AC
	beq     L10AC
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L10C4
	ldx     #$01
L10C4:	jsr     tosicmp
	bcs     L10AC
;
; if(craft_hps[j]>2){
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L10C6
;
; craft_hps[j]-=2;
;
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L10CC
	inx
L10CC:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; craft_bullet_timers[i] = 0xF;
;
	ldy     _i
;
; }else{
;
	jmp     L12A5
;
; craft_hps[j] = 0;
;
L10C6:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; craft_bullet_timers[j] = 0xF;
;
	ldy     _j
L12A5:	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; break;
;
	jmp     L0FCA
;
; for(j=0; j<2; j++){
;
L10AC:	lda     _j
	clc
	adc     #$01
	jmp     L12A6
;
; craft_x[i] = new_x;
;
L0FCA:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0F88:	lda     _i
	clc
	adc     #$01
	jmp     L12A7

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L12AC
;
; }
;
	rts
;
; alpha = 4;
;
L12AC:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L10F7:	lda     _temp0
	beq     L10F8
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L10FF:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L10F7
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L10FF
;
; oam_clear();
;
L10F8:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L12AB:	sta     _i
	cmp     #$07
	bcs     L1107
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L12AA
	clc
L12AA:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12AB
;
; alpha = 0;
;
L1107:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L111B:	lda     _temp0
	cmp     #$04
	bcs     L111C
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1123:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L111B
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1123
;
; ppu_wait_frame();
;
L111C:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L111C
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L1132:	lda     _temp0
	beq     L1133
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L113A:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L1132
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L113A
;
; oam_clear();
;
L1133:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L1144:	lda     _temp0
	cmp     #$04
	bcs     L1145
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L114C:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L1144
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L114C
;
; }
;
L1145:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L1155:	lda     _scr+1
	bne     L12AD
	lda     _scr
	cmp     #$F0
	beq     L1156
;
; ppu_wait_frame();
;
L12AD:	jsr     _ppu_wait_frame
;
; scroll_amount = 4;
;
	lda     #$04
	sta     _scroll_amount
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L1155
;
; pal_col(9, 0x3d);
;
L1156:	lda     #$09
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(10, 0x2d);
;
	lda     #$0A
	jsr     pusha
	lda     #$2D
	jsr     _pal_col
;
; pal_col(11, 0x1d);
;
	lda     #$0B
	jsr     pusha
	lda     #$1D
	jsr     _pal_col
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_y[1]=200;
;
	sta     _craft_y+1
;
; temp5 = 0;
;
	lda     #$00
	sta     _temp5
;
; ppu_wait_frame();
;
L116F:	jsr     _ppu_wait_frame
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; oam_clear();
;
	jsr     _oam_clear
;
; is_update_dirty = 0;
;
	lda     #$00
	sta     _is_update_dirty
;
; scroll_amount = 0;
;
	sta     _scroll_amount
;
; if(craft_lives[0] && craft_y[0] < 150) scroll_amount = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L117A
	lda     _craft_y
	cmp     #$96
	bcs     L117A
	lda     #$96
	sec
	sbc     _craft_y
	sta     _scroll_amount
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L117A:	lda     _craft_lives+1
	beq     L118C
	lda     _craft_y+1
	cmp     #$96
	bcs     L118C
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > scroll_amount){
;
	sec
	sbc     _scroll_amount
	bcc     L118C
	beq     L118C
;
; scroll_amount = temp2;
;
	lda     _temp2
	sta     _scroll_amount
;
; if(scroll_amount){
;
L118C:	lda     _scroll_amount
	beq     L1190
;
; is_update_dirty = (scr&0xF)<scroll_amount;
;
	lda     _scr
	and     #$0F
	cmp     _scroll_amount
	jsr     boolult
	sta     _is_update_dirty
;
; if(explosion_state && (frame&1)){
;
L1190:	lda     _explosion_state
	beq     L1195
	lda     _frame
	and     #$01
	beq     L1195
;
; explosion_state--;
;
	lda     _explosion_state
	sec
	sbc     #$01
	sta     _explosion_state
;
; tick_crafts();
;
L1195:	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; check_pause();
;
	jsr     _check_pause
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L116F

.endproc

