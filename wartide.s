;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_col
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_pal_bg_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_craft_bullet_y:
	.byte	$FF
	.res	11,$00
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$0F
	.byte	$30
	.byte	$30
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$E0
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$E3
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$E1
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$E2
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_dont_change_bg_pallette:
	.res	1,$00
_building_shift:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L0EEF
	inx
	clc
L0EEF:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L0364:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L0392
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L0373
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L0392
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L0392
L0373:	lda     _temp2
	and     #$20
	beq     L037B
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L0392
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L0392
L037B:	lda     _temp2
	and     #$0F
	beq     L0392
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L0386
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_types[1] = 255;
;
	lda     #$FF
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L0386:	lda     _temp0
	cmp     #$01
	bne     L0392
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L0392:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L0364

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = craft_types[i]?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	beq     L03AF
	lda     #$00
	jmp     L03B1
L03AF:	lda     #$40
L03B1:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L03B9
	cmp     #$02
	beq     L03C5
	cmp     #$04
	beq     L03CB
	cmp     #$08
	beq     L03BF
	jmp     L03B7
;
; craft_sprite += 0x04;
;
L03B9:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EF2
;
; craft_sprite += 0x24;
;
L03BF:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EF2
;
; craft_sprite += 0x04;
;
L03C5:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L0EF2
;
; craft_sprite += 0x34;
;
L03CB:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L0EF2:	sta     _temp1
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L03B7:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L03D0
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L0EF5
L03D0:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L03D7
;
; craft_sprite += 0x04;
;
	lda     #$04
L0EF5:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L03D7:	lda     _i
	cmp     #$02
	bcs     L03DD
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L03E5
	lda     #$08
L03E5:	cpx     ptr1+1
	bne     L03DF
	cmp     ptr1
	bne     L03DF
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L03DF
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L03DF:	lda     _temp1
	ora     _i
	sta     _temp1
;
; }else{
;
	jmp     L03F3
;
; craft_sprite_prop |= 2;
;
L03DD:	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L03F3
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L03F3:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0;i<6; i++){
;
	lda     #$00
L0EF6:	sta     _i
	cmp     #$06
	bcs     L0412
;
; if(craft_types[i] == 255) continue;
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	beq     L0413
;
; draw_tank();
;
	jsr     _draw_tank
;
; if(i<2){
;
	lda     _i
	cmp     #$02
	bcs     L0413
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L0425
	lda     _frame
	and     #$10
	bne     L0425
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-20-8:20, 210, 0xA0+craft_hp_sprite, i, spr);
;
L0425:	jsr     decsp4
	lda     _i
	beq     L0432
	lda     #$E4
	jmp     L0434
L0432:	lda     #$14
L0434:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0;i<6; i++){
;
L0413:	lda     _i
	clc
	adc     #$01
	jmp     L0EF6
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0412:	lda     #$00
	sta     _i
L043B:	lda     _i
	cmp     #$0C
	bcs     L043C
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L043D
;
; spr=oam_spr(craft_bullet_x[i]-2, craft_bullet_y[i]-2, 0x80, i<CRAFT_BULLET_COUNT?i&1:2, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	ldy     #$02
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _i
	cmp     #$08
	bcs     L0453
	lda     _i
	and     #$01
	jmp     L0455
L0453:	lda     #$02
L0455:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L043D:	inc     _i
	jmp     L043B
;
; }
;
L043C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; DEBUG_SET(255);
;
	lda     #$FF
	sta     $00FF
;
; DEBUG_SET(0);
;
	lda     #$00
	sta     $00FF
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0486
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L0486:	lda     $00FB
	and     #$01
	beq     L048D
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L048D:	sta     _i
L0498:	lda     _i
	cmp     #$0C
	jcs     L0499
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L049A
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L04B2
	cmp     #$02
	beq     L04C8
	cmp     #$04
	beq     L04D3
	cmp     #$05
	beq     L04D8
	cmp     #$06
	beq     L04CD
	cmp     #$08
	beq     L04BD
	cmp     #$09
	beq     L04B7
	cmp     #$0A
	beq     L04C2
	jmp     L04B0
;
; bullet_y -= 3;
;
L04B2:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L04B0
;
; bullet_y -= 2;
;
L04B7:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L0F0A
;
; bullet_x += 3;
;
L04BD:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L0F0A
;
; bullet_y += 2;
;
L04C2:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L0F0A
;
; bullet_y += 3;
;
L04C8:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L04B0
;
; bullet_y += 2;
;
L04CD:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L0F1A
;
; bullet_x -= 3;
;
L04D3:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L0F0A
;
; bullet_y -= 2;
;
L04D8:	lda     _temp3
	sec
	sbc     #$02
L0F1A:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L0F0A:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L04B0:	lda     _temp0
	cmp     #$0A
	bcc     L04DE
	lda     _temp0
	cmp     #$F5
	bcs     L04DE
	lda     _temp3
	cmp     #$F5
	bcs     L04DE
	lda     _temp3
	cmp     #$0A
	bcs     L04DD
;
; craft_bullet_y[i] = 255;
;
L04DE:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L049A
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L04DD:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0F14
	inx
L0F14:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0F10
	inx
	clc
L0F10:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L04F0
	cmp     #$00
L04F0:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L04F1
;
; if(has_collision){
;
	lda     _temp4
	jeq     L04F3
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L04F6
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L04F6
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L04F5
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L04F6:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; wall_hit_hp[i&1]--;
;
L04F5:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
	lda     _i
	and     #$01
	sta     ptr1
	tya
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L050C
	lda     _temp2
	jeq     L050C
	lda     _temp2
	cmp     #$0F
	jeq     L050C
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0F11
	inx
	clc
L0F11:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0F12
	inx
	clc
L0F12:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L051B
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L051B:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L0521
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L0521:	lda     _temp0
	cmp     #$1E
	bcs     L0525
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L0F16
;
; row_index_on_ns-=30;
;
L0525:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L0F16:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L0F13
	inx
	clc
L0F13:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0546
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0546:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	sty     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L055B
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L055F
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0F06
	cmp     _temp2
	bne     L0F06
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L056B
	dex
L056B:	cpx     ptr1+1
	bne     L0F06
	cmp     ptr1
	beq     L055F
L0F06:	lda     #$00
	jmp     L056D
L055F:	lda     #$01
L056D:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L055B:	lda     _temp2
	beq     L056E
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0572
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L057A
	dex
L057A:	cpx     ptr1+1
	bne     L0F07
	cmp     ptr1
	bne     L0F07
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0F07
	cmp     _temp1
	beq     L0572
L0F07:	ldx     #$00
	txa
	jmp     L0580
L0572:	lda     #$01
L0580:	asl     a
	bcc     L0EFB
	inx
L0EFB:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L056E:	lda     _temp1
	cmp     #$0E
	bcs     L0581
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0585
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0F08
	cmp     _temp2
	bne     L0F08
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0591
	inx
L0591:	cpx     ptr1+1
	bne     L0F08
	cmp     ptr1
	beq     L0585
L0F08:	ldx     #$00
	txa
	jmp     L0593
L0585:	ldx     #$00
	lda     #$01
L0593:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0581:	lda     _temp2
	cmp     #$0F
	bcs     L0594
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0598
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L05A0
	inx
L05A0:	cpx     ptr1+1
	bne     L0F09
	cmp     ptr1
	bne     L0F09
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0F09
	cmp     _temp1
	beq     L0598
L0F09:	ldx     #$00
	txa
	jmp     L05A6
L0598:	lda     #$01
L05A6:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L0594:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L05A7
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L0F0C
L05A7:	lda     _temp5
	and     #$01
	beq     L05AF
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L0F0C
L05AF:	lda     _temp5
	and     #$02
	beq     L0F0C
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L0F0C:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L05BE
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L0F0D
L05BE:	lda     _temp5
	and     #$01
	beq     L05C6
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L0F0D
L05C6:	lda     _temp5
	and     #$08
	beq     L0F0D
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L0F0D:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L05D5
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L0F0E
L05D5:	lda     _temp5
	and     #$04
	beq     L05DD
;
; update_list[8] = 0xB6;
;
	lda     #$B6
;
; else if(collision_edge_data & 2)
;
	jmp     L0F0E
L05DD:	lda     _temp5
	and     #$02
	beq     L0F0E
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L0F0E:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L05EC
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L0F0F
L05EC:	lda     _temp5
	and     #$04
	beq     L05F4
;
; update_list[9] = 0XB7;
;
	lda     #$B7
;
; else if(collision_edge_data & 8)
;
	jmp     L0F0F
L05F4:	lda     _temp5
	and     #$08
	beq     L0F0F
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L0F0F:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_y[i] = 255;
;
L050C:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L049A
;
; for(j=2; j<6; j++){
;
L04F3:	lda     #$02
L0F17:	sta     _j
	cmp     #$06
	jcs     L0632
;
; if(craft_types[j] != 255){
;
	ldy     _j
	lda     _craft_types,y
	cmp     #$FF
	jeq     L060F
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L061D
	ldx     #$FF
L061D:	jsr     tosicmp
	bcc     L060F
	beq     L060F
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0621
	ldx     #$01
L0621:	jsr     tosicmp
	bcs     L060F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0624
	ldx     #$FF
L0624:	jsr     tosicmp
	bcc     L060F
	beq     L060F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0627
	ldx     #$01
L0627:	jsr     tosicmp
	bcs     L060F
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L0629
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L062F
	inx
L062F:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; bullet_y = 255;
;
L0629:	lda     #$FF
	sta     _temp3
;
; break;
;
	jmp     L0632
;
; for(j=2; j<6; j++){
;
L060F:	lda     _j
	clc
	adc     #$01
	jmp     L0F17
;
; if(has_collision){
;
L04F1:	lda     _temp4
	beq     L0633
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L049A
;
; for(j=0; j<2; j++){
;
L0633:	sta     _j
	cmp     #$02
	jcs     L0632
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L063B
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L064B
	ldx     #$FF
L064B:	jsr     tosicmp
	jcc     L063B
	jeq     L063B
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0651
	ldx     #$01
L0651:	jsr     tosicmp
	bcs     L063B
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0656
	ldx     #$FF
L0656:	jsr     tosicmp
	bcc     L063B
	beq     L063B
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L065B
	ldx     #$01
L065B:	jsr     tosicmp
	bcs     L063B
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L065D
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L0663
	inx
L0663:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; bullet_y = 255;
;
L065D:	lda     #$FF
	sta     _temp3
;
; break;
;
	jmp     L0632
;
; for(j=0; j<2; j++){
;
L063B:	lda     _j
	clc
	adc     #$01
	jmp     L0633
;
; craft_bullet_x[i] = bullet_x;
;
L0632:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L049A
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L049A:	inc     _i
	jmp     L0498
;
; TIMER_END(0);
;
L0499:	lda     $00FB
	and     #$01
	beq     L0674
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L0674:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L067E
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L067E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L0686
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L0686:	sta     _i
L0691:	lda     _i
	cmp     #$02
	jcs     L0692
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L0693
;
; if(craft_hps[i] == 0)
;
	ldy     _i
	lda     _craft_hps,y
	bne     L069D
;
; craft_hps[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L06A7
	inx
L06A7:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; pad=pad_poll(i);
;
L069D:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L06B1
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L06B4
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L06B4
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L06B4
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06D9
;
; sprite_dirs[i] = DIR_LEFT;
;
L06B4:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L0F1B
L06B1:	lda     _temp0
	and     #$80
	beq     L06D9
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L06CB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L06CB
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L06CB
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06D9
;
; sprite_dirs[i] = DIR_RIGHT;
;
L06CB:	ldy     _i
	lda     #$08
L0F1B:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L06D9:	lda     _temp0
	and     #$10
	beq     L06DE
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L06E1
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L06E1
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L06E1
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0706
;
; sprite_dirs[i] = DIR_UP;
;
L06E1:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L0F1C
L06DE:	lda     _temp0
	and     #$20
	beq     L0706
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L06F8
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L06F8
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L06F8
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0706
;
; sprite_dirs[i] = DIR_DOWN;
;
L06F8:	ldy     _i
	lda     #$02
L0F1C:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L0706:	lda     _temp4
	jeq     L070B
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L0716
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L073E
;
; if(pad&PAD_LEFT){
;
L0716:	lda     _temp0
	and     #$40
	jeq     L071A
;
; int_temp0 = (((unsigned int)1)<<(new_x-3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$03
	bcs     L0721
	ldx     #$FF
L0721:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L072B
	inx
L072B:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0727
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L072F
	dex
L072F:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0730
L0727:	lda     #$01
L0730:	jsr     bnega
	jeq     L073E
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L0F24
L071A:	lda     _temp0
	and     #$80
	jeq     L073E
;
; int_temp0 = (((unsigned int)1)<<(new_x+3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$03
	bcc     L073A
	ldx     #$01
L073A:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L0744
	inx
L0744:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0740
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L0748
	dex
L0748:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0749
L0740:	lda     #$01
L0749:	jsr     bnega
	beq     L073E
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L0F24:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L073E:	lda     _temp4
	cmp     #$01
	beq     L074C
	lda     _frame
	and     #$03
	jeq     L0765
;
; if(pad&PAD_UP){
;
L074C:	lda     _temp0
	and     #$10
	jeq     L074F
;
; if(!((blocked[new_y-3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$03
	bcs     L0756
	dex
L0756:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0F22
	inx
L0F22:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L075C
	ldx     #$FF
L075C:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L0760
	ldx     #$01
L0760:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L0765
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L0F25
L074F:	lda     _temp0
	and     #$20
	jeq     L0765
;
; if(!((blocked[new_y+3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$03
	bcc     L076A
	inx
L076A:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0F23
	inx
L0F23:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L0770
	ldx     #$FF
L0770:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L0774
	ldx     #$01
L0774:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L0765
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L0F25:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L0765:	lda     _temp6
	cmp     #$DD
	bcc     L0776
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L0776:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L070B:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0784
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L078A
	inx
L078A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L078F
L0784:	lda     _temp0
	and     #$01
	jeq     L078F
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L0F1F:	sta     _j
	cmp     #$08
	bcs     L078F
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0790
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L079D
	inx
L079D:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L07A3
	inx
L07A3:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L07A9
	inx
L07A9:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L078F
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L0790:	lda     #$02
	clc
	adc     _j
	jmp     L0F1F
;
; TIMER_TICK(0);
;
L078F:	lda     $00FB
	and     #$01
	beq     L0693
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L0693:	inc     _i
	jmp     L0691
;
; TIMER_END(0);
;
L0692:	lda     $00FB
	and     #$01
	beq     L07BA
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L07BA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(temp0 < 150){
;
	lda     _temp0
	cmp     #$96
	bcc     L0FD0
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L0FD0:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _temp1
	bcc     L07CB
	beq     L07CB
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _temp1
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L0F43
;
; enemy_spawn_scr = 0;
;
L07CB:	lda     #$00
L0F43:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L07D2:	lda     _i
	cmp     #$06
	bcs     L07D3
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L07DC
	inx
L07DC:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; if(craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L07D4
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L07D4:	inc     _i
	jmp     L07D2
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07D3:	lda     #$00
	sta     _i
L07E8:	lda     _i
	cmp     #$0C
	bcs     L07E9
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L07EA
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _temp1
	jsr     tosicmp0
	bcc     L07F4
	beq     L07F4
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; }else{
;
	jmp     L07EA
;
; craft_bullet_y[i] += scroll_amount;
;
L07F4:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L07FF
	inx
L07FF:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07EA:	inc     _i
	jmp     L07E8
;
; scr -= scroll_amount;
;
L07E9:	lda     _temp1
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L0803
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; row_index = scr>>3;
;
L0803:	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0809
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0809:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L0F80
	cmp     _last_row_index
	jeq     L0C43
;
; last_row_index = row_index;
;
L0F80:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L0814
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L0FA9
;
; row_index-=30;
;
L0814:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L0FA9:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0A41
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0859
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0859:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0860
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0860:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0867
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0867:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L086F
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L086F:	lda     #$02
L0F83:	sta     _i
	cmp     #$10
	bcs     L0878
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0881
	inx
L0881:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0887
	inx
L0887:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L088C
	lda     _i
	cmp     #$0F
	bne     L088B
;
; if(rand8() < 30){
;
L088C:	jsr     _rand8
	cmp     #$1E
	bcs     L0879
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L088B
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L0F45
;
; next_line[i] = GRASS;
;
L088B:	ldy     _i
	lda     #$00
L0F45:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0879:	lda     _i
	clc
	adc     #$01
	jmp     L0F83
;
; wall_count -= (wall_count>>3);
;
L0878:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(dont_change_bg_pallette) dont_change_bg_pallette--;
;
	lda     _dont_change_bg_pallette
	beq     L08A5
	lda     _dont_change_bg_pallette
	sec
	sbc     #$01
	sta     _dont_change_bg_pallette
;
; if(wall_count) wall_count--;
;
L08A5:	lda     _wall_count
	beq     L08A8
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L08A8:	lda     _has_big_wall
	beq     L08AB
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L08AB:	lda     _wall_count
	cmp     #$02
	jcs     L0901
	jsr     _rand8
	cmp     #$96
	jcs     L0901
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L08D0
	lda     _temp2
	cmp     #$3C
	bcs     L08BC
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L0F46
L08BC:	lda     _temp2
	cmp     #$78
	bcs     L08C1
	lda     #$04
;
; else if(dont_change_bg_pallette == 0 /*&& random < 160*/){
;
	jmp     L0F46
L08C1:	lda     _dont_change_bg_pallette
	bne     L08C6
;
; selected_grid = BUILDING;
;
	lda     #$08
	sta     _temp1
;
; dont_change_bg_pallette = 16;
;
	lda     #$10
	sta     _dont_change_bg_pallette
;
; building_shift = (rand8()&4);
;
	jsr     _rand8
	and     #$04
	sta     _building_shift
;
; }else if(random < 200){
;
	jmp     L08D6
L08C6:	lda     _temp2
	cmp     #$C8
	bcs     L08D0
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L08D6
;
; selected_grid = WALL;
;
L08D0:	lda     #$01
L0F46:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L08D6:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L08DC
	inx
L08DC:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(selected_grid == BUILDING){
;
	lda     _temp1
	cmp     #$08
	bne     L08E1
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
;
; }else{
;
	bne     L08FC
;
; grid_end++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; }else{
;
	jmp     L08FE
;
; if(rand8()&1) grid_start--;
;
L08E1:	jsr     _rand8
	and     #$01
	beq     L08E9
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L08E9:	jsr     _rand8
	and     #$01
	beq     L08EC
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L08EC:	lda     _temp1
	cmp     #$05
	beq     L08EF
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L08F1
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L08F1:	jsr     _rand8
	and     #$01
	beq     L08FE
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; }else{
;
	jmp     L08FE
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L08EF:	lda     _temp3
	cmp     _temp2
	bne     L08FE
	jsr     _rand8
	and     #$01
	beq     L08FC
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L08FE
L08FC:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; for(i=grid_start; i<=grid_end; i++){
;
L08FE:	lda     _temp2
L0F85:	sta     _i
	sec
	sbc     _temp3
	bcc     L0903
	bne     L0901
;
; next_line[i] = selected_grid;
;
L0903:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F85
;
; for(i=2; i<16; i++){
;
L0901:	lda     #$02
L0F89:	sta     _i
	cmp     #$10
	jcs     L090E
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L090F
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L0919
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else if(current_line[i] != BUILDING){
;
	jmp     L090F
L0919:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	jeq     L090F
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L092B
	inx
L092B:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L0F2B
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L0F2B:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0930
	dex
L0930:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L0FA0
	inx
	clc
L0FA0:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L0F56
	inx
	clc
L0F56:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0939
	dex
L0939:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L0F96
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L0F96:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L093E
	inx
L093E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0943
	beq     L0943
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0F48
;
; chance_to_grow = 0;
;
L0943:	lda     #$00
L0F48:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L0FBE
	lda     _temp3
	cmp     #$02
	bcc     L0954
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0954
;
; next_line[i] = WALL;
;
L0FBE:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0954:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0960
	inx
L0960:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0F2E
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L0F2E:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0964
	dex
L0964:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0F2F
	inx
L0F2F:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0F30
	inx
L0F30:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L096C
	dex
L096C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0970
	inx
L0970:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0971
	beq     L0971
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0F4A
;
; chance_to_grow = 0;
;
L0971:	lda     #$00
L0F4A:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L0FBF
	lda     _temp3
	cmp     #$03
	bcc     L0982
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0982
;
; next_line[i] = WATER;
;
L0FBF:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0982:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L098E
	inx
L098E:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0F31
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L0F31:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0992
	dex
L0992:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0F32
	inx
L0F32:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0F33
	inx
L0F33:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L099A
	dex
L099A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L099E
	inx
L099E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L099F
	beq     L099F
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0F4C
;
; chance_to_grow = 0;
;
L099F:	lda     #$00
L0F4C:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L0FC0
	lda     _temp3
	cmp     #$03
	bcc     L090F
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L090F
;
; next_line[i] = FOREST;
;
L0FC0:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L090F:	lda     _i
	clc
	adc     #$01
	jmp     L0F89
;
; for(i=2; i<16; i++){
;
L090E:	lda     #$02
L0F8A:	sta     _i
	cmp     #$10
	jcs     L09B8
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L09BF
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09C6
	dex
L09C6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L09C0
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09C8
	inx
L09C8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L09BF
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L09C0:	lda     _i
	cmp     #$02
	beq     L09CC
	lda     _i
	cmp     #$0F
	bne     L09CB
L09CC:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L0F4E
L09CB:	ldy     _i
	lda     #$05
L0F4E:	sta     _next_line,y
;
; if(current_line[i] == BUILDING && dont_change_bg_pallette == 15){
;
L09BF:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	bne     L09B9
	lda     _dont_change_bg_pallette
	cmp     #$0F
	bne     L09B9
;
; next_line[i] = BUILDING;
;
	ldy     _i
	lda     #$08
	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L09B9:	lda     _i
	clc
	adc     #$01
	jmp     L0F8A
;
; for(i=2; i<16; i++){
;
L09B8:	lda     #$02
L0F8B:	sta     _i
	cmp     #$10
	jcs     L09E2
;
; if(current_line[i] == WALL && 
;
	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L09E3
;
; ((current_line[i-1]==WALL) && (current_line[i+1]==WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09F1
	dex
L09F1:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L09E3
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09F5
	inx
L09F5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L09E3
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L09E3
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]==WALL) && (next_line[i+1]==WALL) 
;
	beq     L09E3
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09FE
	dex
L09FE:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
	bne     L09E3
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A01
	inx
L0A01:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	bne     L09E3
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A04
	dex
L0A04:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09E3
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A07
	inx
L0A07:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09E3
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L09E3:	lda     _i
	clc
	adc     #$01
	jmp     L0F8B
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L09E2:	lda     _current_line+2
	and     #$01
	beq     L0A0E
	lda     _prev_line+2
	and     #$01
	beq     L0A0E
	lda     _next_line+2
	and     #$01
	beq     L0A0E
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0A0E:	lda     _current_line+15
	and     #$01
	beq     L0A1B
	lda     _prev_line+15
	and     #$01
	beq     L0A1B
	lda     _next_line+15
	and     #$01
	beq     L0A1B
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0A1B:	lda     #$0E
L0F8C:	sta     _i
	lda     _i
	jeq     L0A29
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F57
	inx
	clc
L0F57:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A34
	dex
L0A34:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F58
	inx
	clc
L0F58:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A39
	dex
L0A39:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L0F8C
;
; blocked[0] = 0;
;
L0A29:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L0F8D:	sta     _i
	cmp     #$10
	bcs     L0A41
;
; if(current_line[i+1] != GRASS){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A4B
	inx
L0A4B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	beq     L0A42
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A53
	inx
L0A53:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0A42
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L0A42:	lda     _i
	clc
	adc     #$01
	jmp     L0F8D
;
; for(i=0; i<32; i++){
;
L0A41:	lda     #$00
L0F95:	sta     _i
	cmp     #$20
	jcs     L0A59
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0AFA
	cmp     #$01
	beq     L0A74
	cmp     #$02
	beq     L0A74
	cmp     #$03
	jeq     L0AFA
	cmp     #$04
	jeq     L0B5D
	cmp     #$05
	jeq     L0B0C
	cmp     #$08
	jeq     L0BD5
	jmp     L0A5A
;
; cell_type = current_line[column_index];
;
L0A74:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0A79
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0A7F
	inx
L0A7F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0A81
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0A89
	inx
L0A89:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0FAD
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0A81:	lda     _temp3
	clc
	adc     #$01
	bcc     L0AA9
	inx
;
; }else{
;
	jmp     L0AA9
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0A79:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0A97
	dex
L0A97:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0A99
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0AA1
	dex
L0AA1:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0FAD
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0A99:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0AA9
	dex
L0AA9:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L0FAD:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0AAA
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0FA7
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0AAA:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L0FA7:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0ABB
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0ABD
;
; update_list[3+i] = (cell_type == WALL?0:0xF0);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F59
	inx
	clc
L0F59:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0AC4
	lda     #$00
	jmp     L0F90
L0AC4:	lda     #$F0
;
; }else{
;
	jmp     L0F90
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xD0) + (rand8()&3);
;
L0ABD:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L0F5A
	inx
	clc
L0F5A:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0ACE
	lda     #$66
	jmp     L0AD0
L0ACE:	lda     #$D0
L0AD0:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0A5A
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0ABB:	lda     _temp2
	cmp     #$04
	bcc     L0AD4
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0AD4:	lda     _temp4
	cmp     #$01
	bne     L0AD8
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L0F5B
	inx
	clc
L0F5B:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L0F28
	inx
L0F28:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L0F9E
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0AD8:	lda     _i
	clc
	adc     #$03
	bcc     L0F5C
	inx
	clc
L0F5C:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L0F29
	inx
L0F29:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L0F9E:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0AE8
	lda     _temp2
	cmp     #$02
	bne     L0AE7
L0AE8:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F5D
	inx
	clc
L0F5D:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0A5A
L0AE7:	lda     _temp2
	jne     L0A5A
	lda     _temp4
	cmp     #$01
	jne     L0A5A
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F5E
	inx
	clc
L0F5E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
L0F90:	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; random = rand8()&0x3F;
;
L0AFA:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0AFF
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F5F
	inx
	clc
L0F5F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L0F92
;
; update_list[3+i] = 0x60 + random;
;
L0AFF:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F60
	inx
	clc
L0F60:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
;
; break;
;
	jmp     L0F92
;
; switch(cell_index){
;
L0B0C:	lda     _temp1
;
; }
;
	beq     L0B11
	cmp     #$01
	beq     L0B24
	cmp     #$02
	jeq     L0B37
	cmp     #$03
	jeq     L0B4A
	jmp     L0A5A
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0B11:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B15
	dex
L0B15:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B12
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F61
	inx
	clc
L0F61:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0A5A
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0B12:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F62
	inx
	clc
L0F62:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0B24:	lda     _temp3
	clc
	adc     #$01
	bcc     L0B28
	inx
L0B28:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B25
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F63
	inx
	clc
L0F63:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0A5A
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0B25:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F64
	inx
	clc
L0F64:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0B37:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B3B
	dex
L0B3B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B38
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F65
	inx
	clc
L0F65:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0A5A
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B38:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F66
	inx
	clc
L0F66:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0B4A:	lda     _temp3
	clc
	adc     #$01
	bcc     L0B4E
	inx
L0B4E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B4B
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F67
	inx
	clc
L0F67:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0A5A
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B4B:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F68
	inx
	clc
L0F68:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; neighbour_forest_count = 0;
;
L0B5D:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0B64
	cmp     #$01
	beq     L0B72
	cmp     #$02
	jeq     L0B80
	cmp     #$03
	jeq     L0B8E
	jmp     L0B62
;
; update_list[3+i] = 0x4;
;
L0B64:	lda     _i
	clc
	adc     #$03
	bcc     L0F69
	inx
	clc
L0F69:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B6C
	dex
L0B6C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L0FAE
;
; update_list[3+i] = 0x5;
;
L0B72:	lda     _i
	clc
	adc     #$03
	bcc     L0F6A
	inx
	clc
L0F6A:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B7A
	inx
L0B7A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L0FAE
;
; update_list[3+i] = 0x6;
;
L0B80:	lda     _i
	clc
	adc     #$03
	bcc     L0F6B
	inx
	clc
L0F6B:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B96
	dex
;
; break;
;
	jmp     L0B96
;
; update_list[3+i] = 0x7;
;
L0B8E:	lda     _i
	clc
	adc     #$03
	bcc     L0F6C
	inx
	clc
L0F6C:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B96
	inx
L0B96:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L0FAE:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0B62:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0BAA
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0BA1
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L0F55
L0BA1:	lda     _temp2
	cmp     #$01
	bne     L0BA6
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L0F94
;
; cell_can_be_cleared = rand8() < 60;
;
L0BA6:	jsr     _rand8
	cmp     #$3C
L0F94:	jsr     boolult
L0F55:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0BAA:	lda     _temp4
	beq     L0BAD
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0BB1
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F6D
	inx
	clc
L0F6D:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L0F92
;
; update_list[3+i] = 0x60 + random;
;
L0BB1:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F6E
	inx
	clc
L0F6E:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
;
; }else{
;
	jmp     L0F92
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0BAD:	lda     _temp1
	cmp     #$02
	bcs     L0F42
	lda     _temp2
	cmp     #$02
	bcs     L0F42
	jsr     _rand8
	and     #$03
	bne     L0BBF
L0F42:	jsr     _rand8
	and     #$03
	bne     L0BBE
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0BBF:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F6F
	inx
	clc
L0F6F:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L0A5A
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0BBE:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F70
	inx
	clc
L0F70:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0A5A
;
; if(prev_line[column_index] != BUILDING){
;
L0BD5:	ldy     _temp3
	lda     _prev_line,y
	cmp     #$08
	beq     L0BD6
;
; sprite_id = 0xF4+building_shift;
;
	lda     _building_shift
	clc
	adc     #$F4
	bcc     L0BE0
;
; }else{
;
	jmp     L0BE0
;
; sprite_id = 0xD4+building_shift;
;
L0BD6:	lda     _building_shift
	clc
	adc     #$D4
L0BE0:	sta     _temp2
;
; if(current_line[column_index-1] == BUILDING){
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BE4
	dex
L0BE4:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$08
	bne     L0BE1
;
; sprite_id += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; sprite_id += (cell_index&1);
;
L0BE1:	lda     _temp1
	and     #$01
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index&2) sprite_id -= 0x10;
;
	lda     _temp1
	and     #$02
	beq     L0BEA
	lda     _temp2
	sec
	sbc     #$10
	sta     _temp2
;
; update_list[3+i] = sprite_id;
;
L0BEA:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F71
	inx
	clc
L0F71:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
L0F92:	ldy     #$00
	sta     (ptr1),y
;
; for(i=0; i<32; i++){
;
L0A5A:	lda     _i
	clc
	adc     #$01
	jmp     L0F95
;
; if( (row_index&1) != 0){
;
L0A59:	lda     _temp0
	and     #$01
	jeq     L0BF2
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0BF6
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0BF8:	lda     _i
	cmp     #$08
	jcs     L0C43
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F72
	inx
	clc
L0F72:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F73
	inx
	clc
L0F73:	adc     #$01
	bcc     L0C08
	inx
L0C08:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F74
	inx
	clc
L0F74:	adc     #$01
	bcc     L0F75
	inx
	clc
L0F75:	adc     #$01
	bcc     L0C0E
	inx
L0C0E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BF8
;
; }else if( (row_index&3) == 3 ){
;
L0BF6:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0C10
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0C14:	lda     _i
	cmp     #$08
	jcs     L0C43
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F76
	inx
	clc
L0F76:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F77
	inx
	clc
L0F77:	adc     #$01
	bcc     L0C24
	inx
L0C24:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F78
	inx
	clc
L0F78:	adc     #$01
	bcc     L0F79
	inx
	clc
L0F79:	adc     #$01
	bcc     L0C2A
	inx
L0C2A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0C14
;
; for(i=0;i<8;++i){
;
L0C10:	lda     #$00
	sta     _i
L0C2C:	lda     _i
	cmp     #$08
	jcs     L0C43
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F7A
	inx
	clc
L0F7A:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L0F7B
	inx
	clc
L0F7B:	adc     #$01
	bcc     L0C3C
	inx
L0C3C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F7C
	inx
	clc
L0F7C:	adc     #$01
	bcc     L0F7D
	inx
	clc
L0F7D:	adc     #$01
	bcc     L0C42
	inx
L0C42:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0C2C
;
; current_line[1] = WALL;
;
L0BF2:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0C43:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=180;
;
	lda     #$B4
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=180;
;
	lda     #$B4
	sta     _craft_y+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; craft_types[0] = 0;
;
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_bullet_timers[0] = 0;
;
	lda     #$00
	sta     _craft_bullet_timers
;
; craft_bullet_timers[1] = 0;
;
	sta     _craft_bullet_timers+1
;
; for(i=0; i<18; i++){
;
L0FD5:	sta     _i
	cmp     #$12
	bcs     L0C7F
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0C88
	inx
L0C88:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0C8B
	inx
L0C8B:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0FD5
;
; next_line[0] = next_line[1] = WALL;
;
L0C7F:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; dont_change_bg_pallette = 14;
;
	lda     #$0E
	sta     _dont_change_bg_pallette
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L0FD6:	sta     _i
	cmp     #$06
	bcs     L0CBD
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0FD6
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0CBD:	lda     #$00
L0FD7:	sta     _i
	cmp     #$0C
	bcs     L0CC9
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0FD7
;
; for(i=0; i<15; i++){
;
L0CC9:	lda     #$00
L0FD8:	sta     _i
	cmp     #$0F
	bcs     L0CD5
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0FD3
	inx
	clc
L0FD3:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L0FD4
	inx
	clc
L0FD4:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0FD8
;
; }
;
L0CD5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L0FE6:	sta     _i
	cmp     #$06
	bcc     L0FE7
;
; }
;
	rts
;
; if(craft_types[i] == 255){
;
L0FE7:	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	jne     L0CEB
;
; if(enemy_spawn_scr == 0){
;
	lda     _enemy_spawn_scr
	jne     L0D1D
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L0FDC:	sta     _temp5
;
; while((blocked[0] & (1<<spawn_x))){
;
L0CF7:	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0CF8
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0CF7
	lda     #$00
;
; }                    
;
	jmp     L0FDC
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0CF8:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0D1B
	inx
L0D1B:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; else
;
	jmp     L0D1D
;
; move_dir = sprite_dirs[i];
;
L0CEB:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0D2A
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0D32
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0D2F
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0D2F:	lda     _temp1
	and     #$08
	beq     L0D32
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0D32:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0D35
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0D39
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0D39:	lda     _temp1
	and     #$02
	beq     L0D35
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0D35:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0D43
	lda     _frame
	and     #$07
	bne     L0D43
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0D4B
	inx
L0D4B:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeIn(new_x, new_y) == FALSE){
;
L0D43:	lda     _temp4
	beq     L0D4D
	lda     _temp3
	cmp     #$14
	bcs     L0FDA
	lda     _temp1
	cmp     #$01
	beq     L0D4D
L0FDA:	lda     _temp3
	cmp     #$DD
	bcc     L0FDB
	lda     _temp1
	cmp     #$02
	beq     L0D4D
L0FDB:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0FDE
	inx
L0FDE:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0D2A
	cmp     #$00
	jne     L0D2A
;
; new_x = craft_x[i];
;
L0D4D:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeIn(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D69
	dex
L0D69:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0FDF
	inx
L0FDF:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D64
	cmp     #$00
	bne     L0D64
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeIn(new_x, new_y+1) == FALSE){
;
L0D64:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D75
	inx
L0D75:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0FE0
	inx
L0FE0:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D70
	cmp     #$00
	bne     L0D70
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeIn(new_x-1, new_y) == FALSE){
;
L0D70:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0FE1
	inx
L0FE1:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0D84
	ldx     #$FF
L0D84:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D7C
	cmp     #$00
	bne     L0D7C
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeIn(new_x+1, new_y) == FALSE){
;
L0D7C:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0FE2
	inx
L0FE2:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L0D90
	ldx     #$01
L0D90:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D88
	cmp     #$00
	bne     L0D88
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L0D88:	lda     _temp3
	cmp     #$14
	bcs     L0D94
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L0D94:	lda     _temp3
	cmp     #$DD
	bcc     L0D98
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L0D98:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0D9E
	inx
L0D9E:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L0DA3
	inx
L0DA3:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L0DA5
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0CE5
;
; }else if(move_dir == 0){
;
L0DA5:	lda     _temp1
	bne     L0DAC
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L0FDD
;
; move_dir = rand8()&3;
;
L0DAC:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L0DB5:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0DBA
	inx
L0DBA:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L0DB5
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L0FDD:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0)
;
L0D2A:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L0DC5
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L0FE4:	sta     _j
	cmp     #$0C
	bcs     L0DE7
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0DCB
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0DE3
	inx
L0DE3:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0DE7
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L0DCB:	lda     _j
	clc
	adc     #$01
	jmp     L0FE4
;
; craft_bullet_timers[i]--;
;
L0DC5:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0DEA
	inx
L0DEA:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y-1 || craft_hps[i] == 0){
;
L0DE7:	lda     _temp3
	cmp     #$DC
	bcs     L0DEC
	ldy     _i
	lda     _craft_hps,y
	bne     L0DEB
;
; craft_types[i] = 255;
;
L0DEC:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0CE5
;
; for(j=0; j<2; j++){
;
L0DEB:	lda     #$00
L0FE5:	sta     _j
	cmp     #$02
	jcs     L0D1D
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0DF7
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L0E05
	ldx     #$FF
L0E05:	jsr     tosicmp
	jcc     L0DF7
	jeq     L0DF7
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L0E09
	ldx     #$01
L0E09:	jsr     tosicmp
	bcs     L0DF7
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L0E0C
	ldx     #$FF
L0E0C:	jsr     tosicmp
	bcc     L0DF7
	beq     L0DF7
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L0E0F
	ldx     #$01
L0E0F:	jsr     tosicmp
	bcs     L0DF7
;
; if(craft_hps[j]>2)craft_hps[j]-=2;
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L0E11
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0E17
	inx
L0E17:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; else craft_hps[j] = 0;
;
	jmp     L0E19
L0E11:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_types[i] = 255;
;
L0E19:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; break;
;
	jmp     L0D1D
;
; for(j=0; j<2; j++){
;
L0DF7:	lda     _j
	clc
	adc     #$01
	jmp     L0FE5
;
; craft_x[i] = new_x;
;
L0D1D:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0CE5:	lda     _i
	clc
	adc     #$01
	jmp     L0FE6

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L0FEB
;
; }
;
	rts
;
; alpha = 4;
;
L0FEB:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0E36:	lda     _temp0
	beq     L0E37
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bg_bright(alpha);
;
	jsr     _pal_bg_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E3E:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E36
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E3E
;
; oam_clear();
;
L0E37:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L0FEA:	sta     _i
	cmp     #$07
	bcs     L0E46
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L0FE9
	clc
L0FE9:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0FEA
;
; alpha = 0;
;
L0E46:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0E5A:	lda     _temp0
	cmp     #$04
	bcs     L0E5B
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E62:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E5A
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E62
;
; ppu_wait_frame();
;
L0E5B:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L0E5B
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0E71:	lda     _temp0
	beq     L0E72
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E79:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E71
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E79
;
; oam_clear();
;
L0E72:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0E83:	lda     _temp0
	cmp     #$04
	bcs     L0E84
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E8B:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E83
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E8B
;
; }
;
L0E84:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L0E94:	lda     _scr+1
	bne     L0FEC
	lda     _scr
	cmp     #$F0
	beq     L0E95
;
; ppu_wait_frame();
;
L0FEC:	jsr     _ppu_wait_frame
;
; temp1 = 4;
;
	lda     #$04
	sta     _temp1
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0E94
;
; pal_col(9, 0x3d);
;
L0E95:	lda     #$09
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(10, 0x2d);
;
	lda     #$0A
	jsr     pusha
	lda     #$2D
	jsr     _pal_col
;
; pal_col(11, 0x1d);
;
	lda     #$0B
	jsr     pusha
	lda     #$1D
	jsr     _pal_col
;
; temp5 = 0;
;
	lda     #$00
	sta     _temp5
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=200;
;
	lda     #$C8
	sta     _craft_y+1
;
; craft_types[2] = 255;
;
	lda     #$FF
	sta     _craft_types+2
;
; craft_types[3] = 255;
;
	sta     _craft_types+3
;
; craft_types[4] = 255;
;
	sta     _craft_types+4
;
; craft_types[5] = 255;
;
	sta     _craft_types+5
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; ppu_wait_frame();
;
L0EC8:	jsr     _ppu_wait_frame
;
; oam_clear();
;
	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; tick_crafts();
;
	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; temp1 = 0;
;
	lda     #$00
	sta     _temp1
;
; if(craft_lives[0] && craft_y[0] < 150) temp1 = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L0ED5
	lda     _craft_y
	cmp     #$96
	bcs     L0ED5
	lda     #$96
	sec
	sbc     _craft_y
	sta     _temp1
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L0ED5:	lda     _craft_lives+1
	beq     L0EE7
	lda     _craft_y+1
	cmp     #$96
	bcs     L0EE7
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > temp1){
;
	sec
	sbc     _temp1
	bcc     L0EE7
	beq     L0EE7
;
; temp1 = temp2;
;
	lda     _temp2
	sta     _temp1
;
; scroll_screen();
;
L0EE7:	jsr     _scroll_screen
;
; check_pause();
;
	jsr     _check_pause
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0EC8

.endproc

