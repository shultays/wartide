;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_craft_bullet_y:
	.byte	$FF
	.res	11,$00
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$0F
	.byte	$30
	.byte	$30
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$DC
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$DF
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$DD
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$DE
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L0E9E
	inx
	clc
L0E9E:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L0361:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L038F
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L0370
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L038F
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L038F
L0370:	lda     _temp2
	and     #$20
	beq     L0378
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L038F
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L038F
L0378:	lda     _temp2
	and     #$0F
	beq     L038F
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L0383
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_types[1] = 255;
;
	lda     #$FF
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L0383:	lda     _temp0
	cmp     #$01
	bne     L038F
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L038F:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L0361

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = craft_types[i]?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	beq     L03AC
	lda     #$00
	jmp     L03AE
L03AC:	lda     #$40
L03AE:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L03B6
	cmp     #$02
	beq     L03C2
	cmp     #$04
	beq     L03C8
	cmp     #$08
	beq     L03BC
	jmp     L03B4
;
; craft_sprite += 0x04;
;
L03B6:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EA1
;
; craft_sprite += 0x24;
;
L03BC:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L0EA1
;
; craft_sprite += 0x04;
;
L03C2:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L0EA1
;
; craft_sprite += 0x34;
;
L03C8:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L0EA1:	sta     _temp1
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L03B4:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L03CD
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L0EA4
L03CD:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L03D4
;
; craft_sprite += 0x04;
;
	lda     #$04
L0EA4:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L03D4:	lda     _i
	cmp     #$02
	bcs     L03DA
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L03E2
	lda     #$08
L03E2:	cpx     ptr1+1
	bne     L03DC
	cmp     ptr1
	bne     L03DC
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L03DC
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L03DC:	lda     _temp1
	ora     _i
	sta     _temp1
;
; }else{
;
	jmp     L03F0
;
; craft_sprite_prop |= 2;
;
L03DA:	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L03F0
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L03F0:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0;i<6; i++){
;
	lda     #$00
L0EA5:	sta     _i
	cmp     #$06
	bcs     L040F
;
; if(craft_types[i] == 255) continue;
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	beq     L0410
;
; draw_tank();
;
	jsr     _draw_tank
;
; if(i<2){
;
	lda     _i
	cmp     #$02
	bcs     L0410
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L0422
	lda     _frame
	and     #$10
	bne     L0422
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-20-8:20, 210, 0xA0+craft_hp_sprite, i, spr);
;
L0422:	jsr     decsp4
	lda     _i
	beq     L042F
	lda     #$E4
	jmp     L0431
L042F:	lda     #$14
L0431:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0;i<6; i++){
;
L0410:	lda     _i
	clc
	adc     #$01
	jmp     L0EA5
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L040F:	lda     #$00
	sta     _i
L0438:	lda     _i
	cmp     #$0C
	bcs     L0439
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L043A
;
; spr=oam_spr(craft_bullet_x[i]-2, craft_bullet_y[i]-2, 0x80, i<CRAFT_BULLET_COUNT?i&1:2, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	ldy     #$02
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _i
	cmp     #$08
	bcs     L0450
	lda     _i
	and     #$01
	jmp     L0452
L0450:	lda     #$02
L0452:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L043A:	inc     _i
	jmp     L0438
;
; }
;
L0439:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L047D
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L047D:	lda     $00FB
	and     #$01
	beq     L0484
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0484:	sta     _i
L048F:	lda     _i
	cmp     #$0C
	jcs     L0490
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L0491
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L04A9
	cmp     #$02
	beq     L04BF
	cmp     #$04
	beq     L04CA
	cmp     #$05
	beq     L04CF
	cmp     #$06
	beq     L04C4
	cmp     #$08
	beq     L04B4
	cmp     #$09
	beq     L04AE
	cmp     #$0A
	beq     L04B9
	jmp     L04A7
;
; bullet_y -= 3;
;
L04A9:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L04A7
;
; bullet_y -= 2;
;
L04AE:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L0EB9
;
; bullet_x += 3;
;
L04B4:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L0EB9
;
; bullet_y += 2;
;
L04B9:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L0EB9
;
; bullet_y += 3;
;
L04BF:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L04A7
;
; bullet_y += 2;
;
L04C4:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L0EC9
;
; bullet_x -= 3;
;
L04CA:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L0EB9
;
; bullet_y -= 2;
;
L04CF:	lda     _temp3
	sec
	sbc     #$02
L0EC9:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L0EB9:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L04A7:	lda     _temp0
	cmp     #$0A
	bcc     L04D5
	lda     _temp0
	cmp     #$F5
	bcs     L04D5
	lda     _temp3
	cmp     #$F5
	bcs     L04D5
	lda     _temp3
	cmp     #$0A
	bcs     L04D4
;
; craft_bullet_y[i] = 255;
;
L04D5:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L0491
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L04D4:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0EC3
	inx
L0EC3:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0EBF
	inx
	clc
L0EBF:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L04E7
	cmp     #$00
L04E7:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L04E8
;
; if(has_collision){
;
	lda     _temp4
	jeq     L04EA
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L04ED
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L04ED
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L04EC
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L04ED:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; wall_hit_hp[i&1]--;
;
L04EC:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
	lda     _i
	and     #$01
	sta     ptr1
	tya
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L0503
	lda     _temp2
	jeq     L0503
	lda     _temp2
	cmp     #$0F
	jeq     L0503
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0EC0
	inx
	clc
L0EC0:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L0EC1
	inx
	clc
L0EC1:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L0512
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L0512:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L0518
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L0518:	lda     _temp0
	cmp     #$1E
	bcs     L051C
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L0EC5
;
; row_index_on_ns-=30;
;
L051C:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L0EC5:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L0EC2
	inx
	clc
L0EC2:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L053D
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L053D:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	sty     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L0552
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0556
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB5
	cmp     _temp2
	bne     L0EB5
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0562
	dex
L0562:	cpx     ptr1+1
	bne     L0EB5
	cmp     ptr1
	beq     L0556
L0EB5:	lda     #$00
	jmp     L0564
L0556:	lda     #$01
L0564:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L0552:	lda     _temp2
	beq     L0565
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0569
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0571
	dex
L0571:	cpx     ptr1+1
	bne     L0EB6
	cmp     ptr1
	bne     L0EB6
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB6
	cmp     _temp1
	beq     L0569
L0EB6:	ldx     #$00
	txa
	jmp     L0577
L0569:	lda     #$01
L0577:	asl     a
	bcc     L0EAA
	inx
L0EAA:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L0565:	lda     _temp1
	cmp     #$0E
	bcs     L0578
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L057C
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB7
	cmp     _temp2
	bne     L0EB7
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0588
	inx
L0588:	cpx     ptr1+1
	bne     L0EB7
	cmp     ptr1
	beq     L057C
L0EB7:	ldx     #$00
	txa
	jmp     L058A
L057C:	ldx     #$00
	lda     #$01
L058A:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0578:	lda     _temp2
	cmp     #$0F
	bcs     L058B
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L058F
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L0597
	inx
L0597:	cpx     ptr1+1
	bne     L0EB8
	cmp     ptr1
	bne     L0EB8
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L0EB8
	cmp     _temp1
	beq     L058F
L0EB8:	ldx     #$00
	txa
	jmp     L059D
L058F:	lda     #$01
L059D:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L058B:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L059E
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L0EBB
L059E:	lda     _temp5
	and     #$01
	beq     L05A6
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L0EBB
L05A6:	lda     _temp5
	and     #$02
	beq     L0EBB
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L0EBB:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L05B5
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L0EBC
L05B5:	lda     _temp5
	and     #$01
	beq     L05BD
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L0EBC
L05BD:	lda     _temp5
	and     #$08
	beq     L0EBC
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L0EBC:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L05CC
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L0EBD
L05CC:	lda     _temp5
	and     #$04
	beq     L05D4
;
; update_list[8] = 0xC4;
;
	lda     #$C4
;
; else if(collision_edge_data & 2)
;
	jmp     L0EBD
L05D4:	lda     _temp5
	and     #$02
	beq     L0EBD
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L0EBD:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L05E3
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L0EBE
L05E3:	lda     _temp5
	and     #$04
	beq     L05EB
;
; update_list[9] = 0xC5;
;
	lda     #$C5
;
; else if(collision_edge_data & 8)
;
	jmp     L0EBE
L05EB:	lda     _temp5
	and     #$08
	beq     L0EBE
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L0EBE:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_y[i] = 255;
;
L0503:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L0491
;
; for(j=2; j<6; j++){
;
L04EA:	lda     #$02
L0EC6:	sta     _j
	cmp     #$06
	jcs     L062B
;
; if(craft_types[j] != 255){
;
	ldy     _j
	lda     _craft_types,y
	cmp     #$FF
	jeq     L0606
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0614
	ldx     #$FF
L0614:	jsr     tosicmp
	bcc     L0606
	beq     L0606
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0618
	ldx     #$01
L0618:	jsr     tosicmp
	bcs     L0606
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L061B
	ldx     #$FF
L061B:	jsr     tosicmp
	bcc     L0606
	beq     L0606
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L061E
	ldx     #$01
L061E:	jsr     tosicmp
	bcs     L0606
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L0620
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L0626
	inx
L0626:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_bullet_y[i] = 255;
;
L0620:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; break;
;
	jmp     L062B
;
; for(j=2; j<6; j++){
;
L0606:	lda     _j
	clc
	adc     #$01
	jmp     L0EC6
;
; if(has_collision){
;
L04E8:	lda     _temp4
	beq     L062C
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L0491
;
; for(j=0; j<2; j++){
;
L062C:	sta     _j
	cmp     #$02
	jcs     L062B
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0634
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0644
	ldx     #$FF
L0644:	jsr     tosicmp
	jcc     L0634
	jeq     L0634
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L064A
	ldx     #$01
L064A:	jsr     tosicmp
	bcs     L0634
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L064F
	ldx     #$FF
L064F:	jsr     tosicmp
	bcc     L0634
	beq     L0634
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0654
	ldx     #$01
L0654:	jsr     tosicmp
	bcs     L0634
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L0656
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L065C
	inx
L065C:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_bullet_y[i] = 255;
;
L0656:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(j=0; j<2; j++){
;
L0634:	lda     _j
	clc
	adc     #$01
	jmp     L062C
;
; craft_bullet_x[i] = bullet_x;
;
L062B:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L0491
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0491:	inc     _i
	jmp     L048F
;
; TIMER_END(0);
;
L0490:	lda     $00FB
	and     #$01
	beq     L066F
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L066F:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0679
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L0679:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L0681
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L0681:	sta     _i
L068C:	lda     _i
	cmp     #$02
	jcs     L068D
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L068E
;
; if(craft_hps[i] == 0)
;
	ldy     _i
	lda     _craft_hps,y
	bne     L0698
;
; craft_hps[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L06A2
	inx
L06A2:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; pad=pad_poll(i);
;
L0698:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L06AC
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L06AF
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L06AF
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L06AF
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06D4
;
; sprite_dirs[i] = DIR_LEFT;
;
L06AF:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L0ECA
L06AC:	lda     _temp0
	and     #$80
	beq     L06D4
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L06C6
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L06C6
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L06C6
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L06D4
;
; sprite_dirs[i] = DIR_RIGHT;
;
L06C6:	ldy     _i
	lda     #$08
L0ECA:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L06D4:	lda     _temp0
	and     #$10
	beq     L06D9
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L06DC
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L06DC
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L06DC
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0701
;
; sprite_dirs[i] = DIR_UP;
;
L06DC:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L0ECB
L06D9:	lda     _temp0
	and     #$20
	beq     L0701
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L06F3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L06F3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L06F3
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0701
;
; sprite_dirs[i] = DIR_DOWN;
;
L06F3:	ldy     _i
	lda     #$02
L0ECB:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L0701:	lda     _temp4
	jeq     L0706
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L0711
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L0739
;
; if(pad&PAD_LEFT){
;
L0711:	lda     _temp0
	and     #$40
	jeq     L0715
;
; int_temp0 = (((unsigned int)1)<<(new_x-3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$03
	bcs     L071C
	ldx     #$FF
L071C:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L0726
	inx
L0726:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0722
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L072A
	dex
L072A:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L072B
L0722:	lda     #$01
L072B:	jsr     bnega
	jeq     L0739
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L0ED3
L0715:	lda     _temp0
	and     #$80
	jeq     L0739
;
; int_temp0 = (((unsigned int)1)<<(new_x+3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$03
	bcc     L0735
	ldx     #$01
L0735:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L073F
	inx
L073F:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L073B
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L0743
	dex
L0743:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0744
L073B:	lda     #$01
L0744:	jsr     bnega
	beq     L0739
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L0ED3:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L0739:	lda     _temp4
	cmp     #$01
	beq     L0747
	lda     _frame
	and     #$03
	jeq     L0760
;
; if(pad&PAD_UP){
;
L0747:	lda     _temp0
	and     #$10
	jeq     L074A
;
; if(!((blocked[new_y-3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$03
	bcs     L0751
	dex
L0751:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0ED1
	inx
L0ED1:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L0757
	ldx     #$FF
L0757:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L075B
	ldx     #$01
L075B:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L0760
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L0ED4
L074A:	lda     _temp0
	and     #$20
	jeq     L0760
;
; if(!((blocked[new_y+3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$03
	bcc     L0765
	inx
L0765:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0ED2
	inx
L0ED2:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L076B
	ldx     #$FF
L076B:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L076F
	ldx     #$01
L076F:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L0760
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L0ED4:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L0760:	lda     _temp6
	cmp     #$DD
	bcc     L0771
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L0771:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L0706:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L077F
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0785
	inx
L0785:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L078A
L077F:	lda     _temp0
	and     #$01
	jeq     L078A
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L0ECE:	sta     _j
	cmp     #$08
	bcs     L078A
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L078B
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L0798
	inx
L0798:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L079E
	inx
L079E:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L07A4
	inx
L07A4:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L078A
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L078B:	lda     #$02
	clc
	adc     _j
	jmp     L0ECE
;
; TIMER_TICK(0);
;
L078A:	lda     $00FB
	and     #$01
	beq     L068E
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L068E:	inc     _i
	jmp     L068C
;
; TIMER_END(0);
;
L068D:	lda     $00FB
	and     #$01
	beq     L07B5
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L07B5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(temp0 < 150){
;
	lda     _temp0
	cmp     #$96
	bcc     L0F7B
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L0F7B:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _temp1
	bcc     L07C6
	beq     L07C6
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _temp1
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L0EF2
;
; enemy_spawn_scr = 0;
;
L07C6:	lda     #$00
L0EF2:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L07CD:	lda     _i
	cmp     #$06
	bcs     L07CE
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L07D7
	inx
L07D7:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; if(craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L07CF
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L07CF:	inc     _i
	jmp     L07CD
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07CE:	lda     #$00
	sta     _i
L07E3:	lda     _i
	cmp     #$0C
	bcs     L07E4
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L07E5
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _temp1
	jsr     tosicmp0
	bcc     L07EF
	beq     L07EF
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; }else{
;
	jmp     L07E5
;
; craft_bullet_y[i] += scroll_amount;
;
L07EF:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L07FA
	inx
L07FA:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L07E5:	inc     _i
	jmp     L07E3
;
; scr -= scroll_amount;
;
L07E4:	lda     _temp1
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L07FE
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; row_index = scr>>3;
;
L07FE:	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0804
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0804:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L0F2E
	cmp     _last_row_index
	jeq     L0BFD
;
; last_row_index = row_index;
;
L0F2E:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L080F
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L0F54
;
; row_index-=30;
;
L080F:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L0F54:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0A19
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0854
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0854:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L085B
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L085B:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0862
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0862:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L086A
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L086A:	lda     #$02
L0F31:	sta     _i
	cmp     #$10
	bcs     L0873
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L087C
	inx
L087C:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0882
	inx
L0882:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L0887
	lda     _i
	cmp     #$0F
	bne     L0886
;
; if(rand8() < 30){
;
L0887:	jsr     _rand8
	cmp     #$1E
	bcs     L0874
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L0886
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L0EF4
;
; next_line[i] = GRASS;
;
L0886:	ldy     _i
	lda     #$00
L0EF4:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0874:	lda     _i
	clc
	adc     #$01
	jmp     L0F31
;
; wall_count -= (wall_count>>3);
;
L0873:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(wall_count>0) wall_count--;
;
	lda     _wall_count
	beq     L08A0
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L08A0:	lda     _has_big_wall
	beq     L08A3
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L08A3:	lda     _wall_count
	cmp     #$02
	jcs     L08E7
	jsr     _rand8
	cmp     #$96
	jcs     L08E7
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L08BE
	lda     _temp2
	cmp     #$3C
	bcs     L08B4
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L0EF5
L08B4:	lda     _temp2
	cmp     #$78
	bcs     L08B9
	lda     #$04
;
; else if(random < 180){
;
	jmp     L0EF5
L08B9:	lda     _temp2
	cmp     #$B4
	bcs     L08BE
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L08C4
;
; selected_grid = WALL;
;
L08BE:	lda     #$01
L0EF5:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L08C4:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L08CA
	inx
L08CA:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L08CF
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L08CF:	jsr     _rand8
	and     #$01
	beq     L08D2
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L08D2:	lda     _temp1
	cmp     #$05
	beq     L08D5
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L08D7
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L08D7:	jsr     _rand8
	and     #$01
	beq     L08E4
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; }else{
;
	jmp     L08E4
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L08D5:	lda     _temp3
	cmp     _temp2
	bne     L08E4
	jsr     _rand8
	and     #$01
	beq     L08E2
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L08E4
L08E2:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; for(i=grid_start; i<=grid_end; i++){
;
L08E4:	lda     _temp2
L0F32:	sta     _i
	sec
	sbc     _temp3
	bcc     L08E9
	bne     L08E7
;
; next_line[i] = selected_grid;
;
L08E9:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F32
;
; for(i=2; i<16; i++){
;
L08E7:	lda     #$02
L0F36:	sta     _i
	cmp     #$10
	jcs     L08F4
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L08F5
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L08FF
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else{
;
	jmp     L08F5
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
L08FF:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L090D
	inx
L090D:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L0EDA
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L0EDA:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0912
	dex
L0912:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L0F4C
	inx
	clc
L0F4C:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L0F05
	inx
	clc
L0F05:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L091B
	dex
L091B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L0F43
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L0F43:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0920
	inx
L0920:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0925
	beq     L0925
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0EF7
;
; chance_to_grow = 0;
;
L0925:	lda     #$00
L0EF7:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L0F69
	lda     _temp3
	cmp     #$02
	bcc     L0936
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0936
;
; next_line[i] = WALL;
;
L0F69:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0936:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0942
	inx
L0942:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EDD
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L0EDD:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0946
	dex
L0946:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EDE
	inx
L0EDE:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L0EDF
	inx
L0EDF:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L094E
	dex
L094E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0952
	inx
L0952:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0953
	beq     L0953
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0EF9
;
; chance_to_grow = 0;
;
L0953:	lda     #$00
L0EF9:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L0F6A
	lda     _temp3
	cmp     #$03
	bcc     L0964
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0964
;
; next_line[i] = WATER;
;
L0F6A:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0964:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0970
	inx
L0970:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE0
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L0EE0:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0974
	dex
L0974:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE1
	inx
L0EE1:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L0EE2
	inx
L0EE2:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L097C
	dex
L097C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0980
	inx
L0980:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0981
	beq     L0981
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L0EFB
;
; chance_to_grow = 0;
;
L0981:	lda     #$00
L0EFB:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L0F6B
	lda     _temp3
	cmp     #$03
	bcc     L08F5
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L08F5
;
; next_line[i] = FOREST;
;
L0F6B:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L08F5:	lda     _i
	clc
	adc     #$01
	jmp     L0F36
;
; for(i=2; i<16; i++){
;
L08F4:	lda     #$02
L0F37:	sta     _i
	cmp     #$10
	bcs     L099A
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L099B
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09A8
	dex
L09A8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L09A2
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09AA
	inx
L09AA:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L099B
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L09A2:	lda     _i
	cmp     #$02
	beq     L09AE
	lda     _i
	cmp     #$0F
	bne     L09AD
L09AE:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L0EFD
L09AD:	ldy     _i
	lda     #$05
L0EFD:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L099B:	lda     _i
	clc
	adc     #$01
	jmp     L0F37
;
; for(i=2; i<16; i++){
;
L099A:	lda     #$02
L0F38:	sta     _i
	cmp     #$10
	jcs     L09BA
;
; if(current_line[i] == WALL && 
;
	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L09BB
;
; ((current_line[i-1]&WALL) && (current_line[i+1]&WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09C9
	dex
L09C9:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L09BB
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09CD
	inx
L09CD:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L09BB
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L09BB
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]&WALL) && (next_line[i+1]&WALL) 
;
	beq     L09BB
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09D6
	dex
L09D6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	beq     L09BB
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09D9
	inx
L09D9:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	beq     L09BB
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L09DC
	dex
L09DC:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09BB
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L09DF
	inx
L09DF:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L09BB
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L09BB:	lda     _i
	clc
	adc     #$01
	jmp     L0F38
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L09BA:	lda     _current_line+2
	and     #$01
	beq     L09E6
	lda     _prev_line+2
	and     #$01
	beq     L09E6
	lda     _next_line+2
	and     #$01
	beq     L09E6
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L09E6:	lda     _current_line+15
	and     #$01
	beq     L09F3
	lda     _prev_line+15
	and     #$01
	beq     L09F3
	lda     _next_line+15
	and     #$01
	beq     L09F3
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L09F3:	lda     #$0E
L0F39:	sta     _i
	lda     _i
	jeq     L0A01
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F06
	inx
	clc
L0F06:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A0C
	dex
L0A0C:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F07
	inx
	clc
L0F07:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A11
	dex
L0A11:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L0F39
;
; blocked[0] = 0;
;
L0A01:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L0F3A:	sta     _i
	cmp     #$10
	bcs     L0A19
;
; if(current_line[i+1] != GRASS){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A23
	inx
L0A23:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	beq     L0A1A
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A2B
	inx
L0A2B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0A1A
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L0A1A:	lda     _i
	clc
	adc     #$01
	jmp     L0F3A
;
; for(i=0; i<32; i++){
;
L0A19:	lda     #$00
L0F42:	sta     _i
	cmp     #$20
	jcs     L0A31
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0AD2
	cmp     #$01
	beq     L0A4C
	cmp     #$02
	beq     L0A4C
	cmp     #$03
	jeq     L0AD2
	cmp     #$04
	jeq     L0B35
	cmp     #$05
	jeq     L0AE4
	jmp     L0A32
;
; cell_type = current_line[column_index];
;
L0A4C:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0A51
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0A57
	inx
L0A57:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0A59
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0A61
	inx
L0A61:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F58
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0A59:	lda     _temp3
	clc
	adc     #$01
	bcc     L0A81
	inx
;
; }else{
;
	jmp     L0A81
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0A51:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0A6F
	dex
L0A6F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0A71
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0A79
	dex
L0A79:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F58
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0A71:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0A81
	dex
L0A81:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L0F58:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0A82
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L0F52
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0A82:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L0F52:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0A93
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0A95
;
; update_list[3+i] = (cell_type == WALL?0:0xEC);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F08
	inx
	clc
L0F08:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0A9C
	lda     #$00
	jmp     L0F3E
L0A9C:	lda     #$EC
;
; }else{
;
	jmp     L0F3E
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xCC) + (rand8()&3);
;
L0A95:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L0F09
	inx
	clc
L0F09:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0AA6
	lda     #$66
	jmp     L0AA8
L0AA6:	lda     #$CC
L0AA8:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; }else{
;
	jmp     L0F3E
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0A93:	lda     _temp2
	cmp     #$04
	bcc     L0AAC
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0AAC:	lda     _temp4
	cmp     #$01
	bne     L0AB0
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L0F0A
	inx
	clc
L0F0A:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L0ED7
	inx
L0ED7:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L0F4A
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0AB0:	lda     _i
	clc
	adc     #$03
	bcc     L0F0B
	inx
	clc
L0F0B:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L0ED8
	inx
L0ED8:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L0F4A:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0AC0
	lda     _temp2
	cmp     #$02
	bne     L0ABF
L0AC0:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F0C
	inx
	clc
L0F0C:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0F3E
L0ABF:	lda     _temp2
	jne     L0A32
	lda     _temp4
	cmp     #$01
	jne     L0A32
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F0D
	inx
	clc
L0F0D:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
;
; break;
;
	jmp     L0F3E
;
; random = rand8()&0x3F;
;
L0AD2:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0AD7
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F0E
	inx
	clc
L0F0E:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A32
;
; update_list[3+i] = 0x60 + random;
;
L0AD7:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F0F
	inx
	clc
L0F0F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L0A32
;
; switch(cell_index){
;
L0AE4:	lda     _temp1
;
; }
;
	beq     L0AE9
	cmp     #$01
	beq     L0AFC
	cmp     #$02
	jeq     L0B0F
	cmp     #$03
	jeq     L0B22
	jmp     L0A32
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0AE9:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0AED
	dex
L0AED:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0AEA
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F10
	inx
	clc
L0F10:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
;
; }else{
;
	jmp     L0F3E
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0AEA:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F11
	inx
	clc
L0F11:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L0F3E
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0AFC:	lda     _temp3
	clc
	adc     #$01
	bcc     L0B00
	inx
L0B00:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0AFD
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F12
	inx
	clc
L0F12:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
;
; }else{
;
	jmp     L0F3E
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0AFD:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F13
	inx
	clc
L0F13:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L0F3E
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0B0F:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B13
	dex
L0B13:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B10
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F14
	inx
	clc
L0F14:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
;
; }else{
;
	jmp     L0F3E
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B10:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F15
	inx
	clc
L0F15:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L0F3E
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0B22:	lda     _temp3
	clc
	adc     #$01
	bcc     L0B26
	inx
L0B26:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0B23
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F16
	inx
	clc
L0F16:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
;
; }else{
;
	jmp     L0F3E
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0B23:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F17
	inx
	clc
L0F17:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L0F3E
;
; neighbour_forest_count = 0;
;
L0B35:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0B3C
	cmp     #$01
	beq     L0B4A
	cmp     #$02
	jeq     L0B58
	cmp     #$03
	jeq     L0B66
	jmp     L0B3A
;
; update_list[3+i] = 0x4;
;
L0B3C:	lda     _i
	clc
	adc     #$03
	bcc     L0F18
	inx
	clc
L0F18:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B44
	dex
L0B44:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L0F59
;
; update_list[3+i] = 0x5;
;
L0B4A:	lda     _i
	clc
	adc     #$03
	bcc     L0F19
	inx
	clc
L0F19:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B52
	inx
L0B52:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L0F59
;
; update_list[3+i] = 0x6;
;
L0B58:	lda     _i
	clc
	adc     #$03
	bcc     L0F1A
	inx
	clc
L0F1A:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0B6E
	dex
;
; break;
;
	jmp     L0B6E
;
; update_list[3+i] = 0x7;
;
L0B66:	lda     _i
	clc
	adc     #$03
	bcc     L0F1B
	inx
	clc
L0F1B:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B6E
	inx
L0B6E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L0F59:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0B3A:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0B82
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0B79
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L0F04
L0B79:	lda     _temp2
	cmp     #$01
	bne     L0B7E
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L0F41
;
; cell_can_be_cleared = rand8() < 60;
;
L0B7E:	jsr     _rand8
	cmp     #$3C
L0F41:	jsr     boolult
L0F04:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0B82:	lda     _temp4
	beq     L0B85
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0B89
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1C
	inx
	clc
L0F1C:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A32
;
; update_list[3+i] = 0x60 + random;
;
L0B89:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1D
	inx
	clc
L0F1D:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; }else{
;
	jmp     L0A32
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0B85:	lda     _temp1
	cmp     #$02
	bcs     L0EF1
	lda     _temp2
	cmp     #$02
	bcs     L0EF1
	jsr     _rand8
	and     #$03
	bne     L0B97
L0EF1:	jsr     _rand8
	and     #$03
	bne     L0B96
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0B97:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1E
	inx
	clc
L0F1E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
;
; } else {
;
	jmp     L0F3E
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0B96:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0F1F
	inx
	clc
L0F1F:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
L0F3E:	ldy     #$00
	jsr     staspidx
;
; for(i=0; i<32; i++){
;
L0A32:	lda     _i
	clc
	adc     #$01
	jmp     L0F42
;
; if( (row_index&1) != 0){
;
L0A31:	lda     _temp0
	and     #$01
	jeq     L0BAC
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0BB0
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0BB2:	lda     _i
	cmp     #$08
	jcs     L0BFD
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F20
	inx
	clc
L0F20:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F21
	inx
	clc
L0F21:	adc     #$01
	bcc     L0BC2
	inx
L0BC2:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F22
	inx
	clc
L0F22:	adc     #$01
	bcc     L0F23
	inx
	clc
L0F23:	adc     #$01
	bcc     L0BC8
	inx
L0BC8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BB2
;
; }else if( (row_index&3) == 3 ){
;
L0BB0:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0BCA
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0BCE:	lda     _i
	cmp     #$08
	jcs     L0BFD
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F24
	inx
	clc
L0F24:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F25
	inx
	clc
L0F25:	adc     #$01
	bcc     L0BDE
	inx
L0BDE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F26
	inx
	clc
L0F26:	adc     #$01
	bcc     L0F27
	inx
	clc
L0F27:	adc     #$01
	bcc     L0BE4
	inx
L0BE4:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BCE
;
; for(i=0;i<8;++i){
;
L0BCA:	lda     #$00
	sta     _i
L0BE6:	lda     _i
	cmp     #$08
	jcs     L0BFD
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L0F28
	inx
	clc
L0F28:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L0F29
	inx
	clc
L0F29:	adc     #$01
	bcc     L0BF6
	inx
L0BF6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F2A
	inx
	clc
L0F2A:	adc     #$01
	bcc     L0F2B
	inx
	clc
L0F2B:	adc     #$01
	bcc     L0BFC
	inx
L0BFC:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0BE6
;
; current_line[1] = WALL;
;
L0BAC:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0BFD:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=180;
;
	lda     #$B4
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=180;
;
	lda     #$B4
	sta     _craft_y+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; craft_types[0] = 0;
;
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_bullet_timers[0] = 0;
;
	lda     #$00
	sta     _craft_bullet_timers
;
; craft_bullet_timers[1] = 0;
;
	sta     _craft_bullet_timers+1
;
; for(i=0; i<18; i++){
;
L0F80:	sta     _i
	cmp     #$12
	bcs     L0C39
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0C42
	inx
L0C42:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0C45
	inx
L0C45:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F80
;
; next_line[0] = next_line[1] = WALL;
;
L0C39:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L0F81:	sta     _i
	cmp     #$06
	bcs     L0C75
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F81
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0C75:	lda     #$00
L0F82:	sta     _i
	cmp     #$0C
	bcs     L0C81
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F82
;
; for(i=0; i<15; i++){
;
L0C81:	lda     #$00
L0F83:	sta     _i
	cmp     #$0F
	bcs     L0C8D
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0F7E
	inx
	clc
L0F7E:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L0F7F
	inx
	clc
L0F7F:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F83
;
; }
;
L0C8D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L0F91:	sta     _i
	cmp     #$06
	bcc     L0F92
;
; }
;
	rts
;
; if(craft_types[i] == 255){
;
L0F92:	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	jne     L0CA3
;
; if(enemy_spawn_scr == 0){
;
	lda     _enemy_spawn_scr
	jne     L0CD5
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L0F87:	sta     _temp5
;
; while((blocked[0] & (1<<spawn_x))){
;
L0CAF:	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0CB0
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0CAF
	lda     #$00
;
; }                    
;
	jmp     L0F87
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0CB0:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0CD3
	inx
L0CD3:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; else
;
	jmp     L0CD5
;
; move_dir = sprite_dirs[i];
;
L0CA3:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0CE2
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0CEA
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0CE7
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0CE7:	lda     _temp1
	and     #$08
	beq     L0CEA
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0CEA:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0CED
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0CF1
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0CF1:	lda     _temp1
	and     #$02
	beq     L0CED
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0CED:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0CFB
	lda     _frame
	and     #$07
	bne     L0CFB
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0D03
	inx
L0D03:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeIn(new_x, new_y) == FALSE){
;
L0CFB:	lda     _temp4
	beq     L0D05
	lda     _temp3
	cmp     #$14
	bcs     L0F85
	lda     _temp1
	cmp     #$01
	beq     L0D05
L0F85:	lda     _temp3
	cmp     #$DD
	bcc     L0F86
	lda     _temp1
	cmp     #$02
	beq     L0D05
L0F86:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0F89
	inx
L0F89:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0CE2
	cmp     #$00
	jne     L0CE2
;
; new_x = craft_x[i];
;
L0D05:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeIn(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D21
	dex
L0D21:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0F8A
	inx
L0F8A:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D1C
	cmp     #$00
	bne     L0D1C
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeIn(new_x, new_y+1) == FALSE){
;
L0D1C:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D2D
	inx
L0D2D:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0F8B
	inx
L0F8B:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D28
	cmp     #$00
	bne     L0D28
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeIn(new_x-1, new_y) == FALSE){
;
L0D28:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0F8C
	inx
L0F8C:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0D3C
	ldx     #$FF
L0D3C:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D34
	cmp     #$00
	bne     L0D34
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeIn(new_x+1, new_y) == FALSE){
;
L0D34:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L0F8D
	inx
L0F8D:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L0D48
	ldx     #$01
L0D48:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0D40
	cmp     #$00
	bne     L0D40
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L0D40:	lda     _temp3
	cmp     #$14
	bcs     L0D4C
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L0D4C:	lda     _temp3
	cmp     #$DD
	bcc     L0D50
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L0D50:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0D56
	inx
L0D56:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L0D5B
	inx
L0D5B:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L0D5D
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0C9D
;
; }else if(move_dir == 0){
;
L0D5D:	lda     _temp1
	bne     L0D64
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L0F88
;
; move_dir = rand8()&3;
;
L0D64:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L0D6D:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0D72
	inx
L0D72:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L0D6D
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L0F88:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0)
;
L0CE2:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L0D7D
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L0F8F:	sta     _j
	cmp     #$0C
	bcs     L0D9F
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0D83
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0D9B
	inx
L0D9B:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D9F
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L0D83:	lda     _j
	clc
	adc     #$01
	jmp     L0F8F
;
; craft_bullet_timers[i]--;
;
L0D7D:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0DA2
	inx
L0DA2:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y-1 || craft_hps[i] == 0){
;
L0D9F:	lda     _temp3
	cmp     #$DC
	bcs     L0DA4
	ldy     _i
	lda     _craft_hps,y
	bne     L0DA3
;
; craft_types[i] = 255;
;
L0DA4:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0C9D
;
; for(j=0; j<2; j++){
;
L0DA3:	lda     #$00
L0F90:	sta     _j
	cmp     #$02
	jcs     L0CD5
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0DAF
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L0DBD
	ldx     #$FF
L0DBD:	jsr     tosicmp
	jcc     L0DAF
	jeq     L0DAF
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L0DC1
	ldx     #$01
L0DC1:	jsr     tosicmp
	bcs     L0DAF
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L0DC4
	ldx     #$FF
L0DC4:	jsr     tosicmp
	bcc     L0DAF
	beq     L0DAF
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L0DC7
	ldx     #$01
L0DC7:	jsr     tosicmp
	bcs     L0DAF
;
; if(craft_hps[j]>2)craft_hps[j]-=2;
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L0DC9
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0DCF
	inx
L0DCF:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; else craft_hps[j] = 0;
;
	jmp     L0DD1
L0DC9:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_types[i] = 255;
;
L0DD1:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; break;
;
	jmp     L0CD5
;
; for(j=0; j<2; j++){
;
L0DAF:	lda     _j
	clc
	adc     #$01
	jmp     L0F90
;
; craft_x[i] = new_x;
;
L0CD5:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0C9D:	lda     _i
	clc
	adc     #$01
	jmp     L0F91

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L0F96
;
; }
;
	rts
;
; alpha = 4;
;
L0F96:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0DEE:	lda     _temp0
	beq     L0DEF
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0DF6:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0DEE
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0DF6
;
; oam_clear();
;
L0DEF:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L0F95:	sta     _i
	cmp     #$07
	bcs     L0DFE
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L0F94
	clc
L0F94:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L0F95
;
; alpha = 0;
;
L0DFE:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0E12:	lda     _temp0
	cmp     #$04
	bcs     L0E13
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E1A:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E12
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E1A
;
; ppu_wait_frame();
;
L0E13:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L0E13
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0E29:	lda     _temp0
	beq     L0E2A
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E31:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E29
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E31
;
; oam_clear();
;
L0E2A:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0E3B:	lda     _temp0
	cmp     #$04
	bcs     L0E3C
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0E43:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0E3B
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0E43
;
; }
;
L0E3C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L0E4C:	lda     _scr+1
	bne     L0F97
	lda     _scr
	cmp     #$F0
	beq     L0E4D
;
; ppu_wait_frame();
;
L0F97:	jsr     _ppu_wait_frame
;
; temp1 = 4;
;
	lda     #$04
	sta     _temp1
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0E4C
;
; temp5 = 0;
;
L0E4D:	lda     #$00
	sta     _temp5
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=200;
;
	lda     #$C8
	sta     _craft_y+1
;
; craft_types[2] = 255;
;
	lda     #$FF
	sta     _craft_types+2
;
; craft_types[3] = 255;
;
	sta     _craft_types+3
;
; craft_types[4] = 255;
;
	sta     _craft_types+4
;
; craft_types[5] = 255;
;
	sta     _craft_types+5
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; ppu_wait_frame();
;
L0E77:	jsr     _ppu_wait_frame
;
; oam_clear();
;
	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; tick_crafts();
;
	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; temp1 = 0;
;
	lda     #$00
	sta     _temp1
;
; if(craft_lives[0] && craft_y[0] < 150) temp1 = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L0E84
	lda     _craft_y
	cmp     #$96
	bcs     L0E84
	lda     #$96
	sec
	sbc     _craft_y
	sta     _temp1
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L0E84:	lda     _craft_lives+1
	beq     L0E96
	lda     _craft_y+1
	cmp     #$96
	bcs     L0E96
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > temp1){
;
	sec
	sbc     _temp1
	bcc     L0E96
	beq     L0E96
;
; temp1 = temp2;
;
	lda     _temp2
	sta     _temp1
;
; scroll_screen();
;
L0E96:	jsr     _scroll_screen
;
; check_pause();
;
	jsr     _check_pause
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L0E77

.endproc

