;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_nmi
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
_used_temps:
	.byte	$00
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_craft_bullet_y:
	.byte	$FF
	.res	11,$00
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$0F
	.byte	$30
	.byte	$30
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$DC
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$DF
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$DD
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$DE
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L1068
	inx
	clc
L1068:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; CHECK_FREE(0);
;
	lda     _used_temps
	and     #$01
	beq     L035E
L0361:	jsr     _ppu_wait_nmi
	jmp     L0361
L035E:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; CHECK_FREE(1);
;
	and     #$02
	beq     L0369
L036C:	jsr     _ppu_wait_nmi
	jmp     L036C
L0369:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; CHECK_FREE(2);
;
	and     #$04
	beq     L0374
L0377:	jsr     _ppu_wait_nmi
	jmp     L0377
L0374:	lda     _used_temps
	ora     #$04
	sta     _used_temps
;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L0383:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L03B1
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L0392
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L03B1
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L03B1
L0392:	lda     _temp2
	and     #$20
	beq     L039A
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L03B1
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L03B1
L039A:	lda     _temp2
	and     #$0F
	beq     L03B1
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L03A5
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_types[1] = 255;
;
	lda     #$FF
	sta     _craft_types+1
;
; break;
;
	jmp     L0384
;
; }else if(selected_item == 1){
;
L03A5:	lda     _temp0
	cmp     #$01
	bne     L03B1
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	jmp     L0384
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L03B1:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L0383
;
; SET_FREE(2);
;
L0384:	lda     _used_temps
	and     #$FB
	sta     _used_temps
;
; SET_FREE(1);
;
	and     #$FD
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; CHECK_FREE(0);
;
	lda     _used_temps
	and     #$01
	beq     L03D3
L03D6:	jsr     _ppu_wait_nmi
	jmp     L03D6
L03D3:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; CHECK_FREE(1);
;
	and     #$02
	beq     L03DE
L03E1:	jsr     _ppu_wait_nmi
	jmp     L03E1
L03DE:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; craft_sprite = craft_types[i]?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	beq     L03ED
	lda     #$00
	jmp     L03EF
L03ED:	lda     #$40
L03EF:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L03F7
	cmp     #$02
	beq     L0403
	cmp     #$04
	beq     L0409
	cmp     #$08
	beq     L03FD
	jmp     L03F5
;
; craft_sprite += 0x04;
;
L03F7:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L106B
;
; craft_sprite += 0x24;
;
L03FD:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L106B
;
; craft_sprite += 0x04;
;
L0403:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L106B
;
; craft_sprite += 0x34;
;
L0409:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L106B:	sta     _temp1
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L03F5:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L040E
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L106E
L040E:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L0415
;
; craft_sprite += 0x04;
;
	lda     #$04
L106E:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L0415:	lda     _i
	cmp     #$02
	bcs     L041B
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L0423
	lda     #$08
L0423:	cpx     ptr1+1
	bne     L041D
	cmp     ptr1
	bne     L041D
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L041D
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L041D:	lda     _temp1
	ora     _i
	sta     _temp1
;
; }else{
;
	jmp     L0431
;
; craft_sprite_prop |= 2;
;
L041B:	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L0431
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L0431:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp1
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; SET_FREE(1);
;
	lda     _used_temps
	and     #$FD
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0;i<6; i++){
;
	lda     #$00
L106F:	sta     _i
	cmp     #$06
	jcs     L0456
;
; if(craft_types[i] == 255) continue;
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	beq     L0457
;
; draw_tank();
;
	jsr     _draw_tank
;
; if(i<2){
;
	lda     _i
	cmp     #$02
	bcs     L0457
;
; CHECK_FREE(1);
;
	lda     _used_temps
	and     #$02
	beq     L0464
L0467:	jsr     _ppu_wait_nmi
	jmp     L0467
L0464:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L0474
	lda     _frame
	and     #$10
	bne     L0474
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-20-8:20, 210, 0xA0+craft_hp_sprite, i, spr);
;
L0474:	jsr     decsp4
	lda     _i
	beq     L0481
	lda     #$E4
	jmp     L0483
L0481:	lda     #$14
L0483:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; SET_FREE(1);
;
	lda     _used_temps
	and     #$FD
	sta     _used_temps
;
; for(i=0;i<6; i++){
;
L0457:	lda     _i
	clc
	adc     #$01
	jmp     L106F
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0456:	lda     #$00
	sta     _i
L048D:	lda     _i
	cmp     #$0C
	bcs     L048E
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L048F
;
; spr=oam_spr(craft_bullet_x[i]-2, craft_bullet_y[i]-2, 0x80, i<CRAFT_BULLET_COUNT?i&1:2, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	ldy     #$02
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _i
	cmp     #$08
	bcs     L04A5
	lda     _i
	and     #$01
	jmp     L04A7
L04A5:	lda     #$02
L04A7:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L048F:	inc     _i
	jmp     L048D
;
; }
;
L048E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L04D2
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L04D2:	lda     $00FB
	and     #$01
	beq     L04D9
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; CHECK_FREE(1);
;
L04D9:	lda     _used_temps
	and     #$02
	beq     L04E4
L04E7:	jsr     _ppu_wait_nmi
	jmp     L04E7
L04E4:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; CHECK_FREE(2);
;
	and     #$04
	beq     L04EF
L04F2:	jsr     _ppu_wait_nmi
	jmp     L04F2
L04EF:	lda     _used_temps
	ora     #$04
	sta     _used_temps
;
; CHECK_FREE(4);
;
	and     #$10
	beq     L04FA
L04FD:	jsr     _ppu_wait_nmi
	jmp     L04FD
L04FA:	lda     _used_temps
	ora     #$10
	sta     _used_temps
;
; CHECK_FREE(6);
;
	and     #$40
	beq     L0505
L0508:	jsr     _ppu_wait_nmi
	jmp     L0508
L0505:	lda     _used_temps
	ora     #$40
	sta     _used_temps
;
; CHECK_FREE(3);
;
	and     #$08
	beq     L0510
L0513:	jsr     _ppu_wait_nmi
	jmp     L0513
L0510:	lda     _used_temps
	ora     #$08
	sta     _used_temps
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
	lda     #$00
	sta     _i
L051B:	lda     _i
	cmp     #$0C
	jcs     L051C
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	jeq     L051D
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L0535
	cmp     #$02
	beq     L054B
	cmp     #$04
	beq     L0556
	cmp     #$05
	beq     L055B
	cmp     #$06
	beq     L0550
	cmp     #$08
	beq     L0540
	cmp     #$09
	beq     L053A
	cmp     #$0A
	beq     L0545
	jmp     L0533
;
; bullet_y -= 3;
;
L0535:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L0533
;
; bullet_y -= 2;
;
L053A:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L1083
;
; bullet_x += 3;
;
L0540:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L1083
;
; bullet_y += 2;
;
L0545:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L1083
;
; bullet_y += 3;
;
L054B:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L0533
;
; bullet_y += 2;
;
L0550:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L1093
;
; bullet_x -= 3;
;
L0556:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L1083
;
; bullet_y -= 2;
;
L055B:	lda     _temp3
	sec
	sbc     #$02
L1093:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L1083:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L0533:	lda     _temp0
	cmp     #$0A
	bcc     L0561
	lda     _temp0
	cmp     #$F5
	bcs     L0561
	lda     _temp3
	cmp     #$F5
	bcs     L0561
	lda     _temp3
	cmp     #$0A
	bcs     L0560
;
; craft_bullet_y[i] = 255;
;
L0561:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L051D
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L0560:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L108D
	inx
L108D:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1089
	inx
	clc
L1089:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L0573
;
; if(has_collision){
;
	lda     _temp4
	jeq     L0575
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L0578
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L0578
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L0577
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L0578:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	tya
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	tya
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	tya
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; wall_hit_hp[i&1]--;
;
L0577:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	lda     #$00
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
	lda     _i
	and     #$01
	sta     ptr1
	tya
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L058E
	lda     _temp2
	jeq     L058E
	lda     _temp2
	cmp     #$0F
	jeq     L058E
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L108A
	inx
	clc
L108A:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L108B
	inx
	clc
L108B:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; CHECK_FREE(0);
;
	lda     _used_temps
	and     #$01
	beq     L059B
L059E:	jsr     _ppu_wait_nmi
	jmp     L059E
L059B:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; CHECK_FREE(5);
;
	and     #$20
	beq     L05A6
L05A9:	jsr     _ppu_wait_nmi
	jmp     L05A9
L05A6:	lda     _used_temps
	ora     #$20
	sta     _used_temps
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L05B3
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L05B3:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L05B9
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L05B9:	lda     _temp0
	cmp     #$1E
	bcs     L05BD
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L108F
;
; row_index_on_ns-=30;
;
L05BD:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L108F:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L108C
	inx
	clc
L108C:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L05DE
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L05DE:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	sty     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L05F3
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L05F7
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L107F
	cmp     _temp2
	bne     L107F
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0603
	dex
L0603:	cpx     ptr1+1
	bne     L107F
	cmp     ptr1
	beq     L05F7
L107F:	lda     #$00
	jmp     L0605
L05F7:	lda     #$01
L0605:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L05F3:	lda     _temp2
	beq     L0606
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L060A
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0612
	dex
L0612:	cpx     ptr1+1
	bne     L1080
	cmp     ptr1
	bne     L1080
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L1080
	cmp     _temp1
	beq     L060A
L1080:	ldx     #$00
	txa
	jmp     L0618
L060A:	lda     #$01
L0618:	asl     a
	bcc     L1074
	inx
L1074:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L0606:	lda     _temp1
	cmp     #$0E
	bcs     L0619
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L061D
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L1081
	cmp     _temp2
	bne     L1081
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0629
	inx
L0629:	cpx     ptr1+1
	bne     L1081
	cmp     ptr1
	beq     L061D
L1081:	ldx     #$00
	txa
	jmp     L062B
L061D:	ldx     #$00
	lda     #$01
L062B:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0619:	lda     _temp2
	cmp     #$0F
	bcs     L062C
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0630
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L0638
	inx
L0638:	cpx     ptr1+1
	bne     L1082
	cmp     ptr1
	bne     L1082
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L1082
	cmp     _temp1
	beq     L0630
L1082:	ldx     #$00
	txa
	jmp     L063E
L0630:	lda     #$01
L063E:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L062C:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L063F
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L1085
L063F:	lda     _temp5
	and     #$01
	beq     L0647
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L1085
L0647:	lda     _temp5
	and     #$02
	beq     L1085
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L1085:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L0656
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L1086
L0656:	lda     _temp5
	and     #$01
	beq     L065E
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L1086
L065E:	lda     _temp5
	and     #$08
	beq     L1086
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L1086:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L066D
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L1087
L066D:	lda     _temp5
	and     #$04
	beq     L0675
;
; update_list[8] = 0xC4;
;
	lda     #$C4
;
; else if(collision_edge_data & 2)
;
	jmp     L1087
L0675:	lda     _temp5
	and     #$02
	beq     L1087
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L1087:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L0684
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L1088
L0684:	lda     _temp5
	and     #$04
	beq     L068C
;
; update_list[9] = 0xC5;
;
	lda     #$C5
;
; else if(collision_edge_data & 8)
;
	jmp     L1088
L068C:	lda     _temp5
	and     #$08
	beq     L1088
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L1088:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; SET_FREE(5);
;
	lda     _used_temps
	and     #$DF
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; craft_bullet_y[i] = 255;
;
L058E:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L051D
;
; for(j=2; j<6; j++){
;
L0575:	lda     #$02
L1090:	sta     _j
	cmp     #$06
	jcs     L06D2
;
; if(craft_types[j] != 255){
;
	ldy     _j
	lda     _craft_types,y
	cmp     #$FF
	jeq     L06AD
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L06BB
	ldx     #$FF
L06BB:	jsr     tosicmp
	bcc     L06AD
	beq     L06AD
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L06BF
	ldx     #$01
L06BF:	jsr     tosicmp
	bcs     L06AD
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L06C2
	ldx     #$FF
L06C2:	jsr     tosicmp
	bcc     L06AD
	beq     L06AD
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L06C5
	ldx     #$01
L06C5:	jsr     tosicmp
	bcs     L06AD
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L06C7
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L06CD
	inx
L06CD:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_bullet_y[i] = 255;
;
L06C7:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; break;
;
	jmp     L06D2
;
; for(j=2; j<6; j++){
;
L06AD:	lda     _j
	clc
	adc     #$01
	jmp     L1090
;
; if(has_collision){
;
L0573:	lda     _temp4
	beq     L06D3
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; continue;
;
	jmp     L051D
;
; for(j=0; j<2; j++){
;
L06D3:	sta     _j
	cmp     #$02
	jcs     L06D2
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L06DB
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L06EB
	ldx     #$FF
L06EB:	jsr     tosicmp
	jcc     L06DB
	jeq     L06DB
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L06F1
	ldx     #$01
L06F1:	jsr     tosicmp
	bcs     L06DB
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L06F6
	ldx     #$FF
L06F6:	jsr     tosicmp
	bcc     L06DB
	beq     L06DB
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L06FB
	ldx     #$01
L06FB:	jsr     tosicmp
	bcs     L06DB
;
; if(craft_hps[i])craft_hps[i]--;
;
	ldy     _i
	lda     _craft_hps,y
	beq     L06FD
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _i
	bcc     L0703
	inx
L0703:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_bullet_y[i] = 255;
;
L06FD:	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(j=0; j<2; j++){
;
L06DB:	lda     _j
	clc
	adc     #$01
	jmp     L06D3
;
; craft_bullet_x[i] = bullet_x;
;
L06D2:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L051D
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L051D:	inc     _i
	jmp     L051B
;
; SET_FREE(6);
;
L051C:	lda     _used_temps
	and     #$BF
	sta     _used_temps
;
; SET_FREE(3);
;
	and     #$F7
	sta     _used_temps
;
; SET_FREE(4);
;
	and     #$EF
	sta     _used_temps
;
; SET_FREE(2);
;
	and     #$FB
	sta     _used_temps
;
; SET_FREE(1);
;
	and     #$FD
	sta     _used_temps
;
; TIMER_END(0);
;
	lda     $00FB
	and     #$01
	beq     L0725
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L0725:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L072F
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L072F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L0737
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; CHECK_FREE(4);
;
L0737:	lda     _used_temps
	and     #$10
	beq     L0742
L0745:	jsr     _ppu_wait_nmi
	jmp     L0745
L0742:	lda     _used_temps
	ora     #$10
	sta     _used_temps
;
; CHECK_FREE(0);
;
	and     #$01
	beq     L074D
L0750:	jsr     _ppu_wait_nmi
	jmp     L0750
L074D:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; CHECK_FREE(5);
;
	and     #$20
	beq     L0758
L075B:	jsr     _ppu_wait_nmi
	jmp     L075B
L0758:	lda     _used_temps
	ora     #$20
	sta     _used_temps
;
; CHECK_FREE(6);
;
	and     #$40
	beq     L0763
L0766:	jsr     _ppu_wait_nmi
	jmp     L0766
L0763:	lda     _used_temps
	ora     #$40
	sta     _used_temps
;
; CHECK_FREE(2);
;
	and     #$04
	beq     L076E
L0771:	jsr     _ppu_wait_nmi
	jmp     L0771
L076E:	lda     _used_temps
	ora     #$04
	sta     _used_temps
;
; for(i=0;i<2;++i){
;
	lda     #$00
	sta     _i
L0779:	lda     _i
	cmp     #$02
	jcs     L077A
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L077B
;
; if(craft_hps[i] == 0)
;
	ldy     _i
	lda     _craft_hps,y
	bne     L0785
;
; craft_hps[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L078F
	inx
L078F:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; pad=pad_poll(i);
;
L0785:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L0799
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L079C
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L079C
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L079C
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07C1
;
; sprite_dirs[i] = DIR_LEFT;
;
L079C:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L1094
L0799:	lda     _temp0
	and     #$80
	beq     L07C1
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L07B3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L07B3
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L07B3
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07C1
;
; sprite_dirs[i] = DIR_RIGHT;
;
L07B3:	ldy     _i
	lda     #$08
L1094:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L07C1:	lda     _temp0
	and     #$10
	beq     L07C6
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L07C9
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L07C9
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L07C9
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07EE
;
; sprite_dirs[i] = DIR_UP;
;
L07C9:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L1095
L07C6:	lda     _temp0
	and     #$20
	beq     L07EE
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L07E0
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L07E0
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L07E0
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L07EE
;
; sprite_dirs[i] = DIR_DOWN;
;
L07E0:	ldy     _i
	lda     #$02
L1095:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L07EE:	lda     _temp4
	jeq     L07F3
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L07FE
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L0826
;
; if(pad&PAD_LEFT){
;
L07FE:	lda     _temp0
	and     #$40
	jeq     L0802
;
; int_temp0 = (((unsigned int)1)<<(new_x-3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$03
	bcs     L0809
	ldx     #$FF
L0809:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L0813
	inx
L0813:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L080F
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L0817
	dex
L0817:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0818
L080F:	lda     #$01
L0818:	jsr     bnega
	jeq     L0826
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L109D
L0802:	lda     _temp0
	and     #$80
	jeq     L0826
;
; int_temp0 = (((unsigned int)1)<<(new_x+3>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$03
	bcc     L0822
	ldx     #$01
L0822:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+2)>>4] & int_temp0) || (blocked[(collision_temp_2-2)>>4]& int_temp0))){
;
	clc
	adc     #$02
	bcc     L082C
	inx
L082C:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0828
	tax
	lda     _temp2
	sec
	sbc     #$02
	bcs     L0830
	dex
L0830:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0831
L0828:	lda     #$01
L0831:	jsr     bnega
	beq     L0826
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L109D:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L0826:	lda     _temp4
	cmp     #$01
	beq     L0834
	lda     _frame
	and     #$03
	jeq     L084D
;
; if(pad&PAD_UP){
;
L0834:	lda     _temp0
	and     #$10
	jeq     L0837
;
; if(!((blocked[new_y-3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$03
	bcs     L083E
	dex
L083E:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L109B
	inx
L109B:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L0844
	ldx     #$FF
L0844:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L0848
	ldx     #$01
L0848:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L084D
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L109E
L0837:	lda     _temp0
	and     #$20
	jeq     L084D
;
; if(!((blocked[new_y+3+(scr&15)>>4] & ((1<<((new_x-2)>>4))|(1<<((new_x+2)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$03
	bcc     L0852
	inx
L0852:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L109C
	inx
L109C:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$02
	bcs     L0858
	ldx     #$FF
L0858:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$02
	bcc     L085C
	ldx     #$01
L085C:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L084D
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L109E:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L084D:	lda     _temp6
	cmp     #$DD
	bcc     L085E
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L085E:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L07F3:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L086C
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0872
	inx
L0872:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L0877
L086C:	lda     _temp0
	and     #$01
	jeq     L0877
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L1098:	sta     _j
	cmp     #$08
	bcs     L0877
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0878
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L0885
	inx
L0885:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L088B
	inx
L088B:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L0891
	inx
L0891:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L0877
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L0878:	lda     #$02
	clc
	adc     _j
	jmp     L1098
;
; TIMER_TICK(0);
;
L0877:	lda     $00FB
	and     #$01
	beq     L077B
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L077B:	inc     _i
	jmp     L0779
;
; SET_FREE(2);
;
L077A:	lda     _used_temps
	and     #$FB
	sta     _used_temps
;
; SET_FREE(6);
;
	and     #$BF
	sta     _used_temps
;
; SET_FREE(5);
;
	and     #$DF
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; SET_FREE(4);
;
	and     #$EF
	sta     _used_temps
;
; TIMER_END(0);
;
	lda     $00FB
	and     #$01
	beq     L08B1
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L08B1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(temp0 < 150){
;
	lda     _temp0
	cmp     #$96
	bcc     L1145
;
; }
;
	rts
;
; CHECK_FREE(1);
;
L1145:	lda     _used_temps
	and     #$02
	beq     L08BE
L08C1:	jsr     _ppu_wait_nmi
	jmp     L08C1
L08BE:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; CHECK_FREE(2);
;
	and     #$04
	beq     L08C9
L08CC:	jsr     _ppu_wait_nmi
	jmp     L08CC
L08C9:	lda     _used_temps
	ora     #$04
	sta     _used_temps
;
; CHECK_FREE(3);
;
	and     #$08
	beq     L08D4
L08D7:	jsr     _ppu_wait_nmi
	jmp     L08D7
L08D4:	lda     _used_temps
	ora     #$08
	sta     _used_temps
;
; CHECK_FREE(4);
;
	and     #$10
	beq     L08DF
L08E2:	jsr     _ppu_wait_nmi
	jmp     L08E2
L08DF:	lda     _used_temps
	ora     #$10
	sta     _used_temps
;
; CHECK_FREE(5);
;
	and     #$20
	beq     L08EA
L08ED:	jsr     _ppu_wait_nmi
	jmp     L08ED
L08EA:	lda     _used_temps
	ora     #$20
	sta     _used_temps
;
; CHECK_FREE(0);
;
	and     #$01
	beq     L08F5
L08F8:	jsr     _ppu_wait_nmi
	jmp     L08F8
L08F5:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _temp1
	bcc     L0904
	beq     L0904
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _temp1
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L10BC
;
; enemy_spawn_scr = 0;
;
L0904:	lda     #$00
L10BC:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L090B:	lda     _i
	cmp     #$06
	bcs     L090C
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0915
	inx
L0915:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; if(craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L090D
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L090D:	inc     _i
	jmp     L090B
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L090C:	lda     #$00
	sta     _i
L0921:	lda     _i
	cmp     #$0C
	bcs     L0922
;
; if(craft_bullet_y[i] == 255) continue;
;
	ldy     _i
	lda     _craft_bullet_y,y
	cmp     #$FF
	beq     L0923
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _temp1
	jsr     tosicmp0
	bcc     L092D
	beq     L092D
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; }else{
;
	jmp     L0923
;
; craft_bullet_y[i] += scroll_amount;
;
L092D:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L0938
	inx
L0938:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp1
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0923:	inc     _i
	jmp     L0921
;
; scr -= scroll_amount;
;
L0922:	lda     _temp1
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L093C
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; row_index = scr>>3;
;
L093C:	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0942
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0942:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L10F8
	cmp     _last_row_index
	jeq     L0D3B
;
; last_row_index = row_index;
;
L10F8:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L094D
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L111E
;
; row_index-=30;
;
L094D:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L111E:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0B57
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0992
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0992:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0999
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0999:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L09A0
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L09A0:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L09A8
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L09A8:	lda     #$02
L10FB:	sta     _i
	cmp     #$10
	bcs     L09B1
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L09BA
	inx
L09BA:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L09C0
	inx
L09C0:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L09C5
	lda     _i
	cmp     #$0F
	bne     L09C4
;
; if(rand8() < 30){
;
L09C5:	jsr     _rand8
	cmp     #$1E
	bcs     L09B2
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L09C4
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L10BE
;
; next_line[i] = GRASS;
;
L09C4:	ldy     _i
	lda     #$00
L10BE:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L09B2:	lda     _i
	clc
	adc     #$01
	jmp     L10FB
;
; wall_count -= (wall_count>>3);
;
L09B1:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(wall_count>0) wall_count--;
;
	lda     _wall_count
	beq     L09DE
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L09DE:	lda     _has_big_wall
	beq     L09E1
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L09E1:	lda     _wall_count
	cmp     #$02
	jcs     L0A25
	jsr     _rand8
	cmp     #$96
	jcs     L0A25
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L09FC
	lda     _temp2
	cmp     #$3C
	bcs     L09F2
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L10BF
L09F2:	lda     _temp2
	cmp     #$78
	bcs     L09F7
	lda     #$04
;
; else if(random < 180){
;
	jmp     L10BF
L09F7:	lda     _temp2
	cmp     #$B4
	bcs     L09FC
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L0A02
;
; selected_grid = WALL;
;
L09FC:	lda     #$01
L10BF:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L0A02:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L0A08
	inx
L0A08:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L0A0D
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0A0D:	jsr     _rand8
	and     #$01
	beq     L0A10
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L0A10:	lda     _temp1
	cmp     #$05
	beq     L0A13
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L0A15
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0A15:	jsr     _rand8
	and     #$01
	beq     L0A22
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; }else{
;
	jmp     L0A22
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L0A13:	lda     _temp3
	cmp     _temp2
	bne     L0A22
	jsr     _rand8
	and     #$01
	beq     L0A20
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L0A22
L0A20:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; for(i=grid_start; i<=grid_end; i++){
;
L0A22:	lda     _temp2
L10FC:	sta     _i
	sec
	sbc     _temp3
	bcc     L0A27
	bne     L0A25
;
; next_line[i] = selected_grid;
;
L0A27:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L10FC
;
; for(i=2; i<16; i++){
;
L0A25:	lda     #$02
L1100:	sta     _i
	cmp     #$10
	jcs     L0A32
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L0A33
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L0A3D
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else{
;
	jmp     L0A33
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
L0A3D:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A4B
	inx
L0A4B:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L10A4
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L10A4:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A50
	dex
L0A50:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L1116
	inx
	clc
L1116:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L10CF
	inx
	clc
L10CF:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A59
	dex
L0A59:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L110D
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L110D:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A5E
	inx
L0A5E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0A63
	beq     L0A63
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L10C1
;
; chance_to_grow = 0;
;
L0A63:	lda     #$00
L10C1:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L1133
	lda     _temp3
	cmp     #$02
	bcc     L0A74
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0A74
;
; next_line[i] = WALL;
;
L1133:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0A74:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A80
	inx
L0A80:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L10A7
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L10A7:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A84
	dex
L0A84:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L10A8
	inx
L10A8:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L10A9
	inx
L10A9:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0A8C
	dex
L0A8C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0A90
	inx
L0A90:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0A91
	beq     L0A91
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L10C3
;
; chance_to_grow = 0;
;
L0A91:	lda     #$00
L10C3:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L1134
	lda     _temp3
	cmp     #$03
	bcc     L0AA2
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0AA2
;
; next_line[i] = WATER;
;
L1134:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0AA2:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0AAE
	inx
L0AAE:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L10AA
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L10AA:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0AB2
	dex
L0AB2:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L10AB
	inx
L10AB:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L10AC
	inx
L10AC:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0ABA
	dex
L0ABA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0ABE
	inx
L0ABE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0ABF
	beq     L0ABF
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L10C5
;
; chance_to_grow = 0;
;
L0ABF:	lda     #$00
L10C5:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L1135
	lda     _temp3
	cmp     #$03
	bcc     L0A33
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0A33
;
; next_line[i] = FOREST;
;
L1135:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L0A33:	lda     _i
	clc
	adc     #$01
	jmp     L1100
;
; for(i=2; i<16; i++){
;
L0A32:	lda     #$02
L1101:	sta     _i
	cmp     #$10
	bcs     L0AD8
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0AD9
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0AE6
	dex
L0AE6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0AE0
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0AE8
	inx
L0AE8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0AD9
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L0AE0:	lda     _i
	cmp     #$02
	beq     L0AEC
	lda     _i
	cmp     #$0F
	bne     L0AEB
L0AEC:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L10C7
L0AEB:	ldy     _i
	lda     #$05
L10C7:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0AD9:	lda     _i
	clc
	adc     #$01
	jmp     L1101
;
; for(i=2; i<16; i++){
;
L0AD8:	lda     #$02
L1102:	sta     _i
	cmp     #$10
	jcs     L0AF8
;
; if(current_line[i] == WALL && 
;
	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L0AF9
;
; ((current_line[i-1]&WALL) && (current_line[i+1]&WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B07
	dex
L0B07:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L0AF9
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B0B
	inx
L0B0B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jeq     L0AF9
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L0AF9
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]&WALL) && (next_line[i+1]&WALL) 
;
	beq     L0AF9
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B14
	dex
L0B14:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	beq     L0AF9
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B17
	inx
L0B17:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	beq     L0AF9
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B1A
	dex
L0B1A:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0AF9
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B1D
	inx
L0B1D:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0AF9
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L0AF9:	lda     _i
	clc
	adc     #$01
	jmp     L1102
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L0AF8:	lda     _current_line+2
	and     #$01
	beq     L0B24
	lda     _prev_line+2
	and     #$01
	beq     L0B24
	lda     _next_line+2
	and     #$01
	beq     L0B24
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0B24:	lda     _current_line+15
	and     #$01
	beq     L0B31
	lda     _prev_line+15
	and     #$01
	beq     L0B31
	lda     _next_line+15
	and     #$01
	beq     L0B31
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0B31:	lda     #$0E
L1103:	sta     _i
	lda     _i
	jeq     L0B3F
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10D0
	inx
	clc
L10D0:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B4A
	dex
L0B4A:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10D1
	inx
	clc
L10D1:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B4F
	dex
L0B4F:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L1103
;
; blocked[0] = 0;
;
L0B3F:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L1104:	sta     _i
	cmp     #$10
	bcs     L0B57
;
; if(current_line[i+1] != GRASS){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B61
	inx
L0B61:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	beq     L0B58
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B69
	inx
L0B69:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0B58
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; for(i=0; i<16; i++){
;
L0B58:	lda     _i
	clc
	adc     #$01
	jmp     L1104
;
; for(i=0; i<32; i++){
;
L0B57:	lda     #$00
L110C:	sta     _i
	cmp     #$20
	jcs     L0B6F
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0C10
	cmp     #$01
	beq     L0B8A
	cmp     #$02
	beq     L0B8A
	cmp     #$03
	jeq     L0C10
	cmp     #$04
	jeq     L0C73
	cmp     #$05
	jeq     L0C22
	jmp     L0B70
;
; cell_type = current_line[column_index];
;
L0B8A:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0B8F
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B95
	inx
L0B95:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0B97
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0B9F
	inx
L0B9F:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1122
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0B97:	lda     _temp3
	clc
	adc     #$01
	bcc     L0BBF
	inx
;
; }else{
;
	jmp     L0BBF
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0B8F:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BAD
	dex
L0BAD:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0BAF
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BB7
	dex
L0BB7:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1122
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0BAF:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0BBF
	dex
L0BBF:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L1122:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0BC0
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L111C
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0BC0:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L111C:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0BD1
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0BD3
;
; update_list[3+i] = (cell_type == WALL?0:0xEC);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10D2
	inx
	clc
L10D2:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0BDA
	lda     #$00
	jmp     L1108
L0BDA:	lda     #$EC
;
; }else{
;
	jmp     L1108
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xCC) + (rand8()&3);
;
L0BD3:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L10D3
	inx
	clc
L10D3:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0BE4
	lda     #$66
	jmp     L0BE6
L0BE4:	lda     #$CC
L0BE6:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; }else{
;
	jmp     L1108
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0BD1:	lda     _temp2
	cmp     #$04
	bcc     L0BEA
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0BEA:	lda     _temp4
	cmp     #$01
	bne     L0BEE
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L10D4
	inx
	clc
L10D4:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L10A1
	inx
L10A1:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L1114
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0BEE:	lda     _i
	clc
	adc     #$03
	bcc     L10D5
	inx
	clc
L10D5:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L10A2
	inx
L10A2:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L1114:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0BFE
	lda     _temp2
	cmp     #$02
	bne     L0BFD
L0BFE:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10D6
	inx
	clc
L10D6:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L1108
L0BFD:	lda     _temp2
	jne     L0B70
	lda     _temp4
	cmp     #$01
	jne     L0B70
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10D7
	inx
	clc
L10D7:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
;
; break;
;
	jmp     L1108
;
; random = rand8()&0x3F;
;
L0C10:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0C15
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10D8
	inx
	clc
L10D8:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0B70
;
; update_list[3+i] = 0x60 + random;
;
L0C15:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10D9
	inx
	clc
L10D9:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L0B70
;
; switch(cell_index){
;
L0C22:	lda     _temp1
;
; }
;
	beq     L0C27
	cmp     #$01
	beq     L0C3A
	cmp     #$02
	jeq     L0C4D
	cmp     #$03
	jeq     L0C60
	jmp     L0B70
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0C27:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C2B
	dex
L0C2B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C28
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DA
	inx
	clc
L10DA:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
;
; }else{
;
	jmp     L1108
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0C28:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DB
	inx
	clc
L10DB:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L1108
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0C3A:	lda     _temp3
	clc
	adc     #$01
	bcc     L0C3E
	inx
L0C3E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C3B
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DC
	inx
	clc
L10DC:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
;
; }else{
;
	jmp     L1108
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0C3B:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DD
	inx
	clc
L10DD:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
;
; break;
;
	jmp     L1108
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0C4D:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C51
	dex
L0C51:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C4E
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DE
	inx
	clc
L10DE:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
;
; }else{
;
	jmp     L1108
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0C4E:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10DF
	inx
	clc
L10DF:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L1108
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0C60:	lda     _temp3
	clc
	adc     #$01
	bcc     L0C64
	inx
L0C64:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C61
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E0
	inx
	clc
L10E0:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
;
; }else{
;
	jmp     L1108
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0C61:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E1
	inx
	clc
L10E1:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
;
; break;
;
	jmp     L1108
;
; neighbour_forest_count = 0;
;
L0C73:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0C7A
	cmp     #$01
	beq     L0C88
	cmp     #$02
	jeq     L0C96
	cmp     #$03
	jeq     L0CA4
	jmp     L0C78
;
; update_list[3+i] = 0x4;
;
L0C7A:	lda     _i
	clc
	adc     #$03
	bcc     L10E2
	inx
	clc
L10E2:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0C82
	dex
L0C82:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L1123
;
; update_list[3+i] = 0x5;
;
L0C88:	lda     _i
	clc
	adc     #$03
	bcc     L10E3
	inx
	clc
L10E3:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0C90
	inx
L0C90:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L1123
;
; update_list[3+i] = 0x6;
;
L0C96:	lda     _i
	clc
	adc     #$03
	bcc     L10E4
	inx
	clc
L10E4:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0CAC
	dex
;
; break;
;
	jmp     L0CAC
;
; update_list[3+i] = 0x7;
;
L0CA4:	lda     _i
	clc
	adc     #$03
	bcc     L10E5
	inx
	clc
L10E5:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0CAC
	inx
L0CAC:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L1123:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0C78:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0CC0
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0CB7
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L10CE
L0CB7:	lda     _temp2
	cmp     #$01
	bne     L0CBC
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L110B
;
; cell_can_be_cleared = rand8() < 60;
;
L0CBC:	jsr     _rand8
	cmp     #$3C
L110B:	jsr     boolult
L10CE:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0CC0:	lda     _temp4
	beq     L0CC3
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0CC7
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E6
	inx
	clc
L10E6:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; }else{
;
	jmp     L0B70
;
; update_list[3+i] = 0x60 + random;
;
L0CC7:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E7
	inx
	clc
L10E7:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
	ldy     #$00
	sta     (ptr1),y
;
; }else{
;
	jmp     L0B70
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0CC3:	lda     _temp1
	cmp     #$02
	bcs     L10BB
	lda     _temp2
	cmp     #$02
	bcs     L10BB
	jsr     _rand8
	and     #$03
	bne     L0CD5
L10BB:	jsr     _rand8
	and     #$03
	bne     L0CD4
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0CD5:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E8
	inx
	clc
L10E8:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
;
; } else {
;
	jmp     L1108
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0CD4:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L10E9
	inx
	clc
L10E9:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
L1108:	ldy     #$00
	jsr     staspidx
;
; for(i=0; i<32; i++){
;
L0B70:	lda     _i
	clc
	adc     #$01
	jmp     L110C
;
; if( (row_index&1) != 0){
;
L0B6F:	lda     _temp0
	and     #$01
	jeq     L0CEA
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0CEE
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0CF0:	lda     _i
	cmp     #$08
	jcs     L0D3B
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10EA
	inx
	clc
L10EA:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10EB
	inx
	clc
L10EB:	adc     #$01
	bcc     L0D00
	inx
L0D00:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10EC
	inx
	clc
L10EC:	adc     #$01
	bcc     L10ED
	inx
	clc
L10ED:	adc     #$01
	bcc     L0D06
	inx
L0D06:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0CF0
;
; }else if( (row_index&3) == 3 ){
;
L0CEE:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0D08
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0D0C:	lda     _i
	cmp     #$08
	jcs     L0D3B
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10EE
	inx
	clc
L10EE:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10EF
	inx
	clc
L10EF:	adc     #$01
	bcc     L0D1C
	inx
L0D1C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10F0
	inx
	clc
L10F0:	adc     #$01
	bcc     L10F1
	inx
	clc
L10F1:	adc     #$01
	bcc     L0D22
	inx
L0D22:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0D0C
;
; for(i=0;i<8;++i){
;
L0D08:	lda     #$00
	sta     _i
L0D24:	lda     _i
	cmp     #$08
	jcs     L0D3B
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]] | (bg_colors[current_line[1 + (i<<1)+1]]<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L10F2
	inx
	clc
L10F2:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L10F3
	inx
	clc
L10F3:	adc     #$01
	bcc     L0D34
	inx
L0D34:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L10F4
	inx
	clc
L10F4:	adc     #$01
	bcc     L10F5
	inx
	clc
L10F5:	adc     #$01
	bcc     L0D3A
	inx
L0D3A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0D24
;
; current_line[1] = WALL;
;
L0CEA:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; SET_FREE(5);
;
L0D3B:	lda     _used_temps
	and     #$DF
	sta     _used_temps
;
; SET_FREE(4);
;
	and     #$EF
	sta     _used_temps
;
; SET_FREE(3);
;
	and     #$F7
	sta     _used_temps
;
; SET_FREE(2);
;
	and     #$FB
	sta     _used_temps
;
; SET_FREE(1);
;
	and     #$FD
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; scroll(0, scr);
;
	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=180;
;
	lda     #$B4
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=180;
;
	lda     #$B4
	sta     _craft_y+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; craft_types[0] = 0;
;
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_bullet_timers[0] = 0;
;
	lda     #$00
	sta     _craft_bullet_timers
;
; craft_bullet_timers[1] = 0;
;
	sta     _craft_bullet_timers+1
;
; for(i=0; i<18; i++){
;
L114A:	sta     _i
	cmp     #$12
	bcs     L0D89
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0D92
	inx
L0D92:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0D95
	inx
L0D95:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L114A
;
; next_line[0] = next_line[1] = WALL;
;
L0D89:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; used_temps = 0;
;
	sta     _used_temps
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L114B:	sta     _i
	cmp     #$06
	bcs     L0DC7
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L114B
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0DC7:	lda     #$00
L114C:	sta     _i
	cmp     #$0C
	bcs     L0DD3
;
; craft_bullet_y[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_bullet_y,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L114C
;
; for(i=0; i<15; i++){
;
L0DD3:	lda     #$00
L114D:	sta     _i
	cmp     #$0F
	bcs     L0DDF
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1148
	inx
	clc
L1148:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L1149
	inx
	clc
L1149:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L114D
;
; }
;
L0DDF:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; CHECK_FREE(5);
;
	lda     _used_temps
	and     #$20
	beq     L0DED
L0DF0:	jsr     _ppu_wait_nmi
	jmp     L0DF0
L0DED:	lda     _used_temps
	ora     #$20
	sta     _used_temps
;
; CHECK_FREE(1);
;
	and     #$02
	beq     L0DF8
L0DFB:	jsr     _ppu_wait_nmi
	jmp     L0DFB
L0DF8:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; CHECK_FREE(2);
;
	and     #$04
	beq     L0E03
L0E06:	jsr     _ppu_wait_nmi
	jmp     L0E06
L0E03:	lda     _used_temps
	ora     #$04
	sta     _used_temps
;
; CHECK_FREE(3);
;
	and     #$08
	beq     L0E0E
L0E11:	jsr     _ppu_wait_nmi
	jmp     L0E11
L0E0E:	lda     _used_temps
	ora     #$08
	sta     _used_temps
;
; CHECK_FREE(4);
;
	and     #$10
	beq     L0E19
L0E1C:	jsr     _ppu_wait_nmi
	jmp     L0E1C
L0E19:	lda     _used_temps
	ora     #$10
	sta     _used_temps
;
; for(i=2; i<6; i++){
;
	lda     #$02
L115B:	sta     _i
	cmp     #$06
	jcs     L0E25
;
; if(craft_types[i] == 255){
;
	ldy     _i
	lda     _craft_types,y
	cmp     #$FF
	jne     L0E2C
;
; if(enemy_spawn_scr == 0){
;
	lda     _enemy_spawn_scr
	jne     L0E5E
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L1151:	sta     _temp5
;
; while((blocked[0] & (1<<spawn_x))){
;
L0E38:	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0E39
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0E38
	lda     #$00
;
; }                    
;
	jmp     L1151
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0E39:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0E5C
	inx
L0E5C:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; else
;
	jmp     L0E5E
;
; move_dir = sprite_dirs[i];
;
L0E2C:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0E6B
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0E73
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0E70
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0E70:	lda     _temp1
	and     #$08
	beq     L0E73
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0E73:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0E76
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0E7A
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0E7A:	lda     _temp1
	and     #$02
	beq     L0E76
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0E76:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0E84
	lda     _frame
	and     #$07
	bne     L0E84
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0E8C
	inx
L0E8C:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeIn(new_x, new_y) == FALSE){
;
L0E84:	lda     _temp4
	beq     L0E8E
	lda     _temp3
	cmp     #$14
	bcs     L114F
	lda     _temp1
	cmp     #$01
	beq     L0E8E
L114F:	lda     _temp3
	cmp     #$DD
	bcc     L1150
	lda     _temp1
	cmp     #$02
	beq     L0E8E
L1150:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1153
	inx
L1153:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0E6B
	cmp     #$00
	jne     L0E6B
;
; new_x = craft_x[i];
;
L0E8E:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeIn(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0EAA
	dex
L0EAA:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1154
	inx
L1154:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EA5
	cmp     #$00
	bne     L0EA5
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeIn(new_x, new_y+1) == FALSE){
;
L0EA5:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0EB6
	inx
L0EB6:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1155
	inx
L1155:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EB1
	cmp     #$00
	bne     L0EB1
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeIn(new_x-1, new_y) == FALSE){
;
L0EB1:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1156
	inx
L1156:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L0EC5
	ldx     #$FF
L0EC5:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EBD
	cmp     #$00
	bne     L0EBD
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeIn(new_x+1, new_y) == FALSE){
;
L0EBD:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1157
	inx
L1157:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L0ED1
	ldx     #$01
L0ED1:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0EC9
	cmp     #$00
	bne     L0EC9
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L0EC9:	lda     _temp3
	cmp     #$14
	bcs     L0ED5
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L0ED5:	lda     _temp3
	cmp     #$DD
	bcc     L0ED9
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L0ED9:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0EDF
	inx
L0EDF:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L0EE4
	inx
L0EE4:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L0EE6
;
; craft_types[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0E26
;
; }else if(move_dir == 0){
;
L0EE6:	lda     _temp1
	bne     L0EED
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L1152
;
; move_dir = rand8()&3;
;
L0EED:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L0EF6:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L0EFB
	inx
L0EFB:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L0EF6
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L1152:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0)
;
L0E6B:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L0F06
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L1159:	sta     _j
	cmp     #$0C
	bcs     L0F28
;
; if(craft_bullet_y[j] != 255) continue;
;
	ldy     _j
	lda     _craft_bullet_y,y
	cmp     #$FF
	bne     L0F0C
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F24
	inx
L0F24:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0F28
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L0F0C:	lda     _j
	clc
	adc     #$01
	jmp     L1159
;
; craft_bullet_timers[i]--;
;
L0F06:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F2B
	inx
L0F2B:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y-1 || craft_hps[i] == 0){
;
L0F28:	lda     _temp3
	cmp     #$DC
	bcs     L0F2D
	ldy     _i
	lda     _craft_hps,y
	bne     L0F2C
;
; craft_types[i] = 255;
;
L0F2D:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; continue;
;
	jmp     L0E26
;
; for(j=0; j<2; j++){
;
L0F2C:	lda     #$00
L115A:	sta     _j
	cmp     #$02
	jcs     L0E5E
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0F38
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L0F46
	ldx     #$FF
L0F46:	jsr     tosicmp
	jcc     L0F38
	jeq     L0F38
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L0F4A
	ldx     #$01
L0F4A:	jsr     tosicmp
	bcs     L0F38
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L0F4D
	ldx     #$FF
L0F4D:	jsr     tosicmp
	bcc     L0F38
	beq     L0F38
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L0F50
	ldx     #$01
L0F50:	jsr     tosicmp
	bcs     L0F38
;
; if(craft_hps[j]>2)craft_hps[j]-=2;
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L0F52
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L0F58
	inx
L0F58:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; else craft_hps[j] = 0;
;
	jmp     L0F5A
L0F52:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_types[i] = 255;
;
L0F5A:	ldy     _i
	lda     #$FF
	sta     _craft_types,y
;
; break;
;
	jmp     L0E5E
;
; for(j=0; j<2; j++){
;
L0F38:	lda     _j
	clc
	adc     #$01
	jmp     L115A
;
; craft_x[i] = new_x;
;
L0E5E:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0E26:	lda     _i
	clc
	adc     #$01
	jmp     L115B
;
; SET_FREE(4);
;
L0E25:	lda     _used_temps
	and     #$EF
	sta     _used_temps
;
; SET_FREE(3);
;
	and     #$F7
	sta     _used_temps
;
; SET_FREE(2);
;
	and     #$FB
	sta     _used_temps
;
; SET_FREE(1);
;
	and     #$FD
	sta     _used_temps
;
; SET_FREE(5);
;
	and     #$DF
	sta     _used_temps
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; CHECK_FREE(0);
;
	lda     _used_temps
	and     #$01
	beq     L0F7F
L0F82:	jsr     _ppu_wait_nmi
	jmp     L0F82
L0F7F:	lda     _used_temps
	ora     #$01
	sta     _used_temps
;
; CHECK_FREE(1);
;
	and     #$02
	beq     L0F8A
L0F8D:	jsr     _ppu_wait_nmi
	jmp     L0F8D
L0F8A:	lda     _used_temps
	ora     #$02
	sta     _used_temps
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	jeq     L0FEA
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0F9C:	lda     _temp0
	beq     L0F9D
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FA4:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0F9C
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FA4
;
; oam_clear();
;
L0F9D:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L115E:	sta     _i
	cmp     #$07
	bcs     L0FAC
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L115D
	clc
L115D:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L115E
;
; alpha = 0;
;
L0FAC:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0FC0:	lda     _temp0
	cmp     #$04
	bcs     L0FC1
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FC8:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0FC0
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FC8
;
; ppu_wait_frame();
;
L0FC1:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L0FC1
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L0FD7:	lda     _temp0
	beq     L0FD8
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FDF:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0FD7
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FDF
;
; oam_clear();
;
L0FD8:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L0FE9:	lda     _temp0
	cmp     #$04
	bcs     L0FEA
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L0FF1:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L0FE9
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L0FF1
;
; SET_FREE(1);
;
L0FEA:	lda     _used_temps
	and     #$FD
	sta     _used_temps
;
; SET_FREE(0);
;
	and     #$FE
	sta     _used_temps
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L1000:	lda     _scr+1
	bne     L115F
	lda     _scr
	cmp     #$F0
	beq     L1001
;
; ppu_wait_frame();
;
L115F:	jsr     _ppu_wait_frame
;
; temp1 = 4;
;
	lda     #$04
	sta     _temp1
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L1000
;
; temp5 = 0;
;
L1001:	lda     #$00
	sta     _temp5
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; craft_y[1]=200;
;
	lda     #$C8
	sta     _craft_y+1
;
; craft_types[2] = 255;
;
	lda     #$FF
	sta     _craft_types+2
;
; craft_types[3] = 255;
;
	sta     _craft_types+3
;
; craft_types[4] = 255;
;
	sta     _craft_types+4
;
; craft_types[5] = 255;
;
	sta     _craft_types+5
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; ppu_wait_frame();
;
L102B:	jsr     _ppu_wait_frame
;
; oam_clear();
;
	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; spr=oam_spr(20, wall_count, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$14
	ldy     #$03
	sta     (sp),y
	lda     _wall_count
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(40, has_big_wall, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$28
	ldy     #$03
	sta     (sp),y
	lda     _has_big_wall
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(60, wall_hit_y[0]&15, 0x79, 1, spr);
;
	jsr     decsp4
	lda     #$3C
	ldy     #$03
	sta     (sp),y
	lda     _wall_hit_y
	and     #$0F
	dey
	sta     (sp),y
	lda     #$79
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; tick_crafts();
;
	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; temp1 = 0;
;
	lda     #$00
	sta     _temp1
;
; if(craft_lives[0] && craft_y[0] < 150) temp1 = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L104E
	lda     _craft_y
	cmp     #$96
	bcs     L104E
	lda     #$96
	sec
	sbc     _craft_y
	sta     _temp1
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L104E:	lda     _craft_lives+1
	beq     L1060
	lda     _craft_y+1
	cmp     #$96
	bcs     L1060
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > temp1){
;
	sec
	sbc     _temp1
	bcc     L1060
	beq     L1060
;
; temp1 = temp2;
;
	lda     _temp2
	sta     _temp1
;
; scroll_screen();
;
L1060:	jsr     _scroll_screen
;
; check_pause();
;
	jsr     _check_pause
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L102B

.endproc

