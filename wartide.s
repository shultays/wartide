;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_col
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
_enemy_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$36
	.byte	$26
	.byte	$16
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$E0
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$E3
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$E1
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$E2
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_small_exp_0:
	.byte	$F8
	.byte	$F8
	.byte	$8C
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8E
	.byte	$03
	.byte	$80
_small_exp_1:
	.byte	$F8
	.byte	$F8
	.byte	$88
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8A
	.byte	$03
	.byte	$80
_small_exp_2:
	.byte	$F8
	.byte	$F8
	.byte	$84
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$86
	.byte	$03
	.byte	$80
_big_exp_0:
	.byte	$EF
	.byte	$F1
	.byte	$90
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$92
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$94
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$96
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B0
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$B2
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$B4
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$B6
	.byte	$03
	.byte	$80
_big_exp_1:
	.byte	$EF
	.byte	$F1
	.byte	$98
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$9A
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$9C
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$9E
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B8
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$BA
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$BC
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$BE
	.byte	$03
	.byte	$80
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_y:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_dont_change_bg_pallette:
	.res	1,$00
_building_shift:
	.res	1,$00
_sprite_to_bg_x:
	.res	1,$00
_sprite_to_bg_y:
	.res	1,$00
_building_index_x:
	.res	1,$00
_building_index_y:
	.res	1,$00
_scroll_amount:
	.res	1,$00
_is_update_dirty:
	.res	1,$00
_explosion_x:
	.res	1,$00
_explosion_y:
	.res	1,$00
_explosion_state:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L11CC
	inx
	clc
L11CC:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L03C2:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L03F3
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L03D1
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L03F3
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L03F3
L03D1:	lda     _temp2
	and     #$20
	beq     L03D9
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L03F3
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L03F3
L03D9:	lda     _temp2
	and     #$0F
	beq     L03F3
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L03E4
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_hps[1] = 0;
;
	sta     _craft_hps+1
;
; craft_types[1] = 0;
;
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L03E4:	lda     _temp0
	cmp     #$01
	bne     L03F3
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L03F3:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L03C2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = (craft_types[i]&0xF)?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	and     #$0F
	beq     L0411
	lda     #$00
	jmp     L0413
L0411:	lda     #$40
L0413:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L041B
	cmp     #$02
	beq     L0427
	cmp     #$04
	beq     L042D
	cmp     #$08
	beq     L0421
	jmp     L0419
;
; craft_sprite += 0x04;
;
L041B:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L11CF
;
; craft_sprite += 0x24;
;
L0421:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L11CF
;
; craft_sprite += 0x04;
;
L0427:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L11CF
;
; craft_sprite += 0x34;
;
L042D:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L11CF:	sta     _temp3
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L0419:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L0432
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L11D2
L0432:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L0439
;
; craft_sprite += 0x04;
;
	lda     #$04
L11D2:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L0439:	lda     _i
	cmp     #$02
	bcs     L043F
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L0447
	lda     #$08
L0447:	cpx     ptr1+1
	bne     L0441
	cmp     ptr1
	bne     L0441
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L0441
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L0441:	lda     _temp3
	ora     _i
	sta     _temp3
;
; }else{
;
	jmp     L0455
;
; craft_sprite_prop |= 2;
;
L043F:	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L0455
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; if(sprite_to_bg_y != 255){
;
L0455:	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L045B
;
; if(craft_x[i] > sprite_to_bg_x && craft_x[i] < sprite_to_bg_x + 48 &&
;
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     _sprite_to_bg_x
	bcc     L045B
	beq     L045B
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$30
	bcc     L0462
	ldx     #$01
L0462:	jsr     tosicmp
	bcs     L045B
;
; craft_y[i] < sprite_to_bg_y && craft_y[i] > sprite_to_bg_y - 48){
;
	ldy     _i
	lda     _craft_y,y
	cmp     _sprite_to_bg_y
	bcs     L045B
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$30
	bcs     L0467
	ldx     #$FF
L0467:	jsr     tosicmp
	beq     L045B
	bcc     L045B
;
; craft_sprite_prop |= (1<<5);
;
	lda     _temp3
	ora     #$20
	sta     _temp3
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L045B:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; if(explosion_state){
;
	lda     _explosion_state
	jeq     L04AD
;
; if(explosion_state >= 14){
;
	lda     _explosion_state
	cmp     #$0E
	bcc     L0488
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_0);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_0)
	ldx     #>(_small_exp_0)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(explosion_state >= 12){
;
	jmp     L04AD
L0488:	lda     _explosion_state
	cmp     #$0C
	bcc     L0492
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_1);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_1)
	ldx     #>(_small_exp_1)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(explosion_state >= 9){
;
	jmp     L04AD
L0492:	lda     _explosion_state
	cmp     #$09
	bcc     L049C
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, small_exp_2);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_2)
	ldx     #>(_small_exp_2)
;
; }else if(explosion_state >= 5){
;
	jmp     L11D8
L049C:	lda     _explosion_state
	cmp     #$05
	bcc     L04A5
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, big_exp_0);
;
	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_0)
	ldx     #>(_big_exp_0)
;
; }else{
;
	jmp     L11D8
;
; spr = oam_meta_spr(explosion_x, explosion_y, spr, big_exp_1);
;
L04A5:	jsr     decsp3
	lda     _explosion_x
	ldy     #$02
	sta     (sp),y
	lda     _explosion_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_1)
	ldx     #>(_big_exp_1)
L11D8:	jsr     _oam_meta_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04AD:	lda     #$00
	sta     _i
L04B4:	lda     _i
	cmp     #$0C
	jcs     L04B5
;
; bullet_flag = craft_bullet_flag[i];
;
	ldy     _i
	lda     _craft_bullet_flag,y
	sta     _temp5
;
; if(bullet_flag){
;
	lda     _temp5
	jeq     L04B6
;
; bullet_y = craft_bullet_y[i]-2;
;
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	sta     _temp4
;
; bullet_x = craft_bullet_x[i]-2;
;
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	sta     _temp3
;
; if(bullet_flag&0xF){
;
	lda     _temp5
	and     #$0F
	jeq     L04CC
;
; props = i<CRAFT_BULLET_COUNT?i&1:2;
;
	lda     _i
	cmp     #$08
	bcs     L04D0
	lda     _i
	and     #$01
	jmp     L04D2
L04D0:	lda     #$02
L04D2:	sta     _temp2
;
; if(sprite_to_bg_y != 255){
;
	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L04D6
;
; if(bullet_x >= sprite_to_bg_x+8 && bullet_x < sprite_to_bg_x + 32 &&
;
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$08
	bcc     L04D8
	ldx     #$01
L04D8:	jsr     tosicmp
	bcc     L04D6
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$20
	bcc     L04DA
	ldx     #$01
L04DA:	jsr     tosicmp
	bcs     L04D6
;
; bullet_y <= sprite_to_bg_y-8 && bullet_y > sprite_to_bg_y - 32){
;
	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$08
	bcs     L04DB
	ldx     #$FF
L04DB:	jsr     tosicmp
	beq     L11D7
	bcs     L04D6
L11D7:	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$20
	bcs     L04DC
	ldx     #$FF
L04DC:	jsr     tosicmp
	beq     L04D6
	bcc     L04D6
;
; props |= (1<<5);
;
	lda     _temp2
	ora     #$20
	sta     _temp2
;
; spr=oam_spr(bullet_x, bullet_y, 0x80, props, spr);
;
L04D6:	jsr     decsp4
	lda     _temp3
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _temp2
;
; }else{
;
	jmp     L11DE
;
; if(bullet_flag>0x70) bullet_flag = 8;
;
L04CC:	lda     _temp5
	cmp     #$71
	bcc     L04E9
	lda     #$08
;
; else if(bullet_flag>0x30) bullet_flag = 4;
;
	jmp     L11D5
L04E9:	lda     _temp5
	cmp     #$31
	bcc     L04EE
	lda     #$04
;
; else bullet_flag = 0;
;
	jmp     L11D5
L04EE:	lda     #$00
L11D5:	sta     _temp5
;
; spr=oam_spr(bullet_x-6, bullet_y-6, 0x84+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	sec
	sbc     #$06
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$84
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(bullet_x+2, bullet_y-6, 0x86+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	clc
	adc     #$02
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$86
	dey
	sta     (sp),y
	lda     #$03
L11DE:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L04B6:	inc     _i
	jmp     L04B4
;
; for(i=5;i!=255;i--){
;
L04B5:	lda     #$05
L11DB:	sta     _i
	cmp     #$FF
	bne     L11DF
;
; }
;
	rts
;
; if(i<2 && craft_lives[i] == 0) continue;
;
L11DF:	lda     _i
	cmp     #$02
	bcs     L0511
	ldy     _i
	lda     _craft_lives,y
	jeq     L050B
;
; if(craft_hps[i]){
;
L0511:	ldy     _i
	lda     _craft_hps,y
	beq     L0517
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_bullet_timers[i]){
;
	jmp     L055A
L0517:	ldy     _i
	lda     _craft_bullet_timers,y
	jeq     L055A
;
; craft_hp_sprite = craft_bullet_timers[i];
;
	ldy     _i
	lda     _craft_bullet_timers,y
	sta     _temp1
;
; if(craft_hp_sprite >= 14){
;
	cmp     #$0E
	bcc     L0525
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_0)
	ldx     #>(_small_exp_0)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 12){
;
	jmp     L055A
L0525:	lda     _temp1
	cmp     #$0C
	bcc     L0533
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_1);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_1)
	ldx     #>(_small_exp_1)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 9){
;
	jmp     L055A
L0533:	lda     _temp1
	cmp     #$09
	bcc     L0541
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_2);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_2)
	ldx     #>(_small_exp_2)
;
; }else if(craft_hp_sprite >= 5){
;
	jmp     L11DA
L0541:	lda     _temp1
	cmp     #$05
	bcc     L054E
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_0)
	ldx     #>(_big_exp_0)
;
; }else{
;
	jmp     L11DA
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_1);
;
L054E:	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_1)
	ldx     #>(_big_exp_1)
L11DA:	jsr     _oam_meta_spr
	sta     _spr
;
; if(i<2){
;
L055A:	lda     _i
	cmp     #$02
	bcs     L050B
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L056C
	lda     _frame
	and     #$10
	bne     L056C
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-16-8:16, 210, 0xA0+craft_hp_sprite, i, spr);
;
L056C:	jsr     decsp4
	lda     _i
	beq     L0579
	lda     #$E8
	jmp     L057B
L0579:	lda     #$10
L057B:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=5;i!=255;i--){
;
L050B:	lda     _i
	sec
	sbc     #$01
	jmp     L11DB

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L05AA
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L05AA:	lda     $00FB
	and     #$01
	beq     L05B1
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L05B1:	sta     _i
L05BC:	lda     _i
	cmp     #$0C
	jcs     L05BD
;
; if(craft_bullet_flag[i]&0xF0){
;
	ldy     _i
	lda     _craft_bullet_flag,y
	and     #$F0
	beq     L05C4
;
; craft_bullet_flag[i]-=0x10;
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _i
	bcc     L05CA
	inx
L05CA:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$10
	sta     (ptr1),y
;
; continue;
;
	jmp     L05BE
;
; if(!craft_bullet_flag[i]) continue;
;
L05C4:	ldy     _i
	lda     _craft_bullet_flag,y
	jeq     L05BE
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L05DE
	cmp     #$02
	beq     L05F4
	cmp     #$04
	beq     L05FF
	cmp     #$05
	beq     L0604
	cmp     #$06
	beq     L05F9
	cmp     #$08
	beq     L05E9
	cmp     #$09
	beq     L05E3
	cmp     #$0A
	beq     L05EE
	jmp     L05DC
;
; bullet_y -= 3;
;
L05DE:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L05DC
;
; bullet_y -= 2;
;
L05E3:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11FE
;
; bullet_x += 3;
;
L05E9:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L11FE
;
; bullet_y += 2;
;
L05EE:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11FE
;
; bullet_y += 3;
;
L05F4:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L05DC
;
; bullet_y += 2;
;
L05F9:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L1218
;
; bullet_x -= 3;
;
L05FF:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L11FE
;
; bullet_y -= 2;
;
L0604:	lda     _temp3
	sec
	sbc     #$02
L1218:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L11FE:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L05DC:	lda     _temp0
	cmp     #$0A
	bcc     L060A
	lda     _temp0
	cmp     #$F5
	bcs     L060A
	lda     _temp3
	cmp     #$F5
	bcs     L060A
	lda     _temp3
	cmp     #$0A
	bcs     L0609
;
; craft_bullet_flag[i] = 0;
;
L060A:	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05BE
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L0609:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1210
	inx
L1210:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1205
	inx
	clc
L1205:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L061C
	cmp     #$00
L061C:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L061D
;
; if(has_collision){
;
	lda     _temp4
	jeq     L061F
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L0622
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L0622
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L0621
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L0622:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; if(is_update_dirty == 0){
;
L0621:	lda     _is_update_dirty
	bne     L0636
;
; wall_hit_hp[i&1]--;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
L0636:	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L063A
	lda     _temp2
	jeq     L063A
	lda     _temp2
	cmp     #$0F
	jeq     L063A
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1206
	inx
	clc
L1206:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1207
	inx
	clc
L1207:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L1208
	inx
	clc
L1208:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; explosion_state = 15;
;
	lda     #$0F
	sta     _explosion_state
;
; explosion_x = (bullet_grid_pos_x<<4)+7;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	clc
	adc     #$07
	sta     _explosion_x
;
; explosion_y = (bullet_grid_pos_y<<4)+4-(scr&15);
;
	ldx     #$00
	lda     _temp1
	jsr     aslax4
	clc
	adc     #$04
	bcc     L0654
	inx
L0654:	jsr     pushax
	lda     _scr
	and     #$0F
	jsr     tossuba0
	sta     _explosion_y
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L0658
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L0658:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L065E
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L065E:	lda     _temp0
	cmp     #$1E
	bcs     L0662
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L1214
;
; row_index_on_ns-=30;
;
L0662:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L1214:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L1209
	inx
	clc
L1209:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; if(building_index_y < 17 && (bullet_grid_pos_x == building_index_x || bullet_grid_pos_x == building_index_x+1) && bullet_grid_pos_y+1 == building_index_y){
;
	lda     _building_index_y
	cmp     #$11
	jcs     L066F
	lda     _building_index_x
	cmp     _temp2
	beq     L0672
	ldx     #$00
	lda     _building_index_x
	clc
	adc     #$01
	bcc     L0673
	inx
L0673:	cpx     #$00
	jne     L066F
	cmp     _temp2
	jne     L066F
L0672:	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0675
	inx
L0675:	cpx     #$00
	jne     L066F
	cmp     _building_index_y
	jne     L066F
;
; if(bullet_grid_pos_x == building_index_x){
;
	lda     _building_index_x
	cmp     _temp2
	jne     L0677
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	lda     _temp1
	asl     a
	bcc     L120A
	inx
	clc
L120A:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L120B
	inx
	clc
L120B:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L120C
	inx
	clc
L120C:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L068D
	dex
L068D:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; explosion_x += 8;
;
	lda     #$08
	clc
	adc     _explosion_x
;
; }else{
;
	jmp     L1200
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
L0677:	lda     _temp1
	asl     a
	bcc     L120D
	inx
	clc
L120D:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L120E
	inx
	clc
L120E:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L120F
	inx
	clc
L120F:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L06A9
	dex
L06A9:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; adr-=2;
;
	lda     _adr
	sec
	sbc     #$02
	sta     _adr
	bcs     L06B0
	dec     _adr+1
;
; explosion_x -= 8;
;
L06B0:	lda     _explosion_x
	sec
	sbc     #$08
L1200:	sta     _explosion_x
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2]=4;
;
	lda     #$04
	sta     _update_list+2
;
; explosion_y -= 3;
;
	lda     _explosion_y
	sec
	sbc     #$03
	sta     _explosion_y
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L06CA
	inc     _adr+1
;
; update_list[7]=MSB(adr)|NT_UPD_HORZ;
;
L06CA:	lda     _adr+1
	ora     #$40
	sta     _update_list+7
;
; update_list[8]=LSB(adr);
;
	lda     _adr
	sta     _update_list+8
;
; update_list[9]= 4;
;
	lda     #$04
	sta     _update_list+9
;
; adr -= 96;
;
	lda     _adr
	sec
	sbc     #$60
	sta     _adr
	bcs     L06DC
	dec     _adr+1
;
; update_list[14]=MSB(adr)|NT_UPD_HORZ;
;
L06DC:	lda     _adr+1
	ora     #$40
	sta     _update_list+14
;
; update_list[15]=LSB(adr);
;
	lda     _adr
	sta     _update_list+15
;
; update_list[16]=4;
;
	lda     #$04
	sta     _update_list+16
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L06EE
	inc     _adr+1
;
; update_list[21]=MSB(adr)|NT_UPD_HORZ;
;
L06EE:	lda     _adr+1
	ora     #$40
	sta     _update_list+21
;
; update_list[22]=LSB(adr);
;
	lda     _adr
	sta     _update_list+22
;
; update_list[23]=4;
;
	lda     #$04
	sta     _update_list+23
;
; update_list[28] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+28
;
; update_list[10]=0xC0;
;
	lda     #$C0
	sta     _update_list+10
;
; update_list[11]=0xB7;
;
	lda     #$B7
	sta     _update_list+11
;
; update_list[12]=0xB7;
;
	sta     _update_list+12
;
; update_list[13]=0xC1;
;
	lda     #$C1
	sta     _update_list+13
;
; update_list[3]=0xB0;
;
	lda     #$B0
	sta     _update_list+3
;
; update_list[4]=0xB4;
;
	lda     #$B4
	sta     _update_list+4
;
; update_list[5]=0xB4;
;
	sta     _update_list+5
;
; update_list[6]=0xB1;
;
	lda     #$B1
	sta     _update_list+6
;
; update_list[17]=0x0;
;
	tya
	sta     _update_list+17
;
; update_list[18]=0x0;
;
	sta     _update_list+18
;
; update_list[19]=0x0;
;
	sta     _update_list+19
;
; update_list[20]=0x0;
;
	sta     _update_list+20
;
; update_list[24]=0x0;
;
	sta     _update_list+24
;
; update_list[25]=0x0;
;
	sta     _update_list+25
;
; update_list[26]=0x0;
;
	sta     _update_list+26
;
; update_list[27]=0x0;
;
	sta     _update_list+27
;
; }else{
;
	jmp     L07FF
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
L066F:	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0746
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0746:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	lda     #$00
	sta     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L075B
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L075F
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11FA
	cmp     _temp2
	bne     L11FA
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L076B
	dex
L076B:	cpx     ptr1+1
	bne     L11FA
	cmp     ptr1
	beq     L075F
L11FA:	lda     #$00
	jmp     L076D
L075F:	lda     #$01
L076D:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L075B:	lda     _temp2
	beq     L076E
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0772
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L077A
	dex
L077A:	cpx     ptr1+1
	bne     L11FB
	cmp     ptr1
	bne     L11FB
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11FB
	cmp     _temp1
	beq     L0772
L11FB:	ldx     #$00
	txa
	jmp     L0780
L0772:	lda     #$01
L0780:	asl     a
	bcc     L11EB
	inx
L11EB:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L076E:	lda     _temp1
	cmp     #$0E
	bcs     L0781
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0785
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11FC
	cmp     _temp2
	bne     L11FC
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0791
	inx
L0791:	cpx     ptr1+1
	bne     L11FC
	cmp     ptr1
	beq     L0785
L11FC:	ldx     #$00
	txa
	jmp     L0793
L0785:	ldx     #$00
	lda     #$01
L0793:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0781:	lda     _temp2
	cmp     #$0F
	bcs     L0794
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0798
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L07A0
	inx
L07A0:	cpx     ptr1+1
	bne     L11FD
	cmp     ptr1
	bne     L11FD
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11FD
	cmp     _temp1
	beq     L0798
L11FD:	ldx     #$00
	txa
	jmp     L07A6
L0798:	lda     #$01
L07A6:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L0794:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L07A7
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L1201
L07A7:	lda     _temp5
	and     #$01
	beq     L07AF
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L1201
L07AF:	lda     _temp5
	and     #$02
	beq     L1201
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L1201:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L07BE
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L1202
L07BE:	lda     _temp5
	and     #$01
	beq     L07C6
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L1202
L07C6:	lda     _temp5
	and     #$08
	beq     L1202
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L1202:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L07D5
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L1203
L07D5:	lda     _temp5
	and     #$04
	beq     L07DD
;
; update_list[8] = 0xB6;
;
	lda     #$B6
;
; else if(collision_edge_data & 2)
;
	jmp     L1203
L07DD:	lda     _temp5
	and     #$02
	beq     L1203
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L1203:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L07EC
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L1204
L07EC:	lda     _temp5
	and     #$04
	beq     L07F4
;
; update_list[9] = 0XB7;
;
	lda     #$B7
;
; else if(collision_edge_data & 8)
;
	jmp     L1204
L07F4:	lda     _temp5
	and     #$08
	beq     L1204
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L1204:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
L07FF:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_flag[i] = 0xA0;
;
L063A:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05BE
;
; for(j=2; j<6; j++){
;
L061F:	lda     #$02
L1215:	sta     _j
	cmp     #$06
	jcs     L083C
;
; if(craft_hps[j]){
;
	ldy     _j
	lda     _craft_hps,y
	jeq     L080F
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L081D
	ldx     #$FF
L081D:	jsr     tosicmp
	jcc     L080F
	jeq     L080F
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L0821
	ldx     #$01
L0821:	jsr     tosicmp
	bcs     L080F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0824
	ldx     #$FF
L0824:	jsr     tosicmp
	bcc     L080F
	beq     L080F
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0827
	ldx     #$01
L0827:	jsr     tosicmp
	bcs     L080F
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L0829
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L082F
	inx
L082F:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L0829:	ldy     _j
	lda     _craft_hps,y
	bne     L0830
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L0830:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L083C
;
; for(j=2; j<6; j++){
;
L080F:	lda     _j
	clc
	adc     #$01
	jmp     L1215
;
; if(has_collision){                        
;
L061D:	lda     _temp4
	beq     L083D
;
; craft_bullet_flag[i] = 0xA0;
;
	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L05BE
;
; for(j=0; j<2; j++){
;
L083D:	sta     _j
	cmp     #$02
	jcs     L083C
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0845
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0855
	ldx     #$FF
L0855:	jsr     tosicmp
	jcc     L0845
	jeq     L0845
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L085B
	ldx     #$01
L085B:	jsr     tosicmp
	bcs     L0845
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0860
	ldx     #$FF
L0860:	jsr     tosicmp
	bcc     L0845
	beq     L0845
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0865
	ldx     #$01
L0865:	jsr     tosicmp
	bcs     L0845
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L0867
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L086D
	inx
L086D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L0867:	ldy     _j
	lda     _craft_hps,y
	bne     L086E
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L086E:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L083C
;
; for(j=0; j<2; j++){
;
L0845:	lda     _j
	clc
	adc     #$01
	jmp     L083D
;
; craft_bullet_x[i] = bullet_x;
;
L083C:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L05BE
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L05BE:	inc     _i
	jmp     L05BC
;
; TIMER_END(0);
;
L05BD:	lda     $00FB
	and     #$01
	beq     L0888
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L0888:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0892
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L0892:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L089A
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L089A:	sta     _i
L08A5:	lda     _i
	cmp     #$02
	jcs     L08A6
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L08A7
;
; if(craft_hps[i] == 0){
;
	ldy     _i
	lda     _craft_hps,y
	bne     L08B1
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L08B5
;
; if((frame&3) == 0) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$03
	jne     L08A7
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L08BF
	inx
L08BF:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	sec
	sbc     #$01
	sta     (sreg),y
;
; } else{
;
	jmp     L1219
;
; craft_hps[i] = 8;
;
L08B5:	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L08C7
	inx
L08C7:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_y[i]=200;
;
	ldy     _i
	lda     #$C8
	sta     _craft_y,y
;
; if(i==0){
;
	lda     _i
	bne     L08CC
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; }else{
;
	jmp     L08A7
;
; craft_x[1]=178;
;
L08CC:	lda     #$B2
	sta     _craft_x+1
;
; continue;
;
	jmp     L08A7
;
; pad=pad_poll(i);
;
L08B1:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L08DE
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08E1
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08E1
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08E1
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0906
;
; sprite_dirs[i] = DIR_LEFT;
;
L08E1:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L121A
L08DE:	lda     _temp0
	and     #$80
	beq     L0906
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08F8
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08F8
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08F8
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0906
;
; sprite_dirs[i] = DIR_RIGHT;
;
L08F8:	ldy     _i
	lda     #$08
L121A:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L0906:	lda     _temp0
	and     #$10
	beq     L090B
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L090E
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L090E
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L090E
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0933
;
; sprite_dirs[i] = DIR_UP;
;
L090E:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L121B
L090B:	lda     _temp0
	and     #$20
	beq     L0933
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L0925
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L0925
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L0925
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L0933
;
; sprite_dirs[i] = DIR_DOWN;
;
L0925:	ldy     _i
	lda     #$02
L121B:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L0933:	lda     _temp4
	jeq     L0938
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L0943
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L096F
;
; if(pad&PAD_LEFT){
;
L0943:	lda     _temp0
	and     #$40
	jeq     L0947
;
; int_temp0 = (((unsigned int)1)<<(new_x-9+COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$09
	bcs     L094E
	ldx     #$FF
L094E:	clc
	adc     #$02
	bcc     L094F
	inx
L094F:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L0959
	inx
L0959:	sec
	sbc     #$02
	bcs     L095A
	dex
L095A:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0955
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L095E
	dex
L095E:	clc
	adc     #$02
	bcc     L095F
	inx
L095F:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0960
L0955:	lda     #$01
L0960:	jsr     bnega
	jeq     L096F
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L1223
L0947:	lda     _temp0
	and     #$80
	jeq     L096F
;
; int_temp0 = (((unsigned int)1)<<(new_x+8-COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$08
	bcc     L096A
	ldx     #$01
L096A:	sec
	sbc     #$02
	bcs     L096B
	dex
L096B:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L0975
	inx
L0975:	sec
	sbc     #$02
	bcs     L0976
	dex
L0976:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0971
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L097A
	dex
L097A:	clc
	adc     #$02
	bcc     L097B
	inx
L097B:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L097C
L0971:	lda     #$01
L097C:	jsr     bnega
	beq     L096F
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L1223:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L096F:	lda     _temp4
	cmp     #$01
	beq     L097F
	lda     _frame
	and     #$03
	jeq     L099B
;
; if(pad&PAD_UP){
;
L097F:	lda     _temp0
	and     #$10
	jeq     L0982
;
; if(!((blocked[new_y-8+COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$08
	bcs     L0989
	dex
L0989:	clc
	adc     #$02
	bcc     L098A
	inx
L098A:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1221
	inx
L1221:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L0990
	ldx     #$FF
L0990:	clc
	adc     #$02
	bcc     L0991
	inx
L0991:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L0995
	ldx     #$01
L0995:	sec
	sbc     #$02
	bcs     L0996
	dex
L0996:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L099B
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L1224
L0982:	lda     _temp0
	and     #$20
	jeq     L099B
;
; if(!((blocked[new_y+9-COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$09
	bcc     L09A0
	inx
L09A0:	sec
	sbc     #$02
	bcs     L09A1
	dex
L09A1:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1222
	inx
L1222:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L09A7
	ldx     #$FF
L09A7:	clc
	adc     #$02
	bcc     L09A8
	inx
L09A8:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L09AC
	ldx     #$01
L09AC:	sec
	sbc     #$02
	bcs     L09AD
	dex
L09AD:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L099B
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L1224:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L099B:	lda     _temp6
	cmp     #$DD
	bcc     L09AF
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L09AF:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L0938:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L09BD
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L09C3
	inx
L09C3:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L09C8
L09BD:	lda     _temp0
	and     #$01
	jeq     L09C8
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L121E:	sta     _j
	cmp     #$08
	bcs     L09C8
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L09C9
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L09D6
	inx
L09D6:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L09DC
	inx
L09DC:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L09E2
	inx
L09E2:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L09C8
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L09C9:	lda     #$02
	clc
	adc     _j
	jmp     L121E
;
; TIMER_TICK(0);
;
L09C8:	lda     $00FB
	and     #$01
	beq     L08A7
	lda     $00FF
	pha
	clc
	adc     #$01
	sta     $00FF
L1219:	pla
;
; for(i=0;i<2;++i){
;
L08A7:	inc     _i
	jmp     L08A5
;
; TIMER_END(0);
;
L08A6:	lda     $00FB
	and     #$01
	beq     L09F3
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L09F3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(scroll_amount){
;
	lda     _scroll_amount
	bne     L12D5
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L12D5:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _scroll_amount
	bcc     L0A04
	beq     L0A04
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L1244
;
; enemy_spawn_scr = 0;
;
L0A04:	lda     #$00
L1244:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L0A0B:	lda     _i
	cmp     #$06
	bcs     L0A0C
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L0A15
	inx
L0A15:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; if(i<2&& craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	lda     _i
	cmp     #$02
	bcs     L0A0D
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L0A0D
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L0A0D:	inc     _i
	jmp     L0A0B
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0A0C:	lda     #$00
	sta     _i
L0A23:	lda     _i
	cmp     #$0C
	bcs     L0A24
;
; if(!craft_bullet_flag[i]) continue;
;
	ldy     _i
	lda     _craft_bullet_flag,y
	beq     L0A25
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L0A2F
	beq     L0A2F
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; }else{
;
	jmp     L0A25
;
; craft_bullet_y[i] += scroll_amount;
;
L0A2F:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L0A3A
	inx
L0A3A:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0A25:	inc     _i
	jmp     L0A23
;
; if(explosion_state){
;
L0A24:	lda     _explosion_state
	beq     L0A42
;
; if(explosion_y > 255 - scroll_amount){
;
	lda     _explosion_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L0A3E
	beq     L0A3E
;
; explosion_y = 255;
;
	lda     #$FF
;
; }else{
;
	jmp     L1245
;
; explosion_y += scroll_amount;
;
L0A3E:	lda     _scroll_amount
	clc
	adc     _explosion_y
L1245:	sta     _explosion_y
;
; scr -= scroll_amount;
;
L0A42:	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L0A47
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; if(sprite_to_bg_y<255-scroll_amount) sprite_to_bg_y+=scroll_amount;
;
L0A47:	lda     _sprite_to_bg_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcs     L0A4B
	lda     _scroll_amount
	clc
	adc     _sprite_to_bg_y
;
; else sprite_to_bg_y = 255;
;
	jmp     L1246
L0A4B:	lda     #$FF
L1246:	sta     _sprite_to_bg_y
;
; row_index = scr>>3;
;
	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0A54
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0A54:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L1287
	cmp     _last_row_index
	jeq     L0EF6
;
; last_row_index = row_index;
;
L1287:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L0A5F
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L12AE
;
; row_index-=30;
;
L0A5F:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L12AE:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0CDB
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0AA4
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0AA4:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0AAB
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0AAB:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0AB2
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0AB2:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L0ABA
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L0ABA:	lda     #$02
L128A:	sta     _i
	cmp     #$10
	bcs     L0AC3
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0ACC
	inx
L0ACC:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0AD2
	inx
L0AD2:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L0AD7
	lda     _i
	cmp     #$0F
	bne     L0AD6
;
; if(rand8() < 30){
;
L0AD7:	jsr     _rand8
	cmp     #$1E
	bcs     L0AC4
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L0AD6
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L1248
;
; next_line[i] = GRASS;
;
L0AD6:	ldy     _i
	lda     #$00
L1248:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0AC4:	lda     _i
	clc
	adc     #$01
	jmp     L128A
;
; wall_count -= (wall_count>>3);
;
L0AC3:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(building_index_y<17) building_index_y++;
;
	lda     _building_index_y
	cmp     #$11
	bcs     L0AF0
	lda     _building_index_y
	clc
	adc     #$01
	sta     _building_index_y
;
; if(dont_change_bg_pallette) dont_change_bg_pallette--;
;
L0AF0:	lda     _dont_change_bg_pallette
	beq     L0AF3
	lda     _dont_change_bg_pallette
	sec
	sbc     #$01
	sta     _dont_change_bg_pallette
;
; if(wall_count) wall_count--;
;
L0AF3:	lda     _wall_count
	beq     L0AF6
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L0AF6:	lda     _has_big_wall
	beq     L0AF9
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L0AF9:	lda     _wall_count
	cmp     #$02
	jcs     L0B69
	jsr     _rand8
	cmp     #$96
	jcs     L0B69
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L0B29
	lda     _temp2
	cmp     #$3C
	bcs     L0B0A
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L1249
L0B0A:	lda     _temp2
	cmp     #$78
	bcs     L0B0F
	lda     #$04
;
; else if(!dont_change_bg_pallette && row_index != 29 && row_index != 0 && random < 165){
;
	jmp     L1249
L0B0F:	lda     _dont_change_bg_pallette
	bne     L0B14
	lda     _temp0
	cmp     #$1D
	beq     L0B14
	lda     _temp0
	beq     L0B14
	lda     _temp2
	cmp     #$A5
	bcs     L0B14
;
; selected_grid = BUILDING;
;
	lda     #$08
	sta     _temp1
;
; dont_change_bg_pallette = 16;
;
	lda     #$10
	sta     _dont_change_bg_pallette
;
; building_shift = random>126?8:random>113?4:0;
;
	lda     _temp2
	cmp     #$7F
	bcc     L0B1E
	lda     #$08
	jmp     L0B24
L0B1E:	lda     _temp2
	cmp     #$72
	bcc     L0B22
	lda     #$04
	jmp     L0B24
L0B22:	lda     #$00
L0B24:	sta     _building_shift
;
; building_index_y = 0;
;
	lda     #$00
	sta     _building_index_y
;
; }else if(random < 200){
;
	jmp     L0B2F
L0B14:	lda     _temp2
	cmp     #$C8
	bcs     L0B29
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L0B2F
;
; selected_grid = WALL;
;
L0B29:	lda     #$01
L1249:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L0B2F:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L0B35
	inx
L0B35:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(selected_grid == BUILDING){
;
	lda     _temp1
	cmp     #$08
	bne     L0B3A
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0B3C
;
; grid_start--;
;
	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
;
; }else{
;
	jmp     L124A
;
; grid_end++;
;
L0B3C:	lda     _temp3
	pha
	clc
	adc     #$01
	sta     _temp3
L124A:	pla
;
; building_index_x = grid_start-1;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _building_index_x
;
; sprite_to_bg_x = (grid_start<<4)-24;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	sec
	sbc     #$18
	sta     _sprite_to_bg_x
;
; }else{
;
	jmp     L0B64
;
; if(rand8()&1) grid_start--;
;
L0B3A:	jsr     _rand8
	and     #$01
	beq     L0B49
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B49:	jsr     _rand8
	and     #$01
	beq     L0B4C
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L0B4C:	lda     _temp1
	cmp     #$05
	beq     L0B4F
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L0B51
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B51:	jsr     _rand8
	and     #$01
	beq     L0B64
	lda     _temp3
	pha
	clc
	adc     #$01
;
; }else{
;
	jmp     L128B
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L0B4F:	lda     _temp3
	cmp     _temp2
	bne     L0B5E
	jsr     _rand8
	and     #$01
	beq     L0B5C
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L0B5E
L0B5C:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(grid_start == 2){
;
L0B5E:	lda     _temp2
	cmp     #$02
	bne     L0B60
;
; grid_start++; 
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; grid_end++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(grid_start == 15){
;
L0B60:	lda     _temp2
	cmp     #$0F
	bne     L0B64
;
; grid_start--; 
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; grid_end--;
;
	lda     _temp3
	pha
	sec
	sbc     #$01
L128B:	sta     _temp3
	pla
;
; for(i=grid_start; i<=grid_end; i++){
;
L0B64:	lda     _temp2
L128C:	sta     _i
	sec
	sbc     _temp3
	bcc     L0B6B
	bne     L0B69
;
; next_line[i] = selected_grid;
;
L0B6B:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L128C
;
; for(i=2; i<16; i++){
;
L0B69:	lda     #$02
L1290:	sta     _i
	cmp     #$10
	jcs     L0B76
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L0B77
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L0B81
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else if(current_line[i] != BUILDING){
;
	jmp     L0B77
L0B81:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	jeq     L0B77
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B93
	inx
L0B93:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L122A
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L122A:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B98
	dex
L0B98:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L12A6
	inx
	clc
L12A6:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L125B
	inx
	clc
L125B:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BA1
	dex
L0BA1:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L129D
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L129D:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BA6
	inx
L0BA6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0BAB
	beq     L0BAB
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L124D
;
; chance_to_grow = 0;
;
L0BAB:	lda     #$00
L124D:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L12C3
	lda     _temp3
	cmp     #$02
	bcc     L0BBC
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0BBC
;
; next_line[i] = WALL;
;
L12C3:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0BBC:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BC8
	inx
L0BC8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L122D
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L122D:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BCC
	dex
L0BCC:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L122E
	inx
L122E:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L122F
	inx
L122F:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BD4
	dex
L0BD4:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BD8
	inx
L0BD8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0BD9
	beq     L0BD9
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L124F
;
; chance_to_grow = 0;
;
L0BD9:	lda     #$00
L124F:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L12C4
	lda     _temp3
	cmp     #$03
	bcc     L0BEA
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0BEA
;
; next_line[i] = WATER;
;
L12C4:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0BEA:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BF6
	inx
L0BF6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1230
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L1230:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BFA
	dex
L0BFA:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1231
	inx
L1231:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L1232
	inx
L1232:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C02
	dex
L0C02:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C06
	inx
L0C06:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0C07
	beq     L0C07
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L1251
;
; chance_to_grow = 0;
;
L0C07:	lda     #$00
L1251:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L12C5
	lda     _temp3
	cmp     #$03
	bcc     L0B77
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0B77
;
; next_line[i] = FOREST;
;
L12C5:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L0B77:	lda     _i
	clc
	adc     #$01
	jmp     L1290
;
; for(i=2; i<16; i++){
;
L0B76:	lda     #$02
L1291:	sta     _i
	cmp     #$10
	jcs     L0C20
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0C27
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C2E
	dex
L0C2E:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0C28
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C30
	inx
L0C30:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0C27
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L0C28:	lda     _i
	cmp     #$02
	beq     L0C34
	lda     _i
	cmp     #$0F
	bne     L0C33
L0C34:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L1253
L0C33:	ldy     _i
	lda     #$05
L1253:	sta     _next_line,y
;
; if(current_line[i] == BUILDING && dont_change_bg_pallette == 15){
;
L0C27:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	bne     L0C3F
	lda     _dont_change_bg_pallette
	cmp     #$0F
	bne     L0C3F
;
; next_line[i] = BUILDING_PASSABLE;
;
	ldy     _i
	lda     #$18
	sta     _next_line,y
;
; if(current_line[i]  == BUILDING_PASSABLE){
;
L0C3F:	ldy     _i
	lda     _current_line,y
	cmp     #$18
	bne     L0C21
;
; sprite_to_bg_y = 24;
;
	sta     _sprite_to_bg_y
;
; for(i=2; i<16; i++){
;
L0C21:	lda     _i
	clc
	adc     #$01
	jmp     L1291
;
; for(i=2; i<16; i++){
;
L0C20:	lda     #$02
L1292:	sta     _i
	cmp     #$10
	jcs     L0C50
;
; if(current_line[i] == GRASS && (
;
	ldy     _i
	lda     _current_line,y
	jne     L0C57
;
; (current_line[i+1]&BUILDING_PASSABLE) || 
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C5F
	inx
L0C5F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	jne     L0C58
;
; (current_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C62
	dex
L0C62:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C58
;
; (prev_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _prev_line,y
	and     #$18
	bne     L0C58
;
; (prev_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C68
	dex
L0C68:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C58
;
; (prev_line[i+1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C6B
	inx
L0C6B:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C58
;
; (next_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _next_line,y
	and     #$18
	bne     L0C58
;
; (next_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C71
	dex
L0C71:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C58
;
; (next_line[i+1]&BUILDING_PASSABLE)
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C74
	inx
L0C74:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
;
; ))
;
	beq     L0C57
;
; current_line[i] = GRASS_EMPTY;
;
L0C58:	ldy     _i
	lda     #$20
	sta     _current_line,y
;
; if(current_line[i] == WALL && 
;
L0C57:	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L0C51
;
; ((current_line[i-1]==WALL) && (current_line[i+1]==WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C83
	dex
L0C83:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C51
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C87
	inx
L0C87:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C51
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L0C51
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]==WALL) && (next_line[i+1]==WALL) 
;
	beq     L0C51
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C90
	dex
L0C90:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
	bne     L0C51
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C93
	inx
L0C93:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	bne     L0C51
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C96
	dex
L0C96:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C51
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C99
	inx
L0C99:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C51
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L0C51:	lda     _i
	clc
	adc     #$01
	jmp     L1292
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L0C50:	lda     _current_line+2
	and     #$01
	beq     L0CA0
	lda     _prev_line+2
	and     #$01
	beq     L0CA0
	lda     _next_line+2
	and     #$01
	beq     L0CA0
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0CA0:	lda     _current_line+15
	and     #$01
	beq     L0CAD
	lda     _prev_line+15
	and     #$01
	beq     L0CAD
	lda     _next_line+15
	and     #$01
	beq     L0CAD
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0CAD:	lda     #$0E
L1293:	sta     _i
	lda     _i
	jeq     L0CBB
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L125C
	inx
	clc
L125C:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CC6
	dex
L0CC6:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; enemy_blocked[i] = enemy_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L125D
	inx
	clc
L125D:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CCB
	dex
L0CCB:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L125E
	inx
	clc
L125E:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0CD0
	dex
L0CD0:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L1293
;
; blocked[0] = 0;
;
L0CBB:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; enemy_blocked[0] = 0;
;
	sta     _enemy_blocked
	sta     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L1294:	sta     _i
	cmp     #$10
	jcs     L0CDB
;
; if(current_line[i+1] != GRASS && current_line[i+1] != GRASS_EMPTY /*&& current_line[i+1] != BUILDING_PASSABLE*/){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CE5
	inx
L0CE5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	jeq     L0CDC
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CE8
	inx
L0CE8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$20
	jeq     L0CDC
;
; if(current_line[i+1] != BUILDING_PASSABLE){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CED
	inx
L0CED:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$18
	beq     L0CEA
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CF5
	inx
L0CF5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0CEA
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; enemy_blocked[0] |= (1<<i);
;
L0CEA:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _enemy_blocked
	stx     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L0CDC:	lda     _i
	clc
	adc     #$01
	jmp     L1294
;
; for(i=0; i<32; i++){
;
L0CDB:	lda     #$00
L129C:	sta     _i
	cmp     #$20
	jcs     L0CFF
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0DA6
	cmp     #$01
	beq     L0D20
	cmp     #$02
	beq     L0D20
	cmp     #$03
	jeq     L0DA6
	cmp     #$04
	jeq     L0E09
	cmp     #$05
	jeq     L0DB8
	cmp     #$08
	jeq     L0E83
	cmp     #$18
	jeq     L0E83
	cmp     #$20
	jne     L0D00
;
; update_list[3+i] = 0;
;
	lda     _i
	clc
	adc     #$03
	bcc     L125F
	inx
	clc
L125F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; break;
;
	jmp     L1295
;
; cell_type = current_line[column_index];
;
L0D20:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0D25
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D2B
	inx
L0D2B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D2D
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0D35
	inx
L0D35:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L12B2
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0D2D:	lda     _temp3
	clc
	adc     #$01
	bcc     L0D55
	inx
;
; }else{
;
	jmp     L0D55
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0D25:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D43
	dex
L0D43:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D45
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D4D
	dex
L0D4D:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L12B2
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0D45:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D55
	dex
L0D55:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L12B2:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D56
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L12AC
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0D56:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L12AC:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0D67
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0D69
;
; update_list[3+i] = (cell_type == WALL?0:0xF0);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1260
	inx
	clc
L1260:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0D70
	lda     #$00
	jmp     L1298
L0D70:	lda     #$F0
;
; }else{
;
	jmp     L1298
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xD0) + (rand8()&3);
;
L0D69:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L1261
	inx
	clc
L1261:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0D7A
	lda     #$66
	jmp     L0D7C
L0D7A:	lda     #$D0
L0D7C:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0D00
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0D67:	lda     _temp2
	cmp     #$04
	bcc     L0D80
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0D80:	lda     _temp4
	cmp     #$01
	bne     L0D84
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L1262
	inx
	clc
L1262:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L1227
	inx
L1227:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L12A4
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0D84:	lda     _i
	clc
	adc     #$03
	bcc     L1263
	inx
	clc
L1263:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L1228
	inx
L1228:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L12A4:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0D94
	lda     _temp2
	cmp     #$02
	bne     L0D93
L0D94:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1264
	inx
	clc
L1264:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0D00
L0D93:	lda     _temp2
	jne     L0D00
	lda     _temp4
	cmp     #$01
	jne     L0D00
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1265
	inx
	clc
L1265:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
L1298:	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; random = rand8()&0x3F;
;
L0DA6:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0DAB
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1266
	inx
	clc
L1266:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L1295
;
; update_list[3+i] = 0x60 + random;
;
L0DAB:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1267
	inx
	clc
L1267:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
;
; break;
;
	jmp     L1295
;
; switch(cell_index){
;
L0DB8:	lda     _temp1
;
; }
;
	beq     L0DBD
	cmp     #$01
	beq     L0DD0
	cmp     #$02
	jeq     L0DE3
	cmp     #$03
	jeq     L0DF6
	jmp     L0D00
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0DBD:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DC1
	dex
L0DC1:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DBE
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1268
	inx
	clc
L1268:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0D00
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0DBE:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1269
	inx
	clc
L1269:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0DD0:	lda     _temp3
	clc
	adc     #$01
	bcc     L0DD4
	inx
L0DD4:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DD1
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126A
	inx
	clc
L126A:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0D00
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0DD1:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126B
	inx
	clc
L126B:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0DE3:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DE7
	dex
L0DE7:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DE4
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126C
	inx
	clc
L126C:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0D00
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0DE4:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126D
	inx
	clc
L126D:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0DF6:	lda     _temp3
	clc
	adc     #$01
	bcc     L0DFA
	inx
L0DFA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DF7
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126E
	inx
	clc
L126E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0D00
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0DF7:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L126F
	inx
	clc
L126F:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; neighbour_forest_count = 0;
;
L0E09:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0E10
	cmp     #$01
	beq     L0E1E
	cmp     #$02
	jeq     L0E2C
	cmp     #$03
	jeq     L0E3A
	jmp     L0E0E
;
; update_list[3+i] = 0x4;
;
L0E10:	lda     _i
	clc
	adc     #$03
	bcc     L1270
	inx
	clc
L1270:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E18
	dex
L0E18:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L12B3
;
; update_list[3+i] = 0x5;
;
L0E1E:	lda     _i
	clc
	adc     #$03
	bcc     L1271
	inx
	clc
L1271:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0E26
	inx
L0E26:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L12B3
;
; update_list[3+i] = 0x6;
;
L0E2C:	lda     _i
	clc
	adc     #$03
	bcc     L1272
	inx
	clc
L1272:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E42
	dex
;
; break;
;
	jmp     L0E42
;
; update_list[3+i] = 0x7;
;
L0E3A:	lda     _i
	clc
	adc     #$03
	bcc     L1273
	inx
	clc
L1273:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0E42
	inx
L0E42:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L12B3:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0E0E:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0E56
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0E4D
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L125A
L0E4D:	lda     _temp2
	cmp     #$01
	bne     L0E52
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L129B
;
; cell_can_be_cleared = rand8() < 60;
;
L0E52:	jsr     _rand8
	cmp     #$3C
L129B:	jsr     boolult
L125A:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0E56:	lda     _temp4
	beq     L0E59
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0E5D
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1274
	inx
	clc
L1274:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L1295
;
; update_list[3+i] = 0x60 + random;
;
L0E5D:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1275
	inx
	clc
L1275:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
;
; }else{
;
	jmp     L1295
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0E59:	lda     _temp1
	cmp     #$02
	bcs     L1243
	lda     _temp2
	cmp     #$02
	bcs     L1243
	jsr     _rand8
	and     #$03
	bne     L0E6B
L1243:	jsr     _rand8
	and     #$03
	bne     L0E6A
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0E6B:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1276
	inx
	clc
L1276:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L0D00
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0E6A:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1277
	inx
	clc
L1277:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0D00
;
; if(prev_line[column_index] != BUILDING){
;
L0E83:	ldy     _temp3
	lda     _prev_line,y
	cmp     #$08
	beq     L0E84
;
; sprite_id = 0xF4+building_shift;
;
	lda     _building_shift
	clc
	adc     #$F4
	bcc     L0E8E
;
; }else{
;
	jmp     L0E8E
;
; sprite_id = 0xD4+building_shift;
;
L0E84:	lda     _building_shift
	clc
	adc     #$D4
L0E8E:	sta     _temp2
;
; if(current_line[column_index-1] == current_line[column_index]){
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E92
	dex
L0E92:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	ldx     #$00
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     _temp3
	lda     _current_line,y
	cpx     ptr1+1
	bne     L0E8F
	cmp     ptr1
	bne     L0E8F
;
; sprite_id += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; sprite_id += (cell_index&1);
;
L0E8F:	lda     _temp1
	and     #$01
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index&2) sprite_id -= 0x10;
;
	lda     _temp1
	and     #$02
	beq     L0E9A
	lda     _temp2
	sec
	sbc     #$10
	sta     _temp2
;
; update_list[3+i] = sprite_id;
;
L0E9A:	lda     _i
	clc
	adc     #$03
	bcc     L1278
	inx
	clc
L1278:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
L1295:	ldy     #$00
	sta     (ptr1),y
;
; for(i=0; i<32; i++){
;
L0D00:	lda     _i
	clc
	adc     #$01
	jmp     L129C
;
; if( (row_index&1) != 0){
;
L0CFF:	lda     _temp0
	and     #$01
	jeq     L0EA2
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0EA6
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0EA8:	lda     _i
	cmp     #$08
	jcs     L0EF6
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L1279
	inx
	clc
L1279:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L127A
	inx
	clc
L127A:	adc     #$01
	bcc     L0EB8
	inx
L0EB8:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L127B
	inx
	clc
L127B:	adc     #$01
	bcc     L127C
	inx
	clc
L127C:	adc     #$01
	bcc     L0EBF
	inx
L0EBF:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0EA8
;
; }else if( (row_index&3) == 3 ){
;
L0EA6:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0EC1
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0EC5:	lda     _i
	cmp     #$08
	jcs     L0EF6
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L127D
	inx
	clc
L127D:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L127E
	inx
	clc
L127E:	adc     #$01
	bcc     L0ED5
	inx
L0ED5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L127F
	inx
	clc
L127F:	adc     #$01
	bcc     L1280
	inx
	clc
L1280:	adc     #$01
	bcc     L0EDC
	inx
L0EDC:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0EC5
;
; for(i=0;i<8;++i){
;
L0EC1:	lda     #$00
	sta     _i
L0EDE:	lda     _i
	cmp     #$08
	jcs     L0EF6
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L1281
	inx
	clc
L1281:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L1282
	inx
	clc
L1282:	adc     #$01
	bcc     L0EEE
	inx
L0EEE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1283
	inx
	clc
L1283:	adc     #$01
	bcc     L1284
	inx
	clc
L1284:	adc     #$01
	bcc     L0EF5
	inx
L0EF5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0EDE
;
; current_line[1] = WALL;
;
L0EA2:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0EF6:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; for(i=0; i<6; i++){
;
L12DC:	sta     _i
	cmp     #$06
	bcs     L0F20
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_timers,y
;
; craft_types[i] = 0;
;
	ldy     _i
	sta     _craft_types,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	sta     _craft_hps,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12DC
;
; craft_types[0] = 0;
;
L0F20:	lda     #$00
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; explosion_state = 0;
;
	lda     #$00
	sta     _explosion_state
;
; for(i=0; i<18; i++){
;
L12DD:	sta     _i
	cmp     #$12
	bcs     L0F44
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0F4D
	inx
L0F4D:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0F50
	inx
L0F50:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12DD
;
; next_line[0] = next_line[1] = WALL;
;
L0F44:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; dont_change_bg_pallette = 14;
;
	lda     #$0E
	sta     _dont_change_bg_pallette
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L12DE:	sta     _i
	cmp     #$06
	bcs     L0F86
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12DE
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0F86:	lda     #$00
L12DF:	sta     _i
	cmp     #$0C
	bcs     L0F92
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12DF
;
; for(i=0; i<15; i++){
;
L0F92:	lda     #$00
L12E0:	sta     _i
	cmp     #$0F
	bcs     L0F9E
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L12D9
	inx
	clc
L12D9:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L12DA
	inx
	clc
L12DA:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; enemy_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L12DB
	inx
	clc
L12DB:	adc     #<(_enemy_blocked)
	sta     ptr1
	txa
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12E0
;
; }
;
L0F9E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L12F0:	sta     _i
	cmp     #$06
	bcc     L12F1
;
; }
;
	rts
;
; if(!craft_hps[i]){
;
L12F1:	ldy     _i
	lda     _craft_hps,y
	jne     L0FB7
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0FBB
;
; if(frame&1) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$01
	jeq     L0FB1
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0FC3
	inx
L0FC3:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; continue;
;
	jmp     L0FB1
;
; }else if(enemy_spawn_scr == 0){
;
L0FBB:	lda     _enemy_spawn_scr
	jne     L0FF3
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L12E4:	sta     _temp5
;
; while((enemy_blocked[0] & (1<<spawn_x))){
;
L0FCD:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0FCE
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0FCD
	lda     #$00
;
; }                    
;
	jmp     L12E4
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0FCE:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0FF1
	inx
L0FF1:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0FF3
;
; move_dir = sprite_dirs[i];
;
L0FB7:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L1000
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L1008
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L1005
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L1005:	lda     _temp1
	and     #$08
	beq     L1008
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L1008:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L100B
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L100F
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L100F:	lda     _temp1
	and     #$02
	beq     L100B
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L100B:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L1019
	lda     _frame
	and     #$07
	bne     L1019
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L1021
	inx
L1021:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeEnemy(new_x, new_y) == FALSE){
;
L1019:	lda     _temp4
	beq     L1023
	lda     _temp3
	cmp     #$14
	bcs     L12E2
	lda     _temp1
	cmp     #$01
	beq     L1023
L12E2:	lda     _temp3
	cmp     #$DD
	bcc     L12E3
	lda     _temp1
	cmp     #$02
	beq     L1023
L12E3:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L12E7
	inx
L12E7:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L1000
	cmp     #$00
	jne     L1000
;
; new_x = craft_x[i];
;
L1023:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeEnemy(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L103F
	dex
L103F:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L12E8
	inx
L12E8:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L103A
	cmp     #$00
	bne     L103A
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeEnemy(new_x, new_y+1) == FALSE){
;
L103A:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L104B
	inx
L104B:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L12E9
	inx
L12E9:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1046
	cmp     #$00
	bne     L1046
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeEnemy(new_x-1, new_y) == FALSE){
;
L1046:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L12EA
	inx
L12EA:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L105A
	ldx     #$FF
L105A:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1052
	cmp     #$00
	bne     L1052
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeEnemy(new_x+1, new_y) == FALSE){
;
L1052:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L12EB
	inx
L12EB:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L1066
	ldx     #$01
L1066:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L105E
	cmp     #$00
	bne     L105E
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L105E:	lda     _temp3
	cmp     #$14
	bcs     L106A
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L106A:	lda     _temp3
	cmp     #$DD
	bcc     L106E
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L106E:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L1074
	inx
L1074:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L1079
	inx
L1079:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L107B
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; continue;
;
	jmp     L0FB1
;
; }else if(move_dir == 0){
;
L107B:	lda     _temp1
	bne     L1086
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L12E5
;
; move_dir = rand8()&3;
;
L1086:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L108F:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L1094
	inx
L1094:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L108F
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L12E5:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0) {
;
L1000:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L109F
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L12ED:	sta     _j
	cmp     #$0C
	bcs     L10C1
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L10A5
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L10BD
	inx
L10BD:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L10C1
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L10A5:	lda     _j
	clc
	adc     #$01
	jmp     L12ED
;
; craft_bullet_timers[i]--;
;
L109F:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L10C4
	inx
L10C4:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y+8 || craft_hps[i] == 0){
;
L10C1:	lda     _temp3
	cmp     #$E5
	bcs     L10C6
	ldy     _i
	lda     _craft_hps,y
	bne     L10C5
;
; craft_hps[i] = 0;
;
L10C6:	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; continue;
;
	jmp     L0FB1
;
; for(j=0; j<2; j++){
;
L10C5:	lda     #$00
L12EF:	sta     _j
	cmp     #$02
	jcs     L0FF3
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L10D5
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L10E3
	ldx     #$FF
L10E3:	jsr     tosicmp
	jcc     L10D5
	jeq     L10D5
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L10E7
	ldx     #$01
L10E7:	jsr     tosicmp
	bcs     L10D5
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L10EA
	ldx     #$FF
L10EA:	jsr     tosicmp
	bcc     L10D5
	beq     L10D5
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L10ED
	ldx     #$01
L10ED:	jsr     tosicmp
	bcs     L10D5
;
; if(craft_hps[j]>2){
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L10EF
;
; craft_hps[j]-=2;
;
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L10F5
	inx
L10F5:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; craft_bullet_timers[i] = 0xF;
;
	ldy     _i
;
; }else{
;
	jmp     L12EE
;
; craft_hps[j] = 0;
;
L10EF:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; craft_bullet_timers[j] = 0xF;
;
	ldy     _j
L12EE:	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; break;
;
	jmp     L0FF3
;
; for(j=0; j<2; j++){
;
L10D5:	lda     _j
	clc
	adc     #$01
	jmp     L12EF
;
; craft_x[i] = new_x;
;
L0FF3:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0FB1:	lda     _i
	clc
	adc     #$01
	jmp     L12F0

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L12F5
;
; }
;
	rts
;
; alpha = 4;
;
L12F5:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L1120:	lda     _temp0
	beq     L1121
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1128:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L1120
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1128
;
; oam_clear();
;
L1121:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L12F4:	sta     _i
	cmp     #$07
	bcs     L1130
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L12F3
	clc
L12F3:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L12F4
;
; alpha = 0;
;
L1130:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L1144:	lda     _temp0
	cmp     #$04
	bcs     L1145
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L114C:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L1144
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L114C
;
; ppu_wait_frame();
;
L1145:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L1145
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L115B:	lda     _temp0
	beq     L115C
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1163:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L115B
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1163
;
; oam_clear();
;
L115C:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L116D:	lda     _temp0
	cmp     #$04
	bcs     L116E
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1175:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L116D
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1175
;
; }
;
L116E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L117E:	lda     _scr+1
	bne     L12F6
	lda     _scr
	cmp     #$F0
	beq     L117F
;
; ppu_wait_frame();
;
L12F6:	jsr     _ppu_wait_frame
;
; scroll_amount = 4;
;
	lda     #$04
	sta     _scroll_amount
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L117E
;
; pal_col(9, 0x3d);
;
L117F:	lda     #$09
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(10, 0x2d);
;
	lda     #$0A
	jsr     pusha
	lda     #$2D
	jsr     _pal_col
;
; pal_col(11, 0x1d);
;
	lda     #$0B
	jsr     pusha
	lda     #$1D
	jsr     _pal_col
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_y[1]=200;
;
	sta     _craft_y+1
;
; temp5 = 0;
;
	lda     #$00
	sta     _temp5
;
; ppu_wait_frame();
;
L1198:	jsr     _ppu_wait_frame
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; oam_clear();
;
	jsr     _oam_clear
;
; is_update_dirty = 0;
;
	lda     #$00
	sta     _is_update_dirty
;
; scroll_amount = 0;
;
	sta     _scroll_amount
;
; if(craft_lives[0] && craft_y[0] < 150) scroll_amount = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L11A3
	lda     _craft_y
	cmp     #$96
	bcs     L11A3
	lda     #$96
	sec
	sbc     _craft_y
	sta     _scroll_amount
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L11A3:	lda     _craft_lives+1
	beq     L11B5
	lda     _craft_y+1
	cmp     #$96
	bcs     L11B5
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > scroll_amount){
;
	sec
	sbc     _scroll_amount
	bcc     L11B5
	beq     L11B5
;
; scroll_amount = temp2;
;
	lda     _temp2
	sta     _scroll_amount
;
; if(scroll_amount){
;
L11B5:	lda     _scroll_amount
	beq     L11B9
;
; is_update_dirty = (scr&0xF)<scroll_amount;
;
	lda     _scr
	and     #$0F
	cmp     _scroll_amount
	jsr     boolult
	sta     _is_update_dirty
;
; if(explosion_state && (frame&1)){
;
L11B9:	lda     _explosion_state
	beq     L11BE
	lda     _frame
	and     #$01
	beq     L11BE
;
; explosion_state--;
;
	lda     _explosion_state
	sec
	sbc     #$01
	sta     _explosion_state
;
; tick_crafts();
;
L11BE:	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; check_pause();
;
	jsr     _check_pause
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L1198

.endproc

