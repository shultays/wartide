;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_all
	.import		_pal_col
	.import		_pal_bright
	.import		_pal_spr_bright
	.import		_ppu_wait_frame
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_size
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_rand16
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_unrle
	.export		_menu_data
	.export		_isCellBulletFree
	.export		_menu
	.export		_draw_tank
	.export		_draw_all
	.export		_init
	.export		_tick_bullets
	.export		_tick_crafts
	.export		_scroll_screen
	.export		_reset
	.export		_tick_enemies
	.export		_check_pause
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_blocked:
	.word	$0000
	.res	28,$00
_bullet_blocked:
	.word	$0000
	.res	28,$00
_enemy_blocked:
	.word	$0000
	.res	28,$00
.segment	"BSS"
_sprite_dirs:
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_sprite_look_dirs:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_types:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_hps:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_craft_bullet_timers:
	.byte	$00
	.byte	$00
	.res	4,$00
_craft_flags:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_craft_lives:
	.byte	$03
	.byte	$03
_scr:
	.word	$0000
_last_row_index:
	.word	$0000
_adr:
	.word	$0000
_next_line:
	.byte	$00
	.res	17,$00
_current_line:
	.byte	$00
	.res	17,$00
_prev_line:
	.byte	$00
	.res	17,$00

.segment	"RODATA"

_palette:
	.byte	$29
	.byte	$27
	.byte	$17
	.byte	$07
	.byte	$29
	.byte	$27
	.byte	$19
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$2D
	.byte	$3D
	.byte	$29
	.byte	$21
	.byte	$1C
	.byte	$0F
	.byte	$29
	.byte	$37
	.byte	$26
	.byte	$17
	.byte	$29
	.byte	$31
	.byte	$22
	.byte	$11
	.byte	$29
	.byte	$33
	.byte	$23
	.byte	$13
	.byte	$29
	.byte	$36
	.byte	$26
	.byte	$16
_bg_colors:
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
_water_tiles:
	.byte	$BD
	.byte	$8C
	.byte	$AC
	.byte	$E0
	.byte	$BF
	.byte	$8C
	.byte	$9C
	.byte	$E3
	.byte	$BC
	.byte	$7C
	.byte	$AC
	.byte	$E1
	.byte	$BE
	.byte	$7C
	.byte	$9C
	.byte	$E2
_wall_tiles:
	.byte	$80
	.byte	$84
	.byte	$90
	.byte	$99
	.byte	$82
	.byte	$84
	.byte	$A0
	.byte	$98
	.byte	$70
	.byte	$74
	.byte	$90
	.byte	$9B
	.byte	$72
	.byte	$74
	.byte	$A0
	.byte	$9A
_small_exp_0:
	.byte	$F8
	.byte	$F8
	.byte	$8C
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8E
	.byte	$03
	.byte	$80
_small_exp_1:
	.byte	$F8
	.byte	$F8
	.byte	$88
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$8A
	.byte	$03
	.byte	$80
_small_exp_2:
	.byte	$F8
	.byte	$F8
	.byte	$84
	.byte	$03
	.byte	$00
	.byte	$F8
	.byte	$86
	.byte	$03
	.byte	$80
_big_exp_0:
	.byte	$EF
	.byte	$F1
	.byte	$90
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$92
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$94
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$96
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B0
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$B2
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$B4
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$B6
	.byte	$03
	.byte	$80
_big_exp_1:
	.byte	$EF
	.byte	$F1
	.byte	$98
	.byte	$03
	.byte	$F7
	.byte	$F1
	.byte	$9A
	.byte	$03
	.byte	$FF
	.byte	$F1
	.byte	$9C
	.byte	$03
	.byte	$07
	.byte	$F1
	.byte	$9E
	.byte	$03
	.byte	$EF
	.byte	$01
	.byte	$B8
	.byte	$03
	.byte	$F7
	.byte	$01
	.byte	$BA
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$BC
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$BE
	.byte	$03
	.byte	$80
_menu_data:
	.byte	$02
	.byte	$68
	.byte	$A2
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$70
	.byte	$74
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$69
	.byte	$00
	.byte	$69
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$77
	.byte	$74
	.byte	$76
	.byte	$9B
	.byte	$00
	.byte	$68
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A1
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$61
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$93
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A2
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$28
	.byte	$5A
	.byte	$5B
	.byte	$02
	.byte	$0F
	.byte	$5C
	.byte	$28
	.byte	$91
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$9B
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$69
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$5D
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$02
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$56
	.byte	$5D
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$72
	.byte	$28
	.byte	$5F
	.byte	$5D
	.byte	$02
	.byte	$0F
	.byte	$5E
	.byte	$28
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$67
	.byte	$68
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$A0
	.byte	$28
	.byte	$57
	.byte	$58
	.byte	$02
	.byte	$0F
	.byte	$59
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$75
	.byte	$77
	.byte	$9B
	.byte	$A3
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$85
	.byte	$82
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$68
	.byte	$A1
	.byte	$BC
	.byte	$BE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$93
	.byte	$00
	.byte	$68
	.byte	$98
	.byte	$86
	.byte	$83
	.byte	$AC
	.byte	$9E
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$60
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$66
	.byte	$AF
	.byte	$DE
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$06
	.byte	$28
	.byte	$1D
	.byte	$19
	.byte	$0E
	.byte	$26
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$14
	.byte	$0E
	.byte	$1A
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$28
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$66
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$28
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$1B
	.byte	$21
	.byte	$12
	.byte	$1F
	.byte	$28
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$12
	.byte	$28
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$66
	.byte	$BD
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$71
	.byte	$76
	.byte	$76
	.byte	$74
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$73
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$BE
	.byte	$70
	.byte	$75
	.byte	$9B
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$98
	.byte	$84
	.byte	$83
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$9E
	.byte	$80
	.byte	$87
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$94
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$97
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$AC
	.byte	$DE
	.byte	$7F
	.byte	$BE
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$A5
	.byte	$8B
	.byte	$89
	.byte	$88
	.byte	$8A
	.byte	$A6
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$AD
	.byte	$DF
	.byte	$8C
	.byte	$BF
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$61
	.byte	$69
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$BC
	.byte	$7E
	.byte	$7F
	.byte	$7C
	.byte	$7E
	.byte	$7E
	.byte	$DD
	.byte	$9E
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$BD
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$8D
	.byte	$8C
	.byte	$8F
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$01
	.byte	$04
	.byte	$89
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$11
	.byte	$00
	.byte	$B8
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$11
	.byte	$00
	.byte	$BB
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$22
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$CC
	.byte	$30
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	1,$00
_temp6:
	.res	1,$00
_temp7:
	.res	1,$00
_int_temp0:
	.res	2,$00
.segment	"BSS"
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_craft_x:
	.res	6,$00
_craft_y:
	.res	6,$00
.segment	"BSS"
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_update_list:
	.res	47,$00
_enemy_spawn_scr:
	.res	1,$00
_wall_hit_x:
	.res	2,$00
_wall_hit_y:
	.res	2,$00
_wall_hit_hp:
	.res	2,$00
_wall_count:
	.res	1,$00
_has_big_wall:
	.res	1,$00
_craft_bullet_x:
	.res	12,$00
_craft_bullet_y:
	.res	12,$00
_craft_bullet_flag:
	.res	12,$00
_dont_change_bg_pallette:
	.res	1,$00
_building_shift:
	.res	1,$00
_sprite_to_bg_x:
	.res	1,$00
_sprite_to_bg_y:
	.res	1,$00
_building_index_x:
	.res	1,$00
_building_index_y:
	.res	1,$00
_scroll_amount:
	.res	1,$00
_is_update_dirty:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ isCellBulletFree (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_isCellBulletFree: near

.segment	"CODE"

;
; unsigned char __fastcall__ isCellBulletFree(unsigned char i, unsigned char j){
;
	jsr     pusha
;
; return !(bullet_blocked[j] & (1<<(i)));
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L1178
	inx
	clc
L1178:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ menu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_menu: near

.segment	"CODE"

;
; selected_item = 0;
;
	lda     #$00
	sta     _temp0
;
; old_pad = 0;
;
	sta     _temp1
;
; ++frame;
;
L03C2:	inc     _frame
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; spr = 0;
;
	lda     #$00
	sta     _spr
;
; pad=pad_poll(0)|pad_poll(1);
;
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	sta     _temp2
;
; if(old_pad != pad){
;
	cmp     _temp1
	beq     L03F3
;
; old_pad = pad;
;
	lda     _temp2
	sta     _temp1
;
; if(pad&PAD_UP){
;
	lda     _temp2
	and     #$10
	beq     L03D1
;
; --selected_item;
;
	dec     _temp0
;
; if(selected_item == 255) selected_item = 2;
;
	lda     _temp0
	cmp     #$FF
	bne     L03F3
	lda     #$02
	sta     _temp0
;
; } else if(pad&PAD_DOWN){
;
	jmp     L03F3
L03D1:	lda     _temp2
	and     #$20
	beq     L03D9
;
; ++selected_item;
;
	inc     _temp0
;
; if(selected_item == 3) selected_item = 0;
;
	lda     _temp0
	cmp     #$03
	bne     L03F3
	lda     #$00
	sta     _temp0
;
; } else if(pad&(PAD_A|PAD_B|PAD_START|PAD_SELECT)){
;
	jmp     L03F3
L03D9:	lda     _temp2
	and     #$0F
	beq     L03F3
;
; if(selected_item == 0){
;
	lda     _temp0
	bne     L03E4
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 0;
;
	lda     #$00
	sta     _craft_lives+1
;
; craft_hps[1] = 0;
;
	sta     _craft_hps+1
;
; craft_types[1] = 0;
;
	sta     _craft_types+1
;
; break;
;
	rts
;
; }else if(selected_item == 1){
;
L03E4:	lda     _temp0
	cmp     #$01
	bne     L03F3
;
; craft_lives[0] = 3;
;
	lda     #$03
	sta     _craft_lives
;
; craft_lives[1] = 3;
;
	sta     _craft_lives+1
;
; break;
;
	rts
;
; spr=oam_spr(61,   139 + selected_item * 16, 0x24, 1, spr);
;
L03F3:	jsr     decsp4
	lda     #$3D
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(61+8, 139 + selected_item * 16, 0x34, 1, spr);
;
	jsr     decsp4
	lda     #$45
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _temp0
	jsr     shlax4
	clc
	adc     #$8B
	dey
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	jmp     L03C2

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tank: near

.segment	"CODE"

;
; craft_sprite = (craft_types[i]&0xF)?0x00:0x40;
;
	ldy     _i
	lda     _craft_types,y
	and     #$0F
	beq     L0411
	lda     #$00
	jmp     L0413
L0411:	lda     #$40
L0413:	sta     _temp0
;
; switch(sprite_dirs[i]){
;
	ldy     _i
	lda     _sprite_dirs,y
;
; }
;
	cmp     #$01
	beq     L041B
	cmp     #$02
	beq     L0427
	cmp     #$04
	beq     L042D
	cmp     #$08
	beq     L0421
	jmp     L0419
;
; craft_sprite += 0x04;
;
L041B:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L117B
;
; craft_sprite += 0x24;
;
L0421:	lda     #$24
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = 0;
;
	lda     #$00
;
; break;
;
	jmp     L117B
;
; craft_sprite += 0x04;
;
L0427:	lda     #$04
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_V;
;
	lda     #$80
;
; break;
;
	jmp     L117B
;
; craft_sprite += 0x34;
;
L042D:	lda     #$34
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = OAM_FLIP_H;
;
	lda     #$40
L117B:	sta     _temp3
;
; if(sprite_look_dirs[i] == DIR_LEFT){
;
L0419:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$04
	bne     L0432
;
; craft_sprite += 0x08;
;
	lda     #$08
;
; }else if(sprite_look_dirs[i] == DIR_RIGHT){
;
	jmp     L117E
L0432:	ldy     _i
	lda     _sprite_look_dirs,y
	cmp     #$08
	bne     L0439
;
; craft_sprite += 0x04;
;
	lda     #$04
L117E:	clc
	adc     _temp0
	sta     _temp0
;
; if(i < 2){
;
L0439:	lda     _i
	cmp     #$02
	bcs     L043F
;
; if((frame & 8) == (i?8:0)&& (pad_poll(i)&(PAD_LEFT|PAD_RIGHT|PAD_UP|PAD_DOWN))){
;
	lda     _frame
	ldx     #$00
	and     #$08
	sta     ptr1
	stx     ptr1+1
	lda     _i
	beq     L0447
	lda     #$08
L0447:	cpx     ptr1+1
	bne     L0441
	cmp     ptr1
	bne     L0441
	lda     _i
	jsr     _pad_poll
	and     #$F0
	beq     L0441
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; craft_sprite_prop = i | craft_sprite_prop;
;
L0441:	lda     _temp3
	ora     _i
	sta     _temp3
;
; }else{
;
	jmp     L0455
;
; craft_sprite_prop |= 2;
;
L043F:	lda     _temp3
	ora     #$02
	sta     _temp3
;
; if(frame & 8){
;
	lda     _frame
	and     #$08
	beq     L0455
;
; craft_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp0
	sta     _temp0
;
; if(sprite_to_bg_y != 255){
;
L0455:	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L045B
;
; if(craft_x[i] > sprite_to_bg_x && craft_x[i] < sprite_to_bg_x + 48 &&
;
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     _sprite_to_bg_x
	bcc     L045B
	beq     L045B
	ldy     _i
	lda     _craft_x,y
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$30
	bcc     L0462
	ldx     #$01
L0462:	jsr     tosicmp
	bcs     L045B
;
; craft_y[i] < sprite_to_bg_y && craft_y[i] > sprite_to_bg_y - 48){
;
	ldy     _i
	lda     _craft_y,y
	cmp     _sprite_to_bg_y
	bcs     L045B
	ldy     _i
	lda     _craft_y,y
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$30
	bcs     L0467
	ldx     #$FF
L0467:	jsr     tosicmp
	beq     L045B
	bcc     L045B
;
; craft_sprite_prop |= (1<<5);
;
	lda     _temp3
	ora     #$20
	sta     _temp3
;
; spr=oam_spr(craft_x[i]-8, craft_y[i]-8, craft_sprite, craft_sprite_prop, spr);
;
L045B:	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	sec
	sbc     #$08
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(craft_x[i],   craft_y[i]-8, craft_sprite^0x10, craft_sprite_prop, spr);
;
	jsr     decsp4
	ldy     _i
	lda     _craft_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	sec
	sbc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _temp0
	eor     #$10
	dey
	sta     (sp),y
	lda     _temp3
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_all (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_all: near

.segment	"CODE"

;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
	lda     #$00
	sta     _i
L0486:	lda     _i
	cmp     #$0C
	jcs     L0487
;
; bullet_flag = craft_bullet_flag[i];
;
	ldy     _i
	lda     _craft_bullet_flag,y
	sta     _temp5
;
; if(bullet_flag){
;
	lda     _temp5
	jeq     L0488
;
; bullet_y = craft_bullet_y[i]-2;
;
	ldy     _i
	lda     _craft_bullet_y,y
	sec
	sbc     #$02
	sta     _temp4
;
; bullet_x = craft_bullet_x[i]-2;
;
	ldy     _i
	lda     _craft_bullet_x,y
	sec
	sbc     #$02
	sta     _temp3
;
; if(bullet_flag&0xF){
;
	lda     _temp5
	and     #$0F
	jeq     L049E
;
; props = i<CRAFT_BULLET_COUNT?i&1:2;
;
	lda     _i
	cmp     #$08
	bcs     L04A2
	lda     _i
	and     #$01
	jmp     L04A4
L04A2:	lda     #$02
L04A4:	sta     _temp2
;
; if(sprite_to_bg_y != 255){
;
	lda     _sprite_to_bg_y
	cmp     #$FF
	beq     L04A8
;
; if(bullet_x >= sprite_to_bg_x+8 && bullet_x < sprite_to_bg_x + 32 &&
;
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$08
	bcc     L04AA
	ldx     #$01
L04AA:	jsr     tosicmp
	bcc     L04A8
	lda     _temp3
	jsr     pusha0
	lda     _sprite_to_bg_x
	clc
	adc     #$20
	bcc     L04AC
	ldx     #$01
L04AC:	jsr     tosicmp
	bcs     L04A8
;
; bullet_y <= sprite_to_bg_y-8 && bullet_y > sprite_to_bg_y - 32){
;
	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$08
	bcs     L04AD
	ldx     #$FF
L04AD:	jsr     tosicmp
	beq     L1182
	bcs     L04A8
L1182:	lda     _temp4
	jsr     pusha0
	lda     _sprite_to_bg_y
	sec
	sbc     #$20
	bcs     L04AE
	ldx     #$FF
L04AE:	jsr     tosicmp
	beq     L04A8
	bcc     L04A8
;
; props |= (1<<5);
;
	lda     _temp2
	ora     #$20
	sta     _temp2
;
; spr=oam_spr(bullet_x, bullet_y, 0x80, props, spr);
;
L04A8:	jsr     decsp4
	lda     _temp3
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	dey
	sta     (sp),y
	lda     #$80
	dey
	sta     (sp),y
	lda     _temp2
;
; }else{
;
	jmp     L1188
;
; if(bullet_flag>0x70) bullet_flag = 8;
;
L049E:	lda     _temp5
	cmp     #$71
	bcc     L04BB
	lda     #$08
;
; else if(bullet_flag>0x30) bullet_flag = 4;
;
	jmp     L1180
L04BB:	lda     _temp5
	cmp     #$31
	bcc     L04C0
	lda     #$04
;
; else bullet_flag = 0;
;
	jmp     L1180
L04C0:	lda     #$00
L1180:	sta     _temp5
;
; spr=oam_spr(bullet_x-6, bullet_y-6, 0x84+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	sec
	sbc     #$06
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$84
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; spr=oam_spr(bullet_x+2, bullet_y-6, 0x86+bullet_flag, 3, spr);
;
	jsr     decsp4
	lda     _temp3
	clc
	adc     #$02
	ldy     #$03
	sta     (sp),y
	lda     _temp4
	sec
	sbc     #$06
	dey
	sta     (sp),y
	lda     _temp5
	clc
	adc     #$86
	dey
	sta     (sp),y
	lda     #$03
L1188:	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0488:	inc     _i
	jmp     L0486
;
; for(i=5;i!=255;i--){
;
L0487:	lda     #$05
L1185:	sta     _i
	cmp     #$FF
	bne     L1189
;
; }
;
	rts
;
; if(i<2 && craft_lives[i] == 0) continue;
;
L1189:	lda     _i
	cmp     #$02
	bcs     L04E3
	ldy     _i
	lda     _craft_lives,y
	jeq     L04DD
;
; if(craft_hps[i]){
;
L04E3:	ldy     _i
	lda     _craft_hps,y
	beq     L04E9
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_bullet_timers[i]){
;
	jmp     L052C
L04E9:	ldy     _i
	lda     _craft_bullet_timers,y
	jeq     L052C
;
; craft_hp_sprite = craft_bullet_timers[i];
;
	ldy     _i
	lda     _craft_bullet_timers,y
	sta     _temp1
;
; if(craft_hp_sprite >= 14){
;
	cmp     #$0E
	bcc     L04F7
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_0)
	ldx     #>(_small_exp_0)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 12){
;
	jmp     L052C
L04F7:	lda     _temp1
	cmp     #$0C
	bcc     L0505
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_1);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_1)
	ldx     #>(_small_exp_1)
	jsr     _oam_meta_spr
	sta     _spr
;
; draw_tank();
;
	jsr     _draw_tank
;
; }else if(craft_hp_sprite >= 9){
;
	jmp     L052C
L0505:	lda     _temp1
	cmp     #$09
	bcc     L0513
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, small_exp_2);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_small_exp_2)
	ldx     #>(_small_exp_2)
;
; }else if(craft_hp_sprite >= 5){
;
	jmp     L1184
L0513:	lda     _temp1
	cmp     #$05
	bcc     L0520
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_0);
;
	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_0)
	ldx     #>(_big_exp_0)
;
; }else{
;
	jmp     L1184
;
; spr = oam_meta_spr(craft_x[i], craft_y[i], spr, big_exp_1);
;
L0520:	jsr     decsp3
	ldy     _i
	lda     _craft_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _craft_y,y
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_big_exp_1)
	ldx     #>(_big_exp_1)
L1184:	jsr     _oam_meta_spr
	sta     _spr
;
; if(i<2){
;
L052C:	lda     _i
	cmp     #$02
	bcs     L04DD
;
; craft_hp_sprite = (craft_hps[i]&254);
;
	ldy     _i
	lda     _craft_hps,y
	and     #$FE
	sta     _temp1
;
; if((craft_hps[i]&1) && !(frame&16)){
;
	ldy     _i
	lda     _craft_hps,y
	and     #$01
	beq     L053E
	lda     _frame
	and     #$10
	bne     L053E
;
; craft_hp_sprite += 2;
;
	lda     #$02
	clc
	adc     _temp1
	sta     _temp1
;
; spr=oam_spr(i?256-16-8:16, 210, 0xA0+craft_hp_sprite, i, spr);
;
L053E:	jsr     decsp4
	lda     _i
	beq     L054B
	lda     #$E8
	jmp     L054D
L054B:	lda     #$10
L054D:	ldy     #$03
	sta     (sp),y
	lda     #$D2
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$A0
	dey
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=5;i!=255;i--){
;
L04DD:	lda     _i
	sec
	sbc     #$01
	jmp     L1185

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; oam_size(1);
;
	lda     #$01
	jsr     _oam_size
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; pal_all(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_all
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(menu_data);
;
	lda     #<(_menu_data)
	ldx     #>(_menu_data)
	jsr     _vram_unrle
;
; update_list[0]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; update_list[1]=0x00;
;
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; update_list[35]=0x20|NT_UPD_HORZ;
;
	lda     #$60
	sta     _update_list+35
;
; update_list[36]=0x00;
;
	lda     #$00
	sta     _update_list+36
;
; update_list[37]=8;//length of attribute update sequence
;
	lda     #$08
	sta     _update_list+37
;
; update_list[46]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+46
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_bullets (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_bullets: near

.segment	"CODE"

;
; if(pad_poll(0)&PAD_B) TIMER_ENABLE(0);
;
	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L057C
	lda     $00FB
	ora     #$01
	sta     $00FB
;
; TIMER_BEGIN(0);
;
L057C:	lda     $00FB
	and     #$01
	beq     L0583
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0583:	sta     _i
L058E:	lda     _i
	cmp     #$0C
	jcs     L058F
;
; if(craft_bullet_flag[i]&0xF0){
;
	ldy     _i
	lda     _craft_bullet_flag,y
	and     #$F0
	beq     L0596
;
; craft_bullet_flag[i]-=0x10;
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _i
	bcc     L059C
	inx
L059C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$10
	sta     (ptr1),y
;
; continue;
;
	jmp     L0590
;
; if(!craft_bullet_flag[i]) continue;
;
L0596:	ldy     _i
	lda     _craft_bullet_flag,y
	jeq     L0590
;
; bullet_x = craft_bullet_x[i];
;
	ldy     _i
	lda     _craft_bullet_x,y
	sta     _temp0
;
; bullet_y = craft_bullet_y[i];
;
	ldy     _i
	lda     _craft_bullet_y,y
	sta     _temp3
;
; switch(craft_bullet_flag[i]){ // bullet_dir
;
	ldy     _i
	lda     _craft_bullet_flag,y
;
; }
;
	cmp     #$01
	beq     L05B0
	cmp     #$02
	beq     L05C6
	cmp     #$04
	beq     L05D1
	cmp     #$05
	beq     L05D6
	cmp     #$06
	beq     L05CB
	cmp     #$08
	beq     L05BB
	cmp     #$09
	beq     L05B5
	cmp     #$0A
	beq     L05C0
	jmp     L05AE
;
; bullet_y -= 3;
;
L05B0:	lda     _temp3
	sec
	sbc     #$03
	sta     _temp3
;
; break;
;
	jmp     L05AE
;
; bullet_y -= 2;
;
L05B5:	lda     _temp3
	sec
	sbc     #$02
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11A8
;
; bullet_x += 3;
;
L05BB:	lda     #$03
	clc
	adc     _temp0
;
; break;
;
	jmp     L11A8
;
; bullet_y += 2;
;
L05C0:	lda     #$02
	clc
	adc     _temp3
	sta     _temp3
;
; bullet_x += 2;
;
	lda     #$02
	clc
	adc     _temp0
;
; break;
;
	jmp     L11A8
;
; bullet_y += 3;
;
L05C6:	lda     #$03
	clc
	adc     _temp3
	sta     _temp3
;
; break;
;
	jmp     L05AE
;
; bullet_y += 2;
;
L05CB:	lda     #$02
	clc
	adc     _temp3
;
; break;
;
	jmp     L11C1
;
; bullet_x -= 3;
;
L05D1:	lda     _temp0
	sec
	sbc     #$03
;
; break;
;
	jmp     L11A8
;
; bullet_y -= 2;
;
L05D6:	lda     _temp3
	sec
	sbc     #$02
L11C1:	sta     _temp3
;
; bullet_x -= 2;
;
	lda     _temp0
	sec
	sbc     #$02
L11A8:	sta     _temp0
;
; if(bullet_x < 10 || bullet_x >= 245 || bullet_y >= 245 || bullet_y < 10){
;
L05AE:	lda     _temp0
	cmp     #$0A
	bcc     L05DC
	lda     _temp0
	cmp     #$F5
	bcs     L05DC
	lda     _temp3
	cmp     #$F5
	bcs     L05DC
	lda     _temp3
	cmp     #$0A
	bcs     L05DB
;
; craft_bullet_flag[i] = 0;
;
L05DC:	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L0590
;
; bullet_grid_pos_y = (bullet_y + (scr&15))>>4;
;
L05DB:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L11B9
	inx
L11B9:	jsr     shrax4
	sta     _temp1
;
; bullet_grid_pos_x = bullet_x>>4;
;
	ldx     #$00
	lda     _temp0
	jsr     asrax4
	sta     _temp2
;
; has_collision = (bullet_blocked[bullet_grid_pos_y] & (1<<(bullet_grid_pos_x)))>0;
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11AE
	inx
	clc
L11AE:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosandax
	cpx     #$00
	bne     L05EE
	cmp     #$00
L05EE:	jsr     boolne
	sta     _temp4
;
; if(i<CRAFT_BULLET_COUNT)
;
	lda     _i
	cmp     #$08
	jcs     L05EF
;
; if(has_collision){
;
	lda     _temp4
	jeq     L05F1
;
; if(wall_hit_hp[i&1] == 0 ||(wall_hit_x[i&1]&15) != bullet_grid_pos_x || (wall_hit_y[i&1]&15) != bullet_grid_pos_y)
;
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	beq     L05F4
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp2
	bne     L05F4
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$0F
	cmp     _temp1
	beq     L05F3
;
; wall_hit_x[i&1] = (wall_hit_x[i&1]&0xF0) | bullet_grid_pos_x;
;
L05F4:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     sreg
	txa
	adc     #>(_wall_hit_x)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp2
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_y[i&1] = (wall_hit_y[i&1]&0xF0) | bullet_grid_pos_y;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     sreg
	txa
	adc     #>(_wall_hit_y)
	sta     sreg+1
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	and     #$F0
	sta     ptr1
	lda     _temp1
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; wall_hit_hp[i&1] = 5;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	sta     ptr1
	txa
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	lda     #$05
	sta     (ptr1),y
;
; if(is_update_dirty == 0){
;
L05F3:	lda     _is_update_dirty
	bne     L0608
;
; wall_hit_hp[i&1]--;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_hp)
	tay
	txa
	adc     #>(_wall_hit_hp)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(wall_hit_hp[i&1] == 0 && bullet_grid_pos_x != 0 && bullet_grid_pos_x != 15){
;
L0608:	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_hp)
	sta     ptr1+1
	ldy     #<(_wall_hit_hp)
	lda     (ptr1),y
	jne     L060C
	lda     _temp2
	jeq     L060C
	lda     _temp2
	cmp     #$0F
	jeq     L060C
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11AF
	inx
	clc
L11AF:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B0
	inx
	clc
L11B0:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<bullet_grid_pos_x);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B1
	inx
	clc
L11B1:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; row_index_on_ns = last_row_index;
;
	lda     _last_row_index
	sta     _temp0
;
; if(row_index_on_ns&1) row_index_on_ns--;
;
	and     #$01
	beq     L061F
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; row_index_on_ns +=(bullet_grid_pos_y<<1);
;
L061F:	lda     _temp1
	asl     a
	clc
	adc     _temp0
	sta     _temp0
;
; if(row_index_on_ns>=60) row_index_on_ns-=60;
;
	cmp     #$3C
	bcc     L0625
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(row_index_on_ns<30){
;
L0625:	lda     _temp0
	cmp     #$1E
	bcs     L0629
;
; adr = NAMETABLE_A+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
;
; }else{
;
	jmp     L11BD
;
; row_index_on_ns-=30;
;
L0629:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index_on_ns<<5);
;
	ldx     #$00
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
L11BD:	sta     _adr+1
;
; adr += bullet_grid_pos_x<<1;
;
	ldx     #$00
	lda     _temp2
	asl     a
	bcc     L11B2
	inx
	clc
L11B2:	adc     _adr
	sta     _adr
	txa
	adc     _adr+1
	sta     _adr+1
;
; if(building_index_y < 17 && (bullet_grid_pos_x == building_index_x || bullet_grid_pos_x == building_index_x+1) && bullet_grid_pos_y+1 == building_index_y){
;
	lda     _building_index_y
	cmp     #$11
	jcs     L0636
	lda     _building_index_x
	cmp     _temp2
	beq     L0639
	ldx     #$00
	lda     _building_index_x
	clc
	adc     #$01
	bcc     L063A
	inx
L063A:	cpx     #$00
	jne     L0636
	cmp     _temp2
	jne     L0636
L0639:	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L063C
	inx
L063C:	cpx     #$00
	jne     L0636
	cmp     _building_index_y
	jne     L0636
;
; if(bullet_grid_pos_x == building_index_x){
;
	lda     _building_index_x
	cmp     _temp2
	jne     L063E
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	lda     _temp1
	asl     a
	bcc     L11B3
	inx
	clc
L11B3:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B4
	inx
	clc
L11B4:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B5
	inx
	clc
L11B5:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x+1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L0654
	dex
L0654:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; }else{
;
	jmp     L0659
;
; bullet_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
L063E:	lda     _temp1
	asl     a
	bcc     L11B6
	inx
	clc
L11B6:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B7
	inx
	clc
L11B7:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L11B8
	inx
	clc
L11B8:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; enemy_blocked[bullet_grid_pos_y-1] ^= (1<<(bullet_grid_pos_x-1));
;
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L066E
	dex
L066E:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	tay
	lda     tmp1
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     tosaslax
	jsr     tosxorax
	ldy     #$00
	jsr     staxspidx
;
; adr-=2;
;
	lda     _adr
	sec
	sbc     #$02
	sta     _adr
	bcs     L0659
	dec     _adr+1
;
; building_index_y = 17;
;
L0659:	lda     #$11
	sta     _building_index_y
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2]=4;
;
	lda     #$04
	sta     _update_list+2
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L068B
	inc     _adr+1
;
; update_list[7]=MSB(adr)|NT_UPD_HORZ;
;
L068B:	lda     _adr+1
	ora     #$40
	sta     _update_list+7
;
; update_list[8]=LSB(adr);
;
	lda     _adr
	sta     _update_list+8
;
; update_list[9]= 4;
;
	lda     #$04
	sta     _update_list+9
;
; adr -= 96;
;
	lda     _adr
	sec
	sbc     #$60
	sta     _adr
	bcs     L069D
	dec     _adr+1
;
; update_list[14]=MSB(adr)|NT_UPD_HORZ;
;
L069D:	lda     _adr+1
	ora     #$40
	sta     _update_list+14
;
; update_list[15]=LSB(adr);
;
	lda     _adr
	sta     _update_list+15
;
; update_list[16]=4;
;
	lda     #$04
	sta     _update_list+16
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L06AF
	inc     _adr+1
;
; update_list[21]=MSB(adr)|NT_UPD_HORZ;
;
L06AF:	lda     _adr+1
	ora     #$40
	sta     _update_list+21
;
; update_list[22]=LSB(adr);
;
	lda     _adr
	sta     _update_list+22
;
; update_list[23]=4;
;
	lda     #$04
	sta     _update_list+23
;
; update_list[28] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+28
;
; update_list[10]=0xC0;
;
	lda     #$C0
	sta     _update_list+10
;
; update_list[11]=0xB7;
;
	lda     #$B7
	sta     _update_list+11
;
; update_list[12]=0xB7;
;
	sta     _update_list+12
;
; update_list[13]=0xC1;
;
	lda     #$C1
	sta     _update_list+13
;
; update_list[3]=0xB0;
;
	lda     #$B0
	sta     _update_list+3
;
; update_list[4]=0xB4;
;
	lda     #$B4
	sta     _update_list+4
;
; update_list[5]=0xB4;
;
	sta     _update_list+5
;
; update_list[6]=0xB1;
;
	lda     #$B1
	sta     _update_list+6
;
; update_list[17]=0x0;
;
	tya
	sta     _update_list+17
;
; update_list[18]=0x0;
;
	sta     _update_list+18
;
; update_list[19]=0x0;
;
	sta     _update_list+19
;
; update_list[20]=0x0;
;
	sta     _update_list+20
;
; update_list[24]=0x0;
;
	sta     _update_list+24
;
; update_list[25]=0x0;
;
	sta     _update_list+25
;
; update_list[26]=0x0;
;
	sta     _update_list+26
;
; update_list[27]=0x0;
;
	sta     _update_list+27
;
; }else{
;
	jmp     L07C0
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
L0636:	lda     _adr+1
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; update_list[2] = 2;
;
	lda     #$02
	sta     _update_list+2
;
; update_list[5]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+5
;
; adr += 32;
;
	lda     #$20
	clc
	adc     _adr
	sta     _adr
	bcc     L0707
	inc     _adr+1
;
; update_list[5]=MSB(adr)|NT_UPD_HORZ;
;
L0707:	lda     _adr+1
	ora     #$40
	sta     _update_list+5
;
; update_list[6]=LSB(adr);
;
	lda     _adr
	sta     _update_list+6
;
; update_list[7] = 2;
;
	lda     #$02
	sta     _update_list+7
;
; update_list[10]=NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list+10
;
; collision_edge_data = 0;
;
	sty     _temp5
;
; if(bullet_grid_pos_y)
;
	lda     _temp1
	beq     L071C
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y-1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y-1));
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	sec
	sbc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0720
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11A4
	cmp     _temp2
	bne     L11A4
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	sec
	sbc     #$01
	bcs     L072C
	dex
L072C:	cpx     ptr1+1
	bne     L11A4
	cmp     ptr1
	beq     L0720
L11A4:	lda     #$00
	jmp     L072E
L0720:	lda     #$01
L072E:	jsr     tosora0
	sta     _temp5
;
; if(bullet_grid_pos_x)
;
L071C:	lda     _temp2
	beq     L072F
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x-1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x-1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<1;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0733
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	sec
	sbc     #$01
	bcs     L073B
	dex
L073B:	cpx     ptr1+1
	bne     L11A5
	cmp     ptr1
	bne     L11A5
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11A5
	cmp     _temp1
	beq     L0733
L11A5:	ldx     #$00
	txa
	jmp     L0741
L0733:	lda     #$01
L0741:	asl     a
	bcc     L1195
	inx
L1195:	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_y<14)
;
L072F:	lda     _temp1
	cmp     #$0E
	bcs     L0742
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x, bullet_grid_pos_y+1) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y+1))<<2;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	jsr     pusha
	lda     _temp1
	clc
	adc     #$01
	jsr     _isCellBulletFree
	tax
	beq     L0746
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11A6
	cmp     _temp2
	bne     L11A6
	lda     _i
	and     #$01
	sta     ptr1
	txa
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp1
	clc
	adc     #$01
	bcc     L0752
	inx
L0752:	cpx     ptr1+1
	bne     L11A6
	cmp     ptr1
	beq     L0746
L11A6:	ldx     #$00
	txa
	jmp     L0754
L0746:	ldx     #$00
	lda     #$01
L0754:	jsr     aslax2
	jsr     tosorax
	sta     _temp5
;
; if(bullet_grid_pos_x<15)
;
L0742:	lda     _temp2
	cmp     #$0F
	bcs     L0755
;
; collision_edge_data |= (!isCellBulletFree(bullet_grid_pos_x+1, bullet_grid_pos_y) || (((wall_hit_x[i&1])>>4) == bullet_grid_pos_x+1 && ((wall_hit_y[i&1])>>4) == bullet_grid_pos_y))<<3;
;
	lda     _temp5
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	jsr     pusha
	lda     _temp1
	jsr     _isCellBulletFree
	tax
	beq     L0759
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #<(_wall_hit_x)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _temp2
	clc
	adc     #$01
	bcc     L0761
	inx
L0761:	cpx     ptr1+1
	bne     L11A7
	cmp     ptr1
	bne     L11A7
	lda     _i
	and     #$01
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	ldy     #<(_wall_hit_y)
	ldx     #$00
	lda     (ptr1),y
	jsr     asrax4
	cpx     #$00
	bne     L11A7
	cmp     _temp1
	beq     L0759
L11A7:	ldx     #$00
	txa
	jmp     L0767
L0759:	lda     #$01
L0767:	jsr     aslax3
	jsr     tosorax
	sta     _temp5
;
; if((collision_edge_data & 3) == 3)
;
L0755:	lda     _temp5
	and     #$03
	cmp     #$03
	bne     L0768
;
; update_list[3] = 0xB0;
;
	lda     #$B0
;
; else if(collision_edge_data & 1)
;
	jmp     L11AA
L0768:	lda     _temp5
	and     #$01
	beq     L0770
;
; update_list[3] = 0xB4;
;
	lda     #$B4
;
; else if(collision_edge_data & 2)
;
	jmp     L11AA
L0770:	lda     _temp5
	and     #$02
	beq     L11AA
;
; update_list[3] = 0xB2;
;
	lda     #$B2
;
; update_list[3] = 0;
;
L11AA:	sta     _update_list+3
;
; if((collision_edge_data & 9) == 9)
;
	lda     _temp5
	and     #$09
	cmp     #$09
	bne     L077F
;
; update_list[4] = 0xB1;
;
	lda     #$B1
;
; else if(collision_edge_data & 1)
;
	jmp     L11AB
L077F:	lda     _temp5
	and     #$01
	beq     L0787
;
; update_list[4] = 0xB5;
;
	lda     #$B5
;
; else if(collision_edge_data & 8)
;
	jmp     L11AB
L0787:	lda     _temp5
	and     #$08
	beq     L11AB
;
; update_list[4] = 0xB3;
;
	lda     #$B3
;
; update_list[4] = 0;
;
L11AB:	sta     _update_list+4
;
; if((collision_edge_data & 6) == 6)
;
	lda     _temp5
	and     #$06
	cmp     #$06
	bne     L0796
;
; update_list[8] = 0xC0;
;
	lda     #$C0
;
; else if(collision_edge_data & 4)
;
	jmp     L11AC
L0796:	lda     _temp5
	and     #$04
	beq     L079E
;
; update_list[8] = 0xB6;
;
	lda     #$B6
;
; else if(collision_edge_data & 2)
;
	jmp     L11AC
L079E:	lda     _temp5
	and     #$02
	beq     L11AC
;
; update_list[8] = 0xC2;
;
	lda     #$C2
;
; update_list[8] = 0;
;
L11AC:	sta     _update_list+8
;
; if((collision_edge_data & 12) == 12)
;
	lda     _temp5
	and     #$0C
	cmp     #$0C
	bne     L07AD
;
; update_list[9] = 0xC1;
;
	lda     #$C1
;
; else if(collision_edge_data & 4)
;
	jmp     L11AD
L07AD:	lda     _temp5
	and     #$04
	beq     L07B5
;
; update_list[9] = 0XB7;
;
	lda     #$B7
;
; else if(collision_edge_data & 8)
;
	jmp     L11AD
L07B5:	lda     _temp5
	and     #$08
	beq     L11AD
;
; update_list[9] = 0xC3;
;
	lda     #$C3
;
; update_list[9] = 0;
;
L11AD:	sta     _update_list+9
;
; wall_hit_x[i&1] <<= 4;
;
L07C0:	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_x)
	sta     ptr1
	lda     #$00
	adc     #>(_wall_hit_x)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; wall_hit_y[i&1] <<= 4;
;
	lda     _i
	and     #$01
	clc
	adc     #<(_wall_hit_y)
	sta     ptr1
	tya
	adc     #>(_wall_hit_y)
	sta     ptr1+1
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; craft_bullet_flag[i] = 0xA0;
;
L060C:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L0590
;
; for(j=2; j<6; j++){
;
L05F1:	lda     #$02
L11BE:	sta     _j
	cmp     #$06
	jcs     L07FD
;
; if(craft_hps[j]){
;
	ldy     _j
	lda     _craft_hps,y
	jeq     L07D0
;
; if(bullet_x > craft_x[j]-6 && bullet_x < craft_x[j]+6 && bullet_y > craft_y[j]-6 && bullet_y < craft_y[j]+6){
;
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L07DE
	ldx     #$FF
L07DE:	jsr     tosicmp
	jcc     L07D0
	jeq     L07D0
	lda     _temp0
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L07E2
	ldx     #$01
L07E2:	jsr     tosicmp
	bcs     L07D0
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L07E5
	ldx     #$FF
L07E5:	jsr     tosicmp
	bcc     L07D0
	beq     L07D0
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L07E8
	ldx     #$01
L07E8:	jsr     tosicmp
	bcs     L07D0
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L07EA
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L07F0
	inx
L07F0:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L07EA:	ldy     _j
	lda     _craft_hps,y
	bne     L07F1
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L07F1:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L07FD
;
; for(j=2; j<6; j++){
;
L07D0:	lda     _j
	clc
	adc     #$01
	jmp     L11BE
;
; if(has_collision){                        
;
L05EF:	lda     _temp4
	beq     L07FE
;
; craft_bullet_flag[i] = 0xA0;
;
	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; continue;
;
	jmp     L0590
;
; for(j=0; j<2; j++){
;
L07FE:	sta     _j
	cmp     #$02
	jcs     L07FD
;
; if(craft_lives[j] > 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L0806
;
; if(craft_bullet_x[i] > craft_x[j]-6 && craft_bullet_x[i] < craft_x[j]+6 && craft_bullet_y[i] > craft_y[j]-6 && craft_bullet_y[i] < craft_y[j]+6){
;
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$06
	bcs     L0816
	ldx     #$FF
L0816:	jsr     tosicmp
	jcc     L0806
	jeq     L0806
	ldy     _i
	lda     _craft_bullet_x,y
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$06
	bcc     L081C
	ldx     #$01
L081C:	jsr     tosicmp
	bcs     L0806
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$06
	bcs     L0821
	ldx     #$FF
L0821:	jsr     tosicmp
	bcc     L0806
	beq     L0806
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$06
	bcc     L0826
	ldx     #$01
L0826:	jsr     tosicmp
	bcs     L0806
;
; if(craft_hps[j])craft_hps[j]--;
;
	ldy     _j
	lda     _craft_hps,y
	beq     L0828
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L082E
	inx
L082E:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(craft_hps[j] == 0) craft_bullet_timers[j] = 0xF;
;
L0828:	ldy     _j
	lda     _craft_hps,y
	bne     L082F
	ldy     _j
	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_bullet_flag[i] = 0xA0;
;
L082F:	ldy     _i
	lda     #$A0
	sta     _craft_bullet_flag,y
;
; break;
;
	jmp     L07FD
;
; for(j=0; j<2; j++){
;
L0806:	lda     _j
	clc
	adc     #$01
	jmp     L07FE
;
; craft_bullet_x[i] = bullet_x;
;
L07FD:	ldy     _i
	lda     _temp0
	sta     _craft_bullet_x,y
;
; craft_bullet_y[i] = bullet_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_bullet_y,y
;
; TIMER_TICK(0);
;
	lda     $00FB
	and     #$01
	beq     L0590
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L0590:	inc     _i
	jmp     L058E
;
; TIMER_END(0);
;
L058F:	lda     $00FB
	and     #$01
	beq     L0849
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; if(pad_poll(0)&PAD_B)  TIMER_DISABLE(0);
;
L0849:	lda     #$00
	jsr     _pad_poll
	and     #$02
	beq     L0853
	lda     $00FB
	and     #$FE
	sta     $00FB
;
; }
;
L0853:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_crafts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_crafts: near

.segment	"CODE"

;
; TIMER_BEGIN(0);
;
	lda     $00FB
	and     #$01
	beq     L085B
	lda     $00FA
	ora     #$01
	sta     $00FA
	lda     #$00
	sta     $00FF
;
; for(i=0;i<2;++i){
;
L085B:	sta     _i
L0866:	lda     _i
	cmp     #$02
	jcs     L0867
;
; if(!craft_lives[i]) continue;
;
	ldy     _i
	lda     _craft_lives,y
	jeq     L0868
;
; if(craft_hps[i] == 0){
;
	ldy     _i
	lda     _craft_hps,y
	bne     L0872
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0876
;
; if((frame&3) == 0) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$03
	jne     L0868
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0880
	inx
L0880:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	sec
	sbc     #$01
	sta     (sreg),y
;
; } else{
;
	jmp     L11C2
;
; craft_hps[i] = 8;
;
L0876:	ldy     _i
	lda     #$08
	sta     _craft_hps,y
;
; craft_lives[i]--;
;
	lda     #<(_craft_lives)
	ldx     #>(_craft_lives)
	clc
	adc     _i
	bcc     L0888
	inx
L0888:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; craft_y[i]=200;
;
	ldy     _i
	lda     #$C8
	sta     _craft_y,y
;
; if(i==0){
;
	lda     _i
	bne     L088D
;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; }else{
;
	jmp     L0868
;
; craft_x[1]=178;
;
L088D:	lda     #$B2
	sta     _craft_x+1
;
; continue;
;
	jmp     L0868
;
; pad=pad_poll(i);
;
L0872:	lda     _i
	jsr     _pad_poll
	sta     _temp0
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; move_amount = 0;
;
	sta     _temp4
;
; if(pad&PAD_LEFT){
;
	lda     _temp0
	and     #$40
	beq     L089F
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08A2
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08A2
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08A2
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L08C7
;
; sprite_dirs[i] = DIR_LEFT;
;
L08A2:	ldy     _i
	lda     #$04
;
; } else if(pad&PAD_RIGHT){
;
	jmp     L11C3
L089F:	lda     _temp0
	and     #$80
	beq     L08C7
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_UP|PAD_DOWN)) && sprite_dirs[i] != DIR_LEFT && sprite_dirs[i] != DIR_RIGHT){
;
	lda     _temp0
	and     #$30
	beq     L08B9
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$04
	beq     L08B9
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$08
	beq     L08B9
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L08C7
;
; sprite_dirs[i] = DIR_RIGHT;
;
L08B9:	ldy     _i
	lda     #$08
L11C3:	sta     _sprite_dirs,y
;
; if(pad&PAD_UP){
;
L08C7:	lda     _temp0
	and     #$10
	beq     L08CC
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L08CF
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L08CF
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L08CF
;
; sprite_look_dirs[i] = DIR_LEFT;
;
	ldy     _i
	lda     #$04
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L08F4
;
; sprite_dirs[i] = DIR_UP;
;
L08CF:	ldy     _i
	lda     #$01
;
; } else if(pad&PAD_DOWN){
;
	jmp     L11C4
L08CC:	lda     _temp0
	and     #$20
	beq     L08F4
;
; move_amount++;
;
	lda     _temp4
	clc
	adc     #$01
	sta     _temp4
;
; if((pad&(PAD_LEFT|PAD_RIGHT)) && sprite_dirs[i] != DIR_UP && sprite_dirs[i] != DIR_DOWN){
;
	lda     _temp0
	and     #$C0
	beq     L08E6
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$01
	beq     L08E6
	ldy     _i
	lda     _sprite_dirs,y
	cmp     #$02
	beq     L08E6
;
; sprite_look_dirs[i] = DIR_RIGHT;
;
	ldy     _i
	lda     #$08
	sta     _sprite_look_dirs,y
;
; }else{
;
	jmp     L08F4
;
; sprite_dirs[i] = DIR_DOWN;
;
L08E6:	ldy     _i
	lda     #$02
L11C4:	sta     _sprite_dirs,y
;
; if(move_amount){
;
L08F4:	lda     _temp4
	jeq     L08F9
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp5
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp6
;
; if(move_amount == 1 || (frame&3) != 1){
;
	lda     _temp4
	cmp     #$01
	beq     L0904
	lda     _frame
	and     #$03
	cmp     #$01
	jeq     L0930
;
; if(pad&PAD_LEFT){
;
L0904:	lda     _temp0
	and     #$40
	jeq     L0908
;
; int_temp0 = (((unsigned int)1)<<(new_x-9+COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$09
	bcs     L090F
	ldx     #$FF
L090F:	clc
	adc     #$02
	bcc     L0910
	inx
L0910:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L091A
	inx
L091A:	sec
	sbc     #$02
	bcs     L091B
	dex
L091B:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0916
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L091F
	dex
L091F:	clc
	adc     #$02
	bcc     L0920
	inx
L0920:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L0921
L0916:	lda     #$01
L0921:	jsr     bnega
	jeq     L0930
;
; new_x--;
;
	lda     _temp5
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_RIGHT) {
;
	jmp     L11CC
L0908:	lda     _temp0
	and     #$80
	jeq     L0930
;
; int_temp0 = (((unsigned int)1)<<(new_x+8-COLLISION_THRESHOLD>>4));
;
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$08
	bcc     L092B
	ldx     #$01
L092B:	sec
	sbc     #$02
	bcs     L092C
	dex
L092C:	jsr     shrax4
	jsr     tosshlax
	sta     _int_temp0
	stx     _int_temp0+1
;
; collision_temp_2 = new_y + (scr&15);
;
	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp6
	sta     _temp2
;
; if(!((blocked[(collision_temp_2+8-COLLISION_THRESHOLD)>>4] & int_temp0) || (blocked[(collision_temp_2-7+COLLISION_THRESHOLD)>>4]& int_temp0))){
;
	clc
	adc     #$08
	bcc     L0936
	inx
L0936:	sec
	sbc     #$02
	bcs     L0937
	dex
L0937:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	bne     L0932
	tax
	lda     _temp2
	sec
	sbc     #$07
	bcs     L093B
	dex
L093B:	clc
	adc     #$02
	bcc     L093C
	inx
L093C:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	lda     _int_temp0
	and     ptr1
	pha
	lda     _int_temp0+1
	and     ptr1+1
	sta     tmp1
	pla
	ora     tmp1
	beq     L093D
L0932:	lda     #$01
L093D:	jsr     bnega
	beq     L0930
;
; new_x++;
;
	lda     _temp5
	pha
	clc
	adc     #$01
L11CC:	sta     _temp5
	pla
;
; if(move_amount == 1 || (frame&3)){
;
L0930:	lda     _temp4
	cmp     #$01
	beq     L0940
	lda     _frame
	and     #$03
	jeq     L095C
;
; if(pad&PAD_UP){
;
L0940:	lda     _temp0
	and     #$10
	jeq     L0943
;
; if(!((blocked[new_y-8+COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	sec
	sbc     #$08
	bcs     L094A
	dex
L094A:	clc
	adc     #$02
	bcc     L094B
	inx
L094B:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L11CA
	inx
L11CA:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L0951
	ldx     #$FF
L0951:	clc
	adc     #$02
	bcc     L0952
	inx
L0952:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L0956
	ldx     #$01
L0956:	sec
	sbc     #$02
	bcs     L0957
	dex
L0957:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jne     L095C
;
; new_y--;
;
	lda     _temp6
	pha
	sec
	sbc     #$01
;
; } else if(pad&PAD_DOWN) {
;
	jmp     L11CD
L0943:	lda     _temp0
	and     #$20
	jeq     L095C
;
; if(!((blocked[new_y+9-COLLISION_THRESHOLD+(scr&15)>>4] & ((1<<((new_x-8+COLLISION_THRESHOLD)>>4))|(1<<((new_x+7-COLLISION_THRESHOLD)>>4)))))){
;
	ldx     #$00
	lda     _temp6
	clc
	adc     #$09
	bcc     L0961
	inx
L0961:	sec
	sbc     #$02
	bcs     L0962
	dex
L0962:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L11CB
	inx
L11CB:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	sec
	sbc     #$08
	bcs     L0968
	ldx     #$FF
L0968:	clc
	adc     #$02
	bcc     L0969
	inx
L0969:	jsr     shrax4
	jsr     tosaslax
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	clc
	adc     #$07
	bcc     L096D
	ldx     #$01
L096D:	sec
	sbc     #$02
	bcs     L096E
	dex
L096E:	jsr     shrax4
	jsr     tosaslax
	jsr     tosorax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	bne     L095C
;
; new_y++;
;
	lda     _temp6
	pha
	clc
	adc     #$01
L11CD:	sta     _temp6
	pla
;
; if(new_y >= MAX_Y) new_y = MAX_Y;
;
L095C:	lda     _temp6
	cmp     #$DD
	bcc     L0970
	lda     #$DD
	sta     _temp6
;
; craft_x[i] = new_x;
;
L0970:	ldy     _i
	lda     _temp5
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp6
	sta     _craft_y,y
;
; if(craft_bullet_timers[i]){
;
L08F9:	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L097E
;
; --craft_bullet_timers[i];
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0984
	inx
L0984:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else if(pad&PAD_A){
;
	jmp     L0989
L097E:	lda     _temp0
	and     #$01
	jeq     L0989
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
	lda     _i
L11C7:	sta     _j
	cmp     #$08
	bcs     L0989
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L098A
;
; craft_bullet_x[j] = craft_x[i];
;
	lda     #<(_craft_bullet_x)
	ldx     #>(_craft_bullet_x)
	clc
	adc     _j
	bcc     L0997
	inx
L0997:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_x,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_y[j] = craft_y[i];
;
	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _j
	bcc     L099D
	inx
L099D:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _craft_y,y
	ldy     #$00
	sta     (ptr1),y
;
; craft_bullet_flag[j] = ((pad&(PAD_UP|PAD_DOWN|PAD_LEFT|PAD_RIGHT))>>4) | sprite_dirs[i];
;
	lda     #<(_craft_bullet_flag)
	ldx     #>(_craft_bullet_flag)
	clc
	adc     _j
	bcc     L09A3
	inx
L09A3:	sta     sreg
	stx     sreg+1
	lda     _temp0
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	ldy     _i
	lda     _sprite_dirs,y
	ora     ptr1
	ldy     #$00
	sta     (sreg),y
;
; craft_bullet_timers[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _craft_bullet_timers,y
;
; break;
;
	jmp     L0989
;
; for(j=i; j < CRAFT_BULLET_COUNT; j += 2){
;
L098A:	lda     #$02
	clc
	adc     _j
	jmp     L11C7
;
; TIMER_TICK(0);
;
L0989:	lda     $00FB
	and     #$01
	beq     L0868
	lda     $00FF
	pha
	clc
	adc     #$01
	sta     $00FF
L11C2:	pla
;
; for(i=0;i<2;++i){
;
L0868:	inc     _i
	jmp     L0866
;
; TIMER_END(0);
;
L0867:	lda     $00FB
	and     #$01
	beq     L09B4
	lda     $00FA
	and     #$FE
	sta     $00FA
	lda     $00FF
	clc
	adc     #$01
	sta     $00FF
;
; }
;
L09B4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scroll_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_screen: near

.segment	"CODE"

;
; if(scroll_amount){
;
	lda     _scroll_amount
	bne     L127D
;
; }
;
	rts
;
; set_rand(rand16()^frame^craft_x[0]^craft_y[1]);
;
L127D:	jsr     _rand16
	sta     ptr1
	stx     ptr1+1
	lda     _frame
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_x
	eor     ptr1
	sta     ptr1
	lda     #$00
	eor     ptr1+1
	sta     ptr1+1
	lda     _craft_y+1
	eor     ptr1
	pha
	lda     #$00
	eor     ptr1+1
	tax
	pla
	jsr     _set_rand
;
; if(enemy_spawn_scr > scroll_amount){
;
	lda     _enemy_spawn_scr
	sec
	sbc     _scroll_amount
	bcc     L09C5
	beq     L09C5
;
; enemy_spawn_scr -= scroll_amount;
;
	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _enemy_spawn_scr
;
; }else{
;
	jmp     L11ED
;
; enemy_spawn_scr = 0;
;
L09C5:	lda     #$00
L11ED:	sta     _enemy_spawn_scr
;
; for(i=0;i<6;++i){
;
	lda     #$00
	sta     _i
L09CC:	lda     _i
	cmp     #$06
	bcs     L09CD
;
; craft_y[i] += scroll_amount;
;
	lda     #<(_craft_y)
	ldx     #>(_craft_y)
	clc
	adc     _i
	bcc     L09D6
	inx
L09D6:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; if(i<2&& craft_y[i] >= MAX_Y+1) craft_y[i] = MAX_Y+1;
;
	lda     _i
	cmp     #$02
	bcs     L09CE
	ldy     _i
	lda     _craft_y,y
	cmp     #$DE
	bcc     L09CE
	ldy     _i
	lda     #$DE
	sta     _craft_y,y
;
; for(i=0;i<6;++i){
;
L09CE:	inc     _i
	jmp     L09CC
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L09CD:	lda     #$00
	sta     _i
L09E4:	lda     _i
	cmp     #$0C
	bcs     L09E5
;
; if(!craft_bullet_flag[i]) continue;
;
	ldy     _i
	lda     _craft_bullet_flag,y
	beq     L09E6
;
; if(craft_bullet_y[i] > 255 - scroll_amount){
;
	ldy     _i
	lda     _craft_bullet_y,y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcc     L09F0
	beq     L09F0
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; }else{
;
	jmp     L09E6
;
; craft_bullet_y[i] += scroll_amount;
;
L09F0:	lda     #<(_craft_bullet_y)
	ldx     #>(_craft_bullet_y)
	clc
	adc     _i
	bcc     L09FB
	inx
L09FB:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _scroll_amount
	sta     (sreg),y
;
; for(i=0; i<ENEMY_BULLET_COUNT; ++i){
;
L09E6:	inc     _i
	jmp     L09E4
;
; scr -= scroll_amount;
;
L09E5:	lda     _scroll_amount
	eor     #$FF
	sec
	adc     _scr
	sta     _scr
	lda     #$FF
	adc     _scr+1
	sta     _scr+1
;
; if(scr<0) scr+=240*2;
;
	ldx     _scr+1
	cpx     #$80
	bcc     L09FF
	lda     #$E0
	clc
	adc     _scr
	sta     _scr
	lda     #$01
	adc     _scr+1
	sta     _scr+1
;
; if(sprite_to_bg_y<255-scroll_amount) sprite_to_bg_y+=scroll_amount;
;
L09FF:	lda     _sprite_to_bg_y
	jsr     pusha0
	lda     #$FF
	sec
	sbc     _scroll_amount
	jsr     tosicmp0
	bcs     L0A03
	lda     _scroll_amount
	clc
	adc     _sprite_to_bg_y
;
; else sprite_to_bg_y = 255;
;
	jmp     L11EE
L0A03:	lda     #$FF
L11EE:	sta     _sprite_to_bg_y
;
; row_index = scr>>3;
;
	lda     _scr
	ldx     _scr+1
	jsr     asrax3
	sta     _temp0
;
; if(row_index>=60) row_index-=60;
;
	cmp     #$3C
	bcc     L0A0C
	lda     _temp0
	sec
	sbc     #$3C
	sta     _temp0
;
; if(last_row_index != row_index){
;
L0A0C:	ldx     #$00
	lda     _temp0
	cpx     _last_row_index+1
	bne     L122F
	cmp     _last_row_index
	jeq     L0EAE
;
; last_row_index = row_index;
;
L122F:	lda     _temp0
	sta     _last_row_index
	stx     _last_row_index+1
;
; update_list[2]=32;
;
	lda     #$20
	sta     _update_list+2
;
; if(row_index<30){
;
	lda     _temp0
	cmp     #$1E
	bcs     L0A17
;
; adr = NAMETABLE_A+(row_index<<5);
;
	lda     _temp0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$20
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_A+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$23
;
; }else{
;
	jmp     L1256
;
; row_index-=30;
;
L0A17:	lda     _temp0
	sec
	sbc     #$1E
	sta     _temp0
;
; adr = NAMETABLE_C+(row_index<<5);
;
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     _adr
	lda     tmp1
	clc
	adc     #$28
	sta     _adr+1
;
; update_list[0]=MSB(adr)|NT_UPD_HORZ;
;
	ora     #$40
	sta     _update_list
;
; update_list[1]=LSB(adr);
;
	lda     _adr
	sta     _update_list+1
;
; adr=NAMETABLE_C+960+((row_index>>2)<<3);
;
	ldx     #$00
	lda     _temp0
	jsr     asrax2
	jsr     aslax3
	clc
	adc     #$C0
	sta     _adr
	txa
	adc     #$2B
L1256:	sta     _adr+1
;
; update_list[35]=MSB(adr)|NT_UPD_HORZ;//set attribute table update address
;
	ora     #$40
	sta     _update_list+35
;
; update_list[36]=LSB(adr);
;
	lda     _adr
	sta     _update_list+36
;
; if(row_index&1){ // build new line
;
	lda     _temp0
	and     #$01
	jeq     L0C93
;
; if((wall_hit_y[0]&0xF) != 0xF){
;
	lda     _wall_hit_y
	and     #$0F
	cmp     #$0F
	beq     L0A5C
;
; wall_hit_y[0]++;
;
	lda     _wall_hit_y
	clc
	adc     #$01
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF) != 0xF){
;
L0A5C:	lda     _wall_hit_y+1
	and     #$0F
	cmp     #$0F
	beq     L0A63
;
; wall_hit_y[1]++;
;
	lda     _wall_hit_y+1
	clc
	adc     #$01
	sta     _wall_hit_y+1
;
; if((wall_hit_y[0]&0xF0) != 0xF0){
;
L0A63:	lda     _wall_hit_y
	and     #$F0
	cmp     #$F0
	beq     L0A6A
;
; wall_hit_y[0]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y
	sta     _wall_hit_y
;
; if((wall_hit_y[1]&0xF0) != 0xF0){
;
L0A6A:	lda     _wall_hit_y+1
	and     #$F0
	cmp     #$F0
	beq     L0A72
;
; wall_hit_y[1]+=0x10;
;
	lda     #$10
	clc
	adc     _wall_hit_y+1
	sta     _wall_hit_y+1
;
; for(i=2; i<16; i++){
;
L0A72:	lda     #$02
L1232:	sta     _i
	cmp     #$10
	bcs     L0A7B
;
; prev_line[i] = current_line[i];
;
	lda     #<(_prev_line)
	ldx     #>(_prev_line)
	clc
	adc     _i
	bcc     L0A84
	inx
L0A84:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldy     #$00
	sta     (ptr1),y
;
; current_line[i] = next_line[i];
;
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0A8A
	inx
L0A8A:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _next_line,y
	ldy     #$00
	sta     (ptr1),y
;
; if(i==2 || i==15){
;
	lda     _i
	cmp     #$02
	beq     L0A8F
	lda     _i
	cmp     #$0F
	bne     L0A8E
;
; if(rand8() < 30){
;
L0A8F:	jsr     _rand8
	cmp     #$1E
	bcs     L0A7C
;
; if(next_line[i] == WALL) next_line[i] = GRASS;
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
;
; else next_line[i] = WALL;
;
	beq     L0A8E
	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L11F0
;
; next_line[i] = GRASS;
;
L0A8E:	ldy     _i
	lda     #$00
L11F0:	sta     _next_line,y
;
; for(i=2; i<16; i++){
;
L0A7C:	lda     _i
	clc
	adc     #$01
	jmp     L1232
;
; wall_count -= (wall_count>>3);
;
L0A7B:	ldx     #$00
	lda     _wall_count
	jsr     asrax3
	eor     #$FF
	sec
	adc     _wall_count
	sta     _wall_count
;
; if(building_index_y<17) building_index_y++;
;
	lda     _building_index_y
	cmp     #$11
	bcs     L0AA8
	lda     _building_index_y
	clc
	adc     #$01
	sta     _building_index_y
;
; if(dont_change_bg_pallette) dont_change_bg_pallette--;
;
L0AA8:	lda     _dont_change_bg_pallette
	beq     L0AAB
	lda     _dont_change_bg_pallette
	sec
	sbc     #$01
	sta     _dont_change_bg_pallette
;
; if(wall_count) wall_count--;
;
L0AAB:	lda     _wall_count
	beq     L0AAE
	lda     _wall_count
	sec
	sbc     #$01
	sta     _wall_count
;
; if(has_big_wall) has_big_wall--;
;
L0AAE:	lda     _has_big_wall
	beq     L0AB1
	lda     _has_big_wall
	sec
	sbc     #$01
	sta     _has_big_wall
;
; if(wall_count < 2 && (rand8()<150)){
;
L0AB1:	lda     _wall_count
	cmp     #$02
	jcs     L0B21
	jsr     _rand8
	cmp     #$96
	jcs     L0B21
;
; wall_count = 0;
;
	lda     #$00
	sta     _wall_count
;
; random = rand8();
;
	jsr     _rand8
	sta     _temp2
;
; if(has_big_wall) selected_grid = WALL;
;
	lda     _has_big_wall
;
; else if(random < 60) selected_grid = WATER;
;
	bne     L0AE1
	lda     _temp2
	cmp     #$3C
	bcs     L0AC2
	lda     #$02
;
; else if(random < 120) selected_grid = FOREST;
;
	jmp     L11F1
L0AC2:	lda     _temp2
	cmp     #$78
	bcs     L0AC7
	lda     #$04
;
; else if(!dont_change_bg_pallette && row_index != 29 && random < 160){
;
	jmp     L11F1
L0AC7:	lda     _dont_change_bg_pallette
	bne     L0ACC
	lda     _temp0
	cmp     #$1D
	beq     L0ACC
	lda     _temp2
	cmp     #$A0
	bcs     L0ACC
;
; selected_grid = BUILDING;
;
	lda     #$08
	sta     _temp1
;
; dont_change_bg_pallette = 16;
;
	lda     #$10
	sta     _dont_change_bg_pallette
;
; building_shift = random>126?8:random>113?4:0;
;
	lda     _temp2
	cmp     #$7F
	bcc     L0AD6
	lda     #$08
	jmp     L0ADC
L0AD6:	lda     _temp2
	cmp     #$72
	bcc     L0ADA
	lda     #$04
	jmp     L0ADC
L0ADA:	lda     #$00
L0ADC:	sta     _building_shift
;
; building_index_y = 0;
;
	lda     #$00
	sta     _building_index_y
;
; }else if(random < 200){
;
	jmp     L0AE7
L0ACC:	lda     _temp2
	cmp     #$C8
	bcs     L0AE1
;
; selected_grid = WALL_BIG;
;
	lda     #$05
	sta     _temp1
;
; has_big_wall = 2;
;
	lda     #$02
	sta     _has_big_wall
;
; } else {
;
	jmp     L0AE7
;
; selected_grid = WALL;
;
L0AE1:	lda     #$01
L11F1:	sta     _temp1
;
; grid_start = 4+(rand8()&1)+(rand8()&3)+(rand8()&5);
;
L0AE7:	jsr     _rand8
	ldx     #$00
	and     #$01
	clc
	adc     #$04
	bcc     L0AED
	inx
L0AED:	jsr     pushax
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	jsr     pushax
	jsr     _rand8
	and     #$05
	jsr     tosadda0
	sta     _temp2
;
; grid_end = grid_start;
;
	sta     _temp3
;
; if(selected_grid == BUILDING){
;
	lda     _temp1
	cmp     #$08
	bne     L0AF2
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0AF4
;
; grid_start--;
;
	lda     _temp2
	pha
	sec
	sbc     #$01
	sta     _temp2
;
; }else{
;
	jmp     L11F2
;
; grid_end++;
;
L0AF4:	lda     _temp3
	pha
	clc
	adc     #$01
	sta     _temp3
L11F2:	pla
;
; building_index_x = grid_start-1;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _building_index_x
;
; sprite_to_bg_x = (grid_start<<4)-24;
;
	ldx     #$00
	lda     _temp2
	jsr     aslax4
	sec
	sbc     #$18
	sta     _sprite_to_bg_x
;
; }else{
;
	jmp     L0B1C
;
; if(rand8()&1) grid_start--;
;
L0AF2:	jsr     _rand8
	and     #$01
	beq     L0B01
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B01:	jsr     _rand8
	and     #$01
	beq     L0B04
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(selected_grid != WALL_BIG){
;
L0B04:	lda     _temp1
	cmp     #$05
	beq     L0B07
;
; if(rand8()&1) grid_start--;
;
	jsr     _rand8
	and     #$01
	beq     L0B09
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(rand8()&1) grid_end++;
;
L0B09:	jsr     _rand8
	and     #$01
	beq     L0B1C
	lda     _temp3
	pha
	clc
	adc     #$01
;
; }else{
;
	jmp     L1233
;
; if(grid_start == grid_end) (rand8()&1)?grid_end++:grid_start--;
;
L0B07:	lda     _temp3
	cmp     _temp2
	bne     L0B16
	jsr     _rand8
	and     #$01
	beq     L0B14
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
	jmp     L0B16
L0B14:	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(grid_start == 2){
;
L0B16:	lda     _temp2
	cmp     #$02
	bne     L0B18
;
; grid_start++; 
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; grid_end++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; if(grid_start == 15){
;
L0B18:	lda     _temp2
	cmp     #$0F
	bne     L0B1C
;
; grid_start--; 
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; grid_end--;
;
	lda     _temp3
	pha
	sec
	sbc     #$01
L1233:	sta     _temp3
	pla
;
; for(i=grid_start; i<=grid_end; i++){
;
L0B1C:	lda     _temp2
L1234:	sta     _i
	sec
	sbc     _temp3
	bcc     L0B23
	bne     L0B21
;
; next_line[i] = selected_grid;
;
L0B23:	ldy     _i
	lda     _temp1
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=grid_start; i<=grid_end; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1234
;
; for(i=2; i<16; i++){
;
L0B21:	lda     #$02
L1238:	sta     _i
	cmp     #$10
	jcs     L0B2E
;
; if(next_line[i] == GRASS){
;
	ldy     _i
	lda     _next_line,y
	jne     L0B2F
;
; if(current_line[i] == WALL_BIG){
;
	ldy     _i
	lda     _current_line,y
	cmp     #$05
	bne     L0B39
;
; next_line[i] = WALL;
;
	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; }else if(current_line[i] != BUILDING){
;
	jmp     L0B2F
L0B39:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	jeq     L0B2F
;
; chance_to_grow = ((next_line[i+1]&WALL&(i<13))<<1)+
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B4B
	inx
L0B4B:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	asl     a
	bcc     L11D3
	ldx     #$01
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
L11D3:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B50
	dex
L0B50:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	ldx     #$00
	asl     a
	bcc     L124E
	inx
	clc
L124E:	adc     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1
;
; ((next_line[i-1]&WALL&(i>3))<<1)+
;
	txa
	adc     sreg+1
;
; ((current_line[i]&WALL)<<1)+
;
	sta     ptr1+1
	ldy     _i
	lda     _current_line,y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L1203
	inx
	clc
L1203:	adc     ptr1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg
;
; ((current_line[i]&WALL)<<1)+
;
	txa
	adc     ptr1+1
;
; ((current_line[i-1]&WALL&(i>3)))+
;
	sta     sreg+1
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B59
	dex
L0B59:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	sta     ptr1
	lda     _i
	cmp     #$04
	lda     #$00
	rol     a
	and     ptr1
	clc
	adc     sreg
	ldx     sreg+1
	bcc     L1245
	inx
;
; ((current_line[i+1]&WALL&(i<13)));
;
L1245:	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B5E
	inx
L0B5E:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$01
	jsr     pusha0
	lda     _i
	cmp     #$0D
	jsr     boolult
	jsr     tosanda0
	jsr     tosadda0
	sta     _temp3
;
; grow_chance_reduction = (wall_count>>2);
;
	ldx     #$00
	lda     _wall_count
	jsr     asrax2
	sta     _temp2
;
; if(chance_to_grow > grow_chance_reduction){
;
	lda     _temp3
	sec
	sbc     _temp2
	bcc     L0B63
	beq     L0B63
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L11F5
;
; chance_to_grow = 0;
;
L0B63:	lda     #$00
L11F5:	sta     _temp3
;
; if(chance_to_grow >= 4){
;
	cmp     #$04
;
; }else if(chance_to_grow >= 2){
;
	bcs     L126B
	lda     _temp3
	cmp     #$02
	bcc     L0B74
;
; if(rand8()&1){
;
	jsr     _rand8
	and     #$01
	beq     L0B74
;
; next_line[i] = WALL;
;
L126B:	ldy     _i
	lda     #$01
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==WATER)<<1)+
;
L0B74:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B80
	inx
L0B80:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L11D6
	inx
;
; ((next_line[i-1]==WATER)<<1)+
;
L11D6:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B84
	dex
L0B84:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L11D7
	inx
L11D7:	jsr     tosaddax
;
; ((current_line[i]==WATER)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$02
	jsr     booleq
	asl     a
	bcc     L11D8
	inx
L11D8:	jsr     tosaddax
;
; ((current_line[i-1]==WATER))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0B8C
	dex
L0B8C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==WATER));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0B90
	inx
L0B90:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0B91
	beq     L0B91
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L11F7
;
; chance_to_grow = 0;
;
L0B91:	lda     #$00
L11F7:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L126C
	lda     _temp3
	cmp     #$03
	bcc     L0BA2
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0BA2
;
; next_line[i] = WATER;
;
L126C:	ldy     _i
	lda     #$02
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; chance_to_grow = ((next_line[i+1]==FOREST)<<1)+
;
L0BA2:	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BAE
	inx
L0BAE:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L11D9
	inx
;
; ((next_line[i-1]==FOREST)<<1)+
;
L11D9:	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BB2
	dex
L0BB2:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L11DA
	inx
L11DA:	jsr     tosaddax
;
; ((current_line[i]==FOREST)<<1)+
;
	jsr     pushax
	ldy     _i
	lda     _current_line,y
	cmp     #$04
	jsr     booleq
	asl     a
	bcc     L11DB
	inx
L11DB:	jsr     tosaddax
;
; ((current_line[i-1]==FOREST))+
;
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BBA
	dex
L0BBA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
;
; ((current_line[i+1]==FOREST));
;
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BBE
	inx
L0BBE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	jsr     tosadda0
	sta     _temp3
;
; if(chance_to_grow > grow_chance_reduction){
;
	sec
	sbc     _temp2
	bcc     L0BBF
	beq     L0BBF
;
; chance_to_grow -= grow_chance_reduction;
;
	lda     _temp2
	eor     #$FF
	sec
	adc     _temp3
;
; } else {
;
	jmp     L11F9
;
; chance_to_grow = 0;
;
L0BBF:	lda     #$00
L11F9:	sta     _temp3
;
; if(chance_to_grow >= 5){
;
	cmp     #$05
;
; }else if(chance_to_grow >= 3){
;
	bcs     L126D
	lda     _temp3
	cmp     #$03
	bcc     L0B2F
;
; if(rand8()&3){
;
	jsr     _rand8
	and     #$03
	beq     L0B2F
;
; next_line[i] = FOREST;
;
L126D:	ldy     _i
	lda     #$04
	sta     _next_line,y
;
; wall_count++;
;
	lda     _wall_count
	clc
	adc     #$01
	sta     _wall_count
;
; for(i=2; i<16; i++){
;
L0B2F:	lda     _i
	clc
	adc     #$01
	jmp     L1238
;
; for(i=2; i<16; i++){
;
L0B2E:	lda     #$02
L1239:	sta     _i
	cmp     #$10
	jcs     L0BD8
;
; if(next_line[i] == WALL && (next_line[i-1] == WALL_BIG || next_line[i+1] == WALL_BIG)){
;
	ldy     _i
	lda     _next_line,y
	cmp     #$01
	bne     L0BDF
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0BE6
	dex
L0BE6:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0BE0
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0BE8
	inx
L0BE8:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$05
	bne     L0BDF
;
; if(i==2 || i == 15) next_line[i] = GRASS;
;
L0BE0:	lda     _i
	cmp     #$02
	beq     L0BEC
	lda     _i
	cmp     #$0F
	bne     L0BEB
L0BEC:	ldy     _i
	lda     #$00
;
; else next_line[i] = WALL_BIG;
;
	jmp     L11FB
L0BEB:	ldy     _i
	lda     #$05
L11FB:	sta     _next_line,y
;
; if(current_line[i] == BUILDING && dont_change_bg_pallette == 15){
;
L0BDF:	ldy     _i
	lda     _current_line,y
	cmp     #$08
	bne     L0BF7
	lda     _dont_change_bg_pallette
	cmp     #$0F
	bne     L0BF7
;
; next_line[i] = BUILDING_PASSABLE;
;
	ldy     _i
	lda     #$18
	sta     _next_line,y
;
; if(current_line[i]  == BUILDING_PASSABLE){
;
L0BF7:	ldy     _i
	lda     _current_line,y
	cmp     #$18
	bne     L0BD9
;
; sprite_to_bg_y = 24;
;
	sta     _sprite_to_bg_y
;
; for(i=2; i<16; i++){
;
L0BD9:	lda     _i
	clc
	adc     #$01
	jmp     L1239
;
; for(i=2; i<16; i++){
;
L0BD8:	lda     #$02
L123A:	sta     _i
	cmp     #$10
	jcs     L0C08
;
; if(current_line[i] == GRASS && (
;
	ldy     _i
	lda     _current_line,y
	jne     L0C0F
;
; (current_line[i+1]&BUILDING_PASSABLE) || 
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C17
	inx
L0C17:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	jne     L0C10
;
; (current_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C1A
	dex
L0C1A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C10
;
; (prev_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _prev_line,y
	and     #$18
	bne     L0C10
;
; (prev_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C20
	dex
L0C20:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C10
;
; (prev_line[i+1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C23
	inx
L0C23:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C10
;
; (next_line[i]&BUILDING_PASSABLE) ||
;
	ldy     _i
	lda     _next_line,y
	and     #$18
	bne     L0C10
;
; (next_line[i-1]&BUILDING_PASSABLE) ||
;
	tax
	lda     _i
	sec
	sbc     #$01
	bcs     L0C29
	dex
L0C29:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
	bne     L0C10
;
; (next_line[i+1]&BUILDING_PASSABLE)
;
	tax
	lda     _i
	clc
	adc     #$01
	bcc     L0C2C
	inx
L0C2C:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	and     #$18
;
; ))
;
	beq     L0C0F
;
; current_line[i] = GRASS_EMPTY;
;
L0C10:	ldy     _i
	lda     #$20
	sta     _current_line,y
;
; if(current_line[i] == WALL && 
;
L0C0F:	ldy     _i
	lda     _current_line,y
	cmp     #$01
	jne     L0C09
;
; ((current_line[i-1]==WALL) && (current_line[i+1]==WALL) && 
;
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C3B
	dex
L0C3B:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C09
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C3F
	inx
L0C3F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$01
	jne     L0C09
;
; (next_line[i]&WALL) && (prev_line[i]&WALL) 
;
	ldy     _i
	lda     _next_line,y
	and     #$01
	jeq     L0C09
	ldy     _i
	lda     _prev_line,y
	and     #$01
;
; && (next_line[i-1]==WALL) && (next_line[i+1]==WALL) 
;
	beq     L0C09
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C48
	dex
L0C48:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
	bne     L0C09
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C4B
	inx
L0C4B:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     #$01
;
; && (prev_line[i-1]&WALL) && (prev_line[i+1]&WALL))
;
	bne     L0C09
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C4E
	dex
L0C4E:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C09
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C51
	inx
L0C51:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	and     #$01
	beq     L0C09
;
; current_line[i] = WALL_GREEN;
;
	ldy     _i
	lda     #$03
	sta     _current_line,y
;
; for(i=2; i<16; i++){
;
L0C09:	lda     _i
	clc
	adc     #$01
	jmp     L123A
;
; if((current_line[2]&WALL) && (prev_line[2]&WALL) && (next_line[2]&WALL)){
;
L0C08:	lda     _current_line+2
	and     #$01
	beq     L0C58
	lda     _prev_line+2
	and     #$01
	beq     L0C58
	lda     _next_line+2
	and     #$01
	beq     L0C58
;
; current_line[1] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+1
;
; if((current_line[15]&WALL) && (prev_line[15]&WALL) && (next_line[15]&WALL)){
;
L0C58:	lda     _current_line+15
	and     #$01
	beq     L0C65
	lda     _prev_line+15
	and     #$01
	beq     L0C65
	lda     _next_line+15
	and     #$01
	beq     L0C65
;
; current_line[16] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+16
;
; for(i=14; i>0; i--){
;
L0C65:	lda     #$0E
L123B:	sta     _i
	lda     _i
	jeq     L0C73
;
; blocked[i] = blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1204
	inx
	clc
L1204:	adc     #<(_blocked)
	tay
	txa
	adc     #>(_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C7E
	dex
L0C7E:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; enemy_blocked[i] = enemy_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1205
	inx
	clc
L1205:	adc     #<(_enemy_blocked)
	tay
	txa
	adc     #>(_enemy_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C83
	dex
L0C83:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; bullet_blocked[i] = bullet_blocked[i-1];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1206
	inx
	clc
L1206:	adc     #<(_bullet_blocked)
	tay
	txa
	adc     #>(_bullet_blocked)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	sec
	sbc     #$01
	bcs     L0C88
	dex
L0C88:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_bullet_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for(i=14; i>0; i--){
;
	lda     _i
	sec
	sbc     #$01
	jmp     L123B
;
; blocked[0] = 0;
;
L0C73:	sta     _blocked
	sta     _blocked+1
;
; bullet_blocked[0] = 0;
;
	sta     _bullet_blocked
	sta     _bullet_blocked+1
;
; enemy_blocked[0] = 0;
;
	sta     _enemy_blocked
	sta     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L123C:	sta     _i
	cmp     #$10
	jcs     L0C93
;
; if(current_line[i+1] != GRASS && current_line[i+1] != GRASS_EMPTY /*&& current_line[i+1] != BUILDING_PASSABLE*/){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0C9D
	inx
L0C9D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	jeq     L0C94
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CA0
	inx
L0CA0:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$20
	jeq     L0C94
;
; if(current_line[i+1] != BUILDING_PASSABLE){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CA5
	inx
L0CA5:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$18
	beq     L0CA2
;
; blocked[0] |= (1<<i);
;
	lda     _blocked
	ldx     _blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _blocked
	stx     _blocked+1
;
; if(current_line[i+1] != WATER){
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0CAD
	inx
L0CAD:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$02
	beq     L0CA2
;
; bullet_blocked[0] |= (1<<i);
;
	lda     _bullet_blocked
	ldx     _bullet_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _bullet_blocked
	stx     _bullet_blocked+1
;
; enemy_blocked[0] |= (1<<i);
;
L0CA2:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _i
	jsr     tosaslax
	jsr     tosorax
	sta     _enemy_blocked
	stx     _enemy_blocked+1
;
; for(i=0; i<16; i++){
;
L0C94:	lda     _i
	clc
	adc     #$01
	jmp     L123C
;
; for(i=0; i<32; i++){
;
L0C93:	lda     #$00
L1244:	sta     _i
	cmp     #$20
	jcs     L0CB7
;
; column_index = 1+(i>>1);
;
	ldx     #$00
	lda     _i
	jsr     asrax1
	clc
	adc     #$01
	sta     _temp3
;
; cell_index = ((((row_index&1)==0)<<1)+(i&1));
;
	lda     _temp0
	and     #$01
	jsr     booleq
	asl     a
	sta     ptr1
	lda     _i
	and     #$01
	clc
	adc     ptr1
	sta     _temp1
;
; switch(current_line[column_index]){
;
	ldy     _temp3
	lda     _current_line,y
;
; }
;
	jeq     L0D5E
	cmp     #$01
	beq     L0CD8
	cmp     #$02
	beq     L0CD8
	cmp     #$03
	jeq     L0D5E
	cmp     #$04
	jeq     L0DC1
	cmp     #$05
	jeq     L0D70
	cmp     #$08
	jeq     L0E3B
	cmp     #$18
	jeq     L0E3B
	cmp     #$20
	jne     L0CB8
;
; update_list[3+i] = 0;
;
	lda     _i
	clc
	adc     #$03
	bcc     L1207
	inx
	clc
L1207:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; break;
;
	jmp     L123D
;
; cell_type = current_line[column_index];
;
L0CD8:	ldy     _temp3
	lda     _current_line,y
	sta     _temp4
;
; if(cell_index&1){
;
	lda     _temp1
	and     #$01
	beq     L0CDD
;
; same_neigbour_dirs = (current_line[column_index+1]&cell_type)!=0;
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0CE3
	inx
L0CE3:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0CE5
;
; same_neigbour_dirs += (((prev_line[column_index+1]&cell_type)!=0)<<2);
;
	lda     _temp3
	clc
	adc     #$01
	bcc     L0CED
	inx
L0CED:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L125A
;
; same_neigbour_dirs += ((next_line[column_index+1]==cell_type)<<2);
;
L0CE5:	lda     _temp3
	clc
	adc     #$01
	bcc     L0D0D
	inx
;
; }else{
;
	jmp     L0D0D
;
; same_neigbour_dirs = (current_line[column_index-1]&cell_type)!=0;
;
L0CDD:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0CFB
	dex
L0CFB:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0CFD
;
; same_neigbour_dirs += (((prev_line[column_index-1]&cell_type)!=0)<<2);
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D05
	dex
L0D05:	sta     ptr1
	txa
	clc
	adc     #>(_prev_line)
	sta     ptr1+1
	ldy     #<(_prev_line)
	lda     (ptr1),y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L125A
;
; same_neigbour_dirs += ((next_line[column_index-1]==cell_type)<<2);
;
L0CFD:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D0D
	dex
L0D0D:	sta     ptr1
	txa
	clc
	adc     #>(_next_line)
	sta     ptr1+1
	ldy     #<(_next_line)
	lda     (ptr1),y
	cmp     _temp4
	jsr     booleq
L125A:	asl     a
	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index<2){
;
	lda     _temp1
	cmp     #$02
	bcs     L0D0E
;
; same_neigbour_dirs += (((prev_line[column_index]&cell_type)!=0)<<1);
;
	ldy     _temp3
	lda     _prev_line,y
	sta     ptr1
	lda     _temp4
	and     ptr1
	jsr     boolne
;
; }else{
;
	jmp     L1254
;
; same_neigbour_dirs += ((next_line[column_index]==cell_type)<<1);
;
L0D0E:	ldy     _temp3
	lda     _next_line,y
	cmp     _temp4
	jsr     booleq
L1254:	asl     a
	clc
	adc     _temp2
	sta     _temp2
;
; if(same_neigbour_dirs == 7){
;
	cmp     #$07
	bne     L0D1F
;
; if(rand8()&15){
;
	jsr     _rand8
	and     #$0F
	beq     L0D21
;
; update_list[3+i] = (cell_type == WALL?0:0xF0);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1208
	inx
	clc
L1208:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0D28
	lda     #$00
	jmp     L1240
L0D28:	lda     #$F0
;
; }else{
;
	jmp     L1240
;
; update_list[3+i] =  (cell_type == WALL?0x66:0xD0) + (rand8()&3);
;
L0D21:	tax
	lda     _i
	clc
	adc     #$03
	bcc     L1209
	inx
	clc
L1209:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _temp4
	cmp     #$01
	bne     L0D32
	lda     #$66
	jmp     L0D34
L0D32:	lda     #$D0
L0D34:	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0CB8
;
; if(same_neigbour_dirs>=4) same_neigbour_dirs -= 4;
;
L0D1F:	lda     _temp2
	cmp     #$04
	bcc     L0D38
	lda     _temp2
	sec
	sbc     #$04
	sta     _temp2
;
; if(cell_type == WALL){
;
L0D38:	lda     _temp4
	cmp     #$01
	bne     L0D3C
;
; update_list[3+i] = wall_tiles[(cell_index<<2)+same_neigbour_dirs];
;
	lda     _i
	clc
	adc     #$03
	bcc     L120A
	inx
	clc
L120A:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L11D0
	inx
L11D0:	sta     ptr1
	txa
	clc
	adc     #>(_wall_tiles)
	sta     ptr1+1
	ldy     #<(_wall_tiles)
;
; }else{
;
	jmp     L124C
;
; update_list[3+i] = water_tiles[(cell_index<<2)+same_neigbour_dirs];
;
L0D3C:	lda     _i
	clc
	adc     #$03
	bcc     L120B
	inx
	clc
L120B:	adc     #<(_update_list)
	sta     sreg
	txa
	adc     #>(_update_list)
	sta     sreg+1
	ldx     #$00
	lda     _temp1
	jsr     aslax2
	clc
	adc     _temp2
	bcc     L11D1
	inx
L11D1:	sta     ptr1
	txa
	clc
	adc     #>(_water_tiles)
	sta     ptr1+1
	ldy     #<(_water_tiles)
L124C:	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; if(same_neigbour_dirs==1 || same_neigbour_dirs == 2) update_list[3+i] += (rand8()&3);
;
	lda     _temp2
	cmp     #$01
	beq     L0D4C
	lda     _temp2
	cmp     #$02
	bne     L0D4B
L0D4C:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L120C
	inx
	clc
L120C:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; else if(same_neigbour_dirs==0 && cell_type == WALL) update_list[3+i]  += (rand8()&1);
;
	jmp     L0CB8
L0D4B:	lda     _temp2
	jne     L0CB8
	lda     _temp4
	cmp     #$01
	jne     L0CB8
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L120D
	inx
	clc
L120D:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _rand8
	and     #$01
	jsr     tosadda0
L1240:	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; random = rand8()&0x3F;
;
L0D5E:	jsr     _rand8
	and     #$3F
	sta     _temp4
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0D63
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L120E
	inx
	clc
L120E:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L123D
;
; update_list[3+i] = 0x60 + random;
;
L0D63:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L120F
	inx
	clc
L120F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp4
	clc
	adc     #$60
;
; break;
;
	jmp     L123D
;
; switch(cell_index){
;
L0D70:	lda     _temp1
;
; }
;
	beq     L0D75
	cmp     #$01
	beq     L0D88
	cmp     #$02
	jeq     L0D9B
	cmp     #$03
	jeq     L0DAE
	jmp     L0CB8
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0D75:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D79
	dex
L0D79:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0D76
;
; update_list[3+i] = 0xA4 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1210
	inx
	clc
L1210:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A4
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0CB8
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0D76:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1211
	inx
	clc
L1211:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0D88:	lda     _temp3
	clc
	adc     #$01
	bcc     L0D8C
	inx
L0D8C:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0D89
;
; update_list[3+i] = 0xA6 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1212
	inx
	clc
L1212:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$A6
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0CB8
;
; update_list[3+i] = 0x88 + (rand8()&3);
;
L0D89:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1213
	inx
	clc
L1213:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$88
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; if(current_line[column_index-1] != WALL_BIG){
;
L0D9B:	lda     _temp3
	sec
	sbc     #$01
	bcs     L0D9F
	dex
L0D9F:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0D9C
;
; update_list[3+i] = 0x94 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1214
	inx
	clc
L1214:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$94
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0CB8
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0D9C:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1215
	inx
	clc
L1215:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; if(current_line[column_index+1] != WALL_BIG){
;
L0DAE:	lda     _temp3
	clc
	adc     #$01
	bcc     L0DB2
	inx
L0DB2:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$05
	beq     L0DAF
;
; update_list[3+i] = 0x96 + (rand8()&1);
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1216
	inx
	clc
L1216:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$01
	clc
	adc     #$96
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0CB8
;
; update_list[3+i] = 0x78 + (rand8()&3);
;
L0DAF:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L1217
	inx
	clc
L1217:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$78
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; neighbour_forest_count = 0;
;
L0DC1:	stx     _temp2
;
; switch(cell_index){
;
	lda     _temp1
;
; }
;
	beq     L0DC8
	cmp     #$01
	beq     L0DD6
	cmp     #$02
	jeq     L0DE4
	cmp     #$03
	jeq     L0DF2
	jmp     L0DC6
;
; update_list[3+i] = 0x4;
;
L0DC8:	lda     _i
	clc
	adc     #$03
	bcc     L1218
	inx
	clc
L1218:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$04
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DD0
	dex
L0DD0:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L125B
;
; update_list[3+i] = 0x5;
;
L0DD6:	lda     _i
	clc
	adc     #$03
	bcc     L1219
	inx
	clc
L1219:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$05
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0DDE
	inx
L0DDE:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += prev_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _prev_line,y
;
; break;
;
	jmp     L125B
;
; update_list[3+i] = 0x6;
;
L0DE4:	lda     _i
	clc
	adc     #$03
	bcc     L121A
	inx
	clc
L121A:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$06
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index-1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0DFA
	dex
;
; break;
;
	jmp     L0DFA
;
; update_list[3+i] = 0x7;
;
L0DF2:	lda     _i
	clc
	adc     #$03
	bcc     L121B
	inx
	clc
L121B:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$07
	ldy     #$00
	sta     (ptr1),y
;
; neighbour_forest_count += current_line[column_index+1] == FOREST;
;
	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L0DFA
	inx
L0DFA:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; neighbour_forest_count += next_line[column_index] == FOREST;
;
	ldy     _temp3
	lda     _next_line,y
L125B:	cmp     #$04
	jsr     booleq
	clc
	adc     _temp2
	sta     _temp2
;
; cell_can_be_cleared = 0;
;
L0DC6:	stx     _temp4
;
; if(cell_index == ((last_row_index + column_index)&3)){
;
	lda     _temp1
	jsr     pusha0
	lda     _last_row_index
	clc
	adc     _temp3
	and     #$03
	jsr     tosicmp0
	bne     L0E0E
;
; if(neighbour_forest_count == 0){
;
	lda     _temp2
	bne     L0E05
;
; cell_can_be_cleared = 1;
;
	lda     #$01
;
; }else if(neighbour_forest_count==1){
;
	jmp     L1202
L0E05:	lda     _temp2
	cmp     #$01
	bne     L0E0A
;
; cell_can_be_cleared = rand8() < 120;
;
	jsr     _rand8
	cmp     #$78
;
; }else{
;
	jmp     L1243
;
; cell_can_be_cleared = rand8() < 60;
;
L0E0A:	jsr     _rand8
	cmp     #$3C
L1243:	jsr     boolult
L1202:	sta     _temp4
;
; if(cell_can_be_cleared){
;
L0E0E:	lda     _temp4
	beq     L0E11
;
; random = rand8()&0x3F;
;
	jsr     _rand8
	and     #$3F
	sta     _temp1
;
; if(random > 9){
;
	cmp     #$0A
	bcc     L0E15
;
; update_list[3+i] = 0;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L121C
	inx
	clc
L121C:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
;
; }else{
;
	jmp     L123D
;
; update_list[3+i] = 0x60 + random;
;
L0E15:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L121D
	inx
	clc
L121D:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp1
	clc
	adc     #$60
;
; }else{
;
	jmp     L123D
;
; if((cell_index < 2 && neighbour_forest_count <= 1 && (rand8()&3)) || (rand8()&3) == 0){
;
L0E11:	lda     _temp1
	cmp     #$02
	bcs     L11EC
	lda     _temp2
	cmp     #$02
	bcs     L11EC
	jsr     _rand8
	and     #$03
	bne     L0E23
L11EC:	jsr     _rand8
	and     #$03
	bne     L0E22
;
; update_list[3+i] = 0xB8 + (rand8()&3);
;
L0E23:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L121E
	inx
	clc
L121E:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$B8
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L0CB8
;
; update_list[3+i] = 0xA8 + (rand8()&3);
;
L0E22:	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L121F
	inx
	clc
L121F:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	and     #$03
	clc
	adc     #$A8
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L0CB8
;
; if(prev_line[column_index] != BUILDING){
;
L0E3B:	ldy     _temp3
	lda     _prev_line,y
	cmp     #$08
	beq     L0E3C
;
; sprite_id = 0xF4+building_shift;
;
	lda     _building_shift
	clc
	adc     #$F4
	bcc     L0E46
;
; }else{
;
	jmp     L0E46
;
; sprite_id = 0xD4+building_shift;
;
L0E3C:	lda     _building_shift
	clc
	adc     #$D4
L0E46:	sta     _temp2
;
; if(current_line[column_index-1] == current_line[column_index]){
;
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0E4A
	dex
L0E4A:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	ldx     #$00
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     _temp3
	lda     _current_line,y
	cpx     ptr1+1
	bne     L0E47
	cmp     ptr1
	bne     L0E47
;
; sprite_id += 2;
;
	lda     #$02
	clc
	adc     _temp2
	sta     _temp2
;
; sprite_id += (cell_index&1);
;
L0E47:	lda     _temp1
	and     #$01
	clc
	adc     _temp2
	sta     _temp2
;
; if(cell_index&2) sprite_id -= 0x10;
;
	lda     _temp1
	and     #$02
	beq     L0E52
	lda     _temp2
	sec
	sbc     #$10
	sta     _temp2
;
; update_list[3+i] = sprite_id;
;
L0E52:	lda     _i
	clc
	adc     #$03
	bcc     L1220
	inx
	clc
L1220:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _temp2
L123D:	ldy     #$00
	sta     (ptr1),y
;
; for(i=0; i<32; i++){
;
L0CB8:	lda     _i
	clc
	adc     #$01
	jmp     L1244
;
; if( (row_index&1) != 0){
;
L0CB7:	lda     _temp0
	and     #$01
	jeq     L0E5A
;
; if(row_index == 29){
;
	lda     _temp0
	cmp     #$1D
	jne     L0E5E
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0E60:	lda     _i
	cmp     #$08
	jcs     L0EAE
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L1221
	inx
	clc
L1221:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1222
	inx
	clc
L1222:	adc     #$01
	bcc     L0E70
	inx
L0E70:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1223
	inx
	clc
L1223:	adc     #$01
	bcc     L1224
	inx
	clc
L1224:	adc     #$01
	bcc     L0E77
	inx
L0E77:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0E60
;
; }else if( (row_index&3) == 3 ){
;
L0E5E:	lda     _temp0
	and     #$03
	cmp     #$03
	jne     L0E79
;
; for(i=0;i<8;++i){
;
	lda     #$00
	sta     _i
L0E7D:	lda     _i
	cmp     #$08
	jcs     L0EAE
;
; update_list[38+i] = (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2))<<4;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L1225
	inx
	clc
L1225:	adc     #<(_update_list)
	sta     ptr2
	txa
	adc     #>(_update_list)
	sta     ptr2+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1226
	inx
	clc
L1226:	adc     #$01
	bcc     L0E8D
	inx
L0E8D:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1227
	inx
	clc
L1227:	adc     #$01
	bcc     L1228
	inx
	clc
L1228:	adc     #$01
	bcc     L0E94
	inx
L0E94:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0E7D
;
; for(i=0;i<8;++i){
;
L0E79:	lda     #$00
	sta     _i
L0E96:	lda     _i
	cmp     #$08
	jcs     L0EAE
;
; update_list[38+i] += (bg_colors[current_line[1 + (i<<1)]&0xF] | ((bg_colors[current_line[1 + (i<<1)+1]&0xF])<<2));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$26
	bcc     L1229
	inx
	clc
L1229:	adc     #<(_update_list)
	tay
	txa
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	sta     ptr2
	lda     _i
	asl     a
	bcc     L122A
	inx
	clc
L122A:	adc     #$01
	bcc     L0EA6
	inx
L0EA6:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	lda     (ptr1),y
	sta     sreg
	ldx     #$00
	lda     _i
	asl     a
	bcc     L122B
	inx
	clc
L122B:	adc     #$01
	bcc     L122C
	inx
	clc
L122C:	adc     #$01
	bcc     L0EAD
	inx
L0EAD:	sta     ptr1
	txa
	clc
	adc     #>(_current_line)
	sta     ptr1+1
	ldy     #<(_current_line)
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bg_colors)
	sta     ptr1+1
	ldy     #<(_bg_colors)
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax2
	ora     sreg
	clc
	adc     ptr2
	ldy     #$00
	jsr     staspidx
;
; for(i=0;i<8;++i){
;
	inc     _i
	jmp     L0E96
;
; current_line[1] = WALL;
;
L0E5A:	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; scroll(0, scr);
;
L0EAE:	jsr     push0
	lda     _scr
	ldx     _scr+1
	jmp     _scroll

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; craft_x[0]=78;
;
	lda     #$4E
	sta     _craft_x
;
; craft_x[1]=178;
;
	lda     #$B2
	sta     _craft_x+1
;
; wall_hit_x[0] = 255;
;
	lda     #$FF
	sta     _wall_hit_x
;
; wall_hit_x[1] = 255;
;
	sta     _wall_hit_x+1
;
; wall_hit_hp[0] = 0;
;
	lda     #$00
	sta     _wall_hit_hp
;
; wall_hit_hp[1] = 0;
;
	sta     _wall_hit_hp+1
;
; sprite_dirs[0] = DIR_UP;
;
	lda     #$01
	sta     _sprite_dirs
;
; sprite_dirs[1] = DIR_UP;
;
	sta     _sprite_dirs+1
;
; sprite_look_dirs[0] = 0;
;
	lda     #$00
	sta     _sprite_look_dirs
;
; sprite_look_dirs[1] = 0;
;
	sta     _sprite_look_dirs+1
;
; for(i=0; i<6; i++){
;
L1284:	sta     _i
	cmp     #$06
	bcs     L0ED8
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_timers,y
;
; craft_types[i] = 0;
;
	ldy     _i
	sta     _craft_types,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	sta     _craft_hps,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1284
;
; craft_types[0] = 0;
;
L0ED8:	lda     #$00
	sta     _craft_types
;
; craft_types[1] = 1;
;
	lda     #$01
	sta     _craft_types+1
;
; craft_hps[0] = 8;
;
	lda     #$08
	sta     _craft_hps
;
; craft_hps[1] = 8;
;
	sta     _craft_hps+1
;
; enemy_spawn_scr = 10;
;
	lda     #$0A
	sta     _enemy_spawn_scr
;
; for(i=0; i<18; i++){
;
	lda     #$00
L1285:	sta     _i
	cmp     #$12
	bcs     L0EFA
;
; next_line[i] = current_line[i] = prev_line[i] = GRASS;
;
	lda     #<(_next_line)
	ldx     #>(_next_line)
	clc
	adc     _i
	bcc     L0F03
	inx
L0F03:	jsr     pushax
	lda     #<(_current_line)
	ldx     #>(_current_line)
	clc
	adc     _i
	bcc     L0F06
	inx
L0F06:	jsr     pushax
	ldy     _i
	lda     #$00
	sta     _prev_line,y
	tay
	jsr     staspidx
	tay
	jsr     staspidx
;
; for(i=0; i<18; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1285
;
; next_line[0] = next_line[1] = WALL;
;
L0EFA:	lda     #$01
	sta     _next_line+1
	sta     _next_line
;
; next_line[16] = next_line[17] = WALL;
;
	sta     _next_line+17
	sta     _next_line+16
;
; current_line[0] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line
;
; current_line[1] = WALL;
;
	lda     #$01
	sta     _current_line+1
;
; current_line[16] = WALL;
;
	sta     _current_line+16
;
; current_line[17] = WALL_GREEN;
;
	lda     #$03
	sta     _current_line+17
;
; prev_line[0] = prev_line[1] = WALL;
;
	lda     #$01
	sta     _prev_line+1
	sta     _prev_line
;
; prev_line[16] = prev_line[17] = WALL;
;
	sta     _prev_line+17
	sta     _prev_line+16
;
; dont_change_bg_pallette = 14;
;
	lda     #$0E
	sta     _dont_change_bg_pallette
;
; sprite_to_bg_y = 255;
;
	lda     #$FF
	sta     _sprite_to_bg_y
;
; building_index_y = 17;
;
	lda     #$11
	sta     _building_index_y
;
; wall_count = 50;
;
	lda     #$32
	sta     _wall_count
;
; has_big_wall = 0;
;
	lda     #$00
	sta     _has_big_wall
;
; debug_info_val = 0;
;
	sta     $00FA
;
; break_points_enable_val = 0;
;
	sta     $00FB
;
; for(i=0; i<6; i++){
;
L1286:	sta     _i
	cmp     #$06
	bcs     L0F3C
;
; craft_flags[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_flags,y
;
; for(i=0; i<6; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1286
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
L0F3C:	lda     #$00
L1287:	sta     _i
	cmp     #$0C
	bcs     L0F48
;
; craft_bullet_flag[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_bullet_flag,y
;
; for(i=0; i<ENEMY_BULLET_COUNT; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1287
;
; for(i=0; i<15; i++){
;
L0F48:	lda     #$00
L1288:	sta     _i
	cmp     #$0F
	bcs     L0F54
;
; blocked[i] = 0;
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L1281
	inx
	clc
L1281:	adc     #<(_blocked)
	sta     ptr1
	txa
	adc     #>(_blocked)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; bullet_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L1282
	inx
	clc
L1282:	adc     #<(_bullet_blocked)
	sta     ptr1
	txa
	adc     #>(_bullet_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; enemy_blocked[i] = 0;
;
	tax
	lda     _i
	asl     a
	bcc     L1283
	inx
	clc
L1283:	adc     #<(_enemy_blocked)
	sta     ptr1
	txa
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<15; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L1288
;
; }
;
L0F54:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ tick_enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_tick_enemies: near

.segment	"CODE"

;
; for(i=2; i<6; i++){
;
	lda     #$02
L1298:	sta     _i
	cmp     #$06
	bcc     L1299
;
; }
;
	rts
;
; if(!craft_hps[i]){
;
L1299:	ldy     _i
	lda     _craft_hps,y
	jne     L0F6D
;
; if(craft_bullet_timers[i]){
;
	ldy     _i
	lda     _craft_bullet_timers,y
	beq     L0F71
;
; if(frame&1) craft_bullet_timers[i]--;
;
	lda     _frame
	and     #$01
	jeq     L0F67
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0F79
	inx
L0F79:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; continue;
;
	jmp     L0F67
;
; }else if(enemy_spawn_scr == 0){
;
L0F71:	lda     _enemy_spawn_scr
	jne     L0FA9
;
; enemy_spawn_scr = 32 + (rand8()&31);
;
	jsr     _rand8
	and     #$1F
	clc
	adc     #$20
	sta     _enemy_spawn_scr
;
; spawn_x = rand8()&15;
;
	jsr     _rand8
	and     #$0F
L128C:	sta     _temp5
;
; while((enemy_blocked[0] & (1<<spawn_x))){
;
L0F83:	lda     _enemy_blocked
	ldx     _enemy_blocked+1
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp5
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	beq     L0F84
;
; spawn_x++;
;
	lda     _temp5
	clc
	adc     #$01
	sta     _temp5
;
; if(spawn_x == 16) spawn_x = 0;
;
	cmp     #$10
	bne     L0F83
	lda     #$00
;
; }                    
;
	jmp     L128C
;
; new_x = spawn_x*16 + (rand8()&7);
;
L0F84:	tax
	lda     _temp5
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _temp2
;
; new_y = 0;
;
	lda     #$00
	sta     _temp3
;
; move_dir = DIR_DOWN;
;
	lda     #$02
	sta     _temp1
;
; sprite_look_dirs[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _sprite_look_dirs,y
;
; craft_types[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _craft_types,y
;
; craft_flags[i] = 15;
;
	ldy     _i
	lda     #$0F
	sta     _craft_flags,y
;
; craft_hps[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = rand8()&127;
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L0FA7
	inx
L0FA7:	jsr     pushax
	jsr     _rand8
	and     #$7F
	ldy     #$00
	jsr     staspidx
;
; }else{
;
	jmp     L0FA9
;
; move_dir = sprite_dirs[i];
;
L0F6D:	ldy     _i
	lda     _sprite_dirs,y
	sta     _temp1
;
; new_x = craft_x[i];
;
	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if((frame+i)&3){
;
	lda     _frame
	clc
	adc     _i
	and     #$03
	jeq     L0FB6
;
; if(frame&3){
;
	lda     _frame
	and     #$03
	beq     L0FBE
;
; if(move_dir&DIR_LEFT){
;
	lda     _temp1
	and     #$04
	beq     L0FBB
;
; new_x--;
;
	lda     _temp2
	sec
	sbc     #$01
	sta     _temp2
;
; if(move_dir&DIR_RIGHT){
;
L0FBB:	lda     _temp1
	and     #$08
	beq     L0FBE
;
; new_x++;
;
	lda     _temp2
	clc
	adc     #$01
	sta     _temp2
;
; if((frame&3) != 1){
;
L0FBE:	lda     _frame
	and     #$03
	cmp     #$01
	beq     L0FC1
;
; if(move_dir&DIR_UP){
;
	lda     _temp1
	and     #$01
	beq     L0FC5
;
; new_y--;
;
	lda     _temp3
	sec
	sbc     #$01
	sta     _temp3
;
; if(move_dir&DIR_DOWN){
;
L0FC5:	lda     _temp1
	and     #$02
	beq     L0FC1
;
; new_y++;
;
	lda     _temp3
	clc
	adc     #$01
	sta     _temp3
;
; move_reset = craft_flags[i]&15;
;
L0FC1:	ldy     _i
	lda     _craft_flags,y
	and     #$0F
	sta     _temp4
;
; if(move_reset && (frame & 7) == 0){
;
	lda     _temp4
	beq     L0FCF
	lda     _frame
	and     #$07
	bne     L0FCF
;
; craft_flags[i]--;
;
	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L0FD7
	inx
L0FD7:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(move_reset == 0 || (new_y < 20 && move_dir == DIR_UP) || (new_y > 220 && move_dir == DIR_DOWN)|| isFreeEnemy(new_x, new_y) == FALSE){
;
L0FCF:	lda     _temp4
	beq     L0FD9
	lda     _temp3
	cmp     #$14
	bcs     L128A
	lda     _temp1
	cmp     #$01
	beq     L0FD9
L128A:	lda     _temp3
	cmp     #$DD
	bcc     L128B
	lda     _temp1
	cmp     #$02
	beq     L0FD9
L128B:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L128F
	inx
L128F:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	jne     L0FB6
	cmp     #$00
	jne     L0FB6
;
; new_x = craft_x[i];
;
L0FD9:	ldy     _i
	lda     _craft_x,y
	sta     _temp2
;
; new_y = craft_y[i];
;
	ldy     _i
	lda     _craft_y,y
	sta     _temp3
;
; if(isFreeEnemy(new_x, new_y-1) == FALSE){
;
	ldx     #$00
	lda     _temp3
	sec
	sbc     #$01
	bcs     L0FF5
	dex
L0FF5:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1290
	inx
L1290:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0FF0
	cmp     #$00
	bne     L0FF0
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(isFreeEnemy(new_x, new_y+1) == FALSE){
;
L0FF0:	ldx     #$00
	lda     _temp3
	clc
	adc     #$01
	bcc     L1001
	inx
L1001:	sta     ptr1
	stx     ptr1+1
	lda     _scr
	and     #$0F
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L1291
	inx
L1291:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	jsr     asrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L0FFC
	cmp     #$00
	bne     L0FFC
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; if(isFreeEnemy(new_x-1, new_y) == FALSE){
;
L0FFC:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1292
	inx
L1292:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	sec
	sbc     #$01
	bcs     L1010
	ldx     #$FF
L1010:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1008
	cmp     #$00
	bne     L1008
;
; move_dir |= DIR_LEFT;
;
	lda     _temp1
	ora     #$04
	sta     _temp1
;
; if(isFreeEnemy(new_x+1, new_y) == FALSE){
;
L1008:	ldx     #$00
	lda     _scr
	and     #$0F
	clc
	adc     _temp3
	bcc     L1293
	inx
L1293:	jsr     shrax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_enemy_blocked)
	sta     ptr1
	lda     tmp1
	adc     #>(_enemy_blocked)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     #$01
	jsr     pusha0
	lda     _temp2
	clc
	adc     #$01
	bcc     L101C
	ldx     #$01
L101C:	jsr     shrax4
	jsr     tosaslax
	jsr     tosandax
	jsr     bnegax
	cpx     #$00
	bne     L1014
	cmp     #$00
	bne     L1014
;
; move_dir |= DIR_RIGHT;
;
	lda     _temp1
	ora     #$08
	sta     _temp1
;
; if(new_y < 20){
;
L1014:	lda     _temp3
	cmp     #$14
	bcs     L1020
;
; move_dir |= DIR_UP;
;
	lda     _temp1
	ora     #$01
	sta     _temp1
;
; if(new_y > 220){
;
L1020:	lda     _temp3
	cmp     #$DD
	bcc     L1024
;
; move_dir |= DIR_DOWN;
;
	lda     _temp1
	ora     #$02
	sta     _temp1
;
; craft_flags[i] = (craft_flags[i]&0xF0) + 4 + (rand8()&11);
;
L1024:	lda     #<(_craft_flags)
	ldx     #>(_craft_flags)
	clc
	adc     _i
	bcc     L102A
	inx
L102A:	jsr     pushax
	ldy     _i
	lda     _craft_flags,y
	ldx     #$00
	and     #$F0
	clc
	adc     #$04
	bcc     L102F
	inx
L102F:	jsr     pushax
	jsr     _rand8
	and     #$0B
	jsr     tosadda0
	ldy     #$00
	jsr     staspidx
;
; if(move_dir == 0xF){
;
	lda     _temp1
	cmp     #$0F
	bne     L1031
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; continue;
;
	jmp     L0F67
;
; }else if(move_dir == 0){
;
L1031:	lda     _temp1
	bne     L1038
;
; move_dir = (1<<(rand8()&3));
;
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
;
; } else {
;
	jmp     L128D
;
; move_dir = rand8()&3;
;
L1038:	jsr     _rand8
	and     #$03
	sta     _temp1
;
; sprite_dirs[i] = (1<<(rand8()&3));
;
L1041:	lda     #<(_sprite_dirs)
	ldx     #>(_sprite_dirs)
	clc
	adc     _i
	bcc     L1046
	inx
L1046:	jsr     pushax
	lda     #$01
	jsr     pusha0
	jsr     _rand8
	and     #$03
	jsr     tosaslax
	ldy     #$00
	jsr     staspidx
;
; }while(sprite_dirs[i]&move_dir);
;
	ldy     _i
	lda     _sprite_dirs,y
	sta     ptr1
	lda     _temp1
	and     ptr1
	pha
	pla
	bne     L1041
;
; move_dir = sprite_dirs[i];
;
	ldy     _i
	lda     _sprite_dirs,y
L128D:	sta     _temp1
;
; if(craft_bullet_timers[i] == 0) {
;
L0FB6:	ldy     _i
	lda     _craft_bullet_timers,y
	bne     L1051
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
	lda     #$08
L1295:	sta     _j
	cmp     #$0C
	bcs     L1073
;
; if(craft_bullet_flag[j]) continue;
;
	ldy     _j
	lda     _craft_bullet_flag,y
	bne     L1057
;
; craft_bullet_x[j] = new_x;
;
	ldy     _j
	lda     _temp2
	sta     _craft_bullet_x,y
;
; craft_bullet_y[j] = new_y;
;
	ldy     _j
	lda     _temp3
	sta     _craft_bullet_y,y
;
; craft_bullet_flag[j] = move_dir;
;
	ldy     _j
	lda     _temp1
	sta     _craft_bullet_flag,y
;
; craft_bullet_timers[i] = 64 + (rand8()&127);
;
	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L106F
	inx
L106F:	jsr     pushax
	jsr     _rand8
	and     #$7F
	clc
	adc     #$40
	ldy     #$00
	jsr     staspidx
;
; break;
;
	jmp     L1073
;
; for(j=CRAFT_BULLET_COUNT; j < ENEMY_BULLET_COUNT; j++){
;
L1057:	lda     _j
	clc
	adc     #$01
	jmp     L1295
;
; craft_bullet_timers[i]--;
;
L1051:	lda     #<(_craft_bullet_timers)
	ldx     #>(_craft_bullet_timers)
	clc
	adc     _i
	bcc     L1076
	inx
L1076:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if(new_y >= MAX_Y+8 || craft_hps[i] == 0){
;
L1073:	lda     _temp3
	cmp     #$E5
	bcs     L1078
	ldy     _i
	lda     _craft_hps,y
	bne     L1077
;
; craft_hps[i] = 0;
;
L1078:	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; continue;
;
	jmp     L0F67
;
; for(j=0; j<2; j++){
;
L1077:	lda     #$00
L1297:	sta     _j
	cmp     #$02
	jcs     L0FA9
;
; if(craft_lives[j] != 0){
;
	ldy     _j
	lda     _craft_lives,y
	jeq     L1087
;
; if(new_x > craft_x[j]-12 && new_x < craft_x[j]+12 && new_y > craft_y[j]-12 && new_y < craft_y[j]+12){
;
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	sec
	sbc     #$0C
	bcs     L1095
	ldx     #$FF
L1095:	jsr     tosicmp
	jcc     L1087
	jeq     L1087
	lda     _temp2
	jsr     pusha0
	ldy     _j
	lda     _craft_x,y
	clc
	adc     #$0C
	bcc     L1099
	ldx     #$01
L1099:	jsr     tosicmp
	bcs     L1087
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	sec
	sbc     #$0C
	bcs     L109C
	ldx     #$FF
L109C:	jsr     tosicmp
	bcc     L1087
	beq     L1087
	lda     _temp3
	jsr     pusha0
	ldy     _j
	lda     _craft_y,y
	clc
	adc     #$0C
	bcc     L109F
	ldx     #$01
L109F:	jsr     tosicmp
	bcs     L1087
;
; if(craft_hps[j]>2){
;
	ldy     _j
	lda     _craft_hps,y
	cmp     #$03
	bcc     L10A1
;
; craft_hps[j]-=2;
;
	lda     #<(_craft_hps)
	ldx     #>(_craft_hps)
	clc
	adc     _j
	bcc     L10A7
	inx
L10A7:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; craft_bullet_timers[i] = 0xF;
;
	ldy     _i
;
; }else{
;
	jmp     L1296
;
; craft_hps[j] = 0;
;
L10A1:	ldy     _j
	lda     #$00
	sta     _craft_hps,y
;
; craft_bullet_timers[i] = 0;
;
	ldy     _i
	sta     _craft_bullet_timers,y
;
; craft_bullet_timers[j] = 0xF;
;
	ldy     _j
L1296:	lda     #$0F
	sta     _craft_bullet_timers,y
;
; craft_hps[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _craft_hps,y
;
; break;
;
	jmp     L0FA9
;
; for(j=0; j<2; j++){
;
L1087:	lda     _j
	clc
	adc     #$01
	jmp     L1297
;
; craft_x[i] = new_x;
;
L0FA9:	ldy     _i
	lda     _temp2
	sta     _craft_x,y
;
; craft_y[i] = new_y;
;
	ldy     _i
	lda     _temp3
	sta     _craft_y,y
;
; sprite_dirs[i] = move_dir;
;
	ldy     _i
	lda     _temp1
	sta     _sprite_dirs,y
;
; for(i=2; i<6; i++){
;
L0F67:	lda     _i
	clc
	adc     #$01
	jmp     L1298

.endproc

; ---------------------------------------------------------------
; void __near__ check_pause (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_pause: near

.segment	"CODE"

;
; if((pad_poll(0)|pad_poll(1)) & PAD_START){
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	bne     L129D
;
; }
;
	rts
;
; alpha = 4;
;
L129D:	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L10D2:	lda     _temp0
	beq     L10D3
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L10DA:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L10D2
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L10DA
;
; oam_clear();
;
L10D3:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; for(i=0; i<7; i++){
;
L129C:	sta     _i
	cmp     #$07
	bcs     L10E2
;
; spr=oam_spr(100+(i<<3), 100, 0xF2+(i<<1), 3, spr);
;
	jsr     decsp4
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #$64
	ldy     #$03
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _i
	asl     a
	bcc     L129B
	clc
L129B:	adc     #$F2
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _spr
	jsr     _oam_spr
	sta     _spr
;
; for(i=0; i<7; i++){
;
	lda     _i
	clc
	adc     #$01
	jmp     L129C
;
; alpha = 0;
;
L10E2:	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L10F6:	lda     _temp0
	cmp     #$04
	bcs     L10F7
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L10FE:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L10F6
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L10FE
;
; ppu_wait_frame();
;
L10F7:	jsr     _ppu_wait_frame
;
; if((pad_poll(0)|pad_poll(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_poll
	jsr     pushax
	lda     #$01
	jsr     _pad_poll
	jsr     tosorax
	and     #$08
	beq     L10F7
;
; alpha = 4;
;
	lda     #$04
	sta     _temp0
;
; while(alpha>0){
;
L110D:	lda     _temp0
	beq     L110E
;
; alpha--;
;
	lda     _temp0
	sec
	sbc     #$01
	sta     _temp0
;
; pal_spr_bright(alpha);
;
	jsr     _pal_spr_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1115:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L110D
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1115
;
; oam_clear();
;
L110E:	jsr     _oam_clear
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; draw_all();
;
	jsr     _draw_all
;
; alpha = 0;
;
	lda     #$00
	sta     _temp0
;
; while(alpha<4){
;
L111F:	lda     _temp0
	cmp     #$04
	bcs     L1120
;
; alpha++;
;
	lda     _temp0
	clc
	adc     #$01
	sta     _temp0
;
; pal_bright(alpha);
;
	jsr     _pal_bright
;
; remaining_frame = 3;
;
	lda     #$03
	sta     _temp1
;
; while(remaining_frame--){
;
L1127:	lda     _temp1
	pha
	sec
	sbc     #$01
	sta     _temp1
	pla
	tax
	beq     L111F
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; }
;
	jmp     L1127
;
; }
;
L1120:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; reset();
;
	jsr     _reset
;
; menu();
;
	jsr     _menu
;
; oam_clear();
;
	jsr     _oam_clear
;
; while(scr!=240){
;
L1130:	lda     _scr+1
	bne     L129E
	lda     _scr
	cmp     #$F0
	beq     L1131
;
; ppu_wait_frame();
;
L129E:	jsr     _ppu_wait_frame
;
; scroll_amount = 4;
;
	lda     #$04
	sta     _scroll_amount
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L1130
;
; pal_col(9, 0x3d);
;
L1131:	lda     #$09
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(10, 0x2d);
;
	lda     #$0A
	jsr     pusha
	lda     #$2D
	jsr     _pal_col
;
; pal_col(11, 0x1d);
;
	lda     #$0B
	jsr     pusha
	lda     #$1D
	jsr     _pal_col
;
; craft_y[0]=200;
;
	lda     #$C8
	sta     _craft_y
;
; craft_y[1]=200;
;
	sta     _craft_y+1
;
; temp5 = 0;
;
	lda     #$00
	sta     _temp5
;
; ppu_wait_frame();
;
L114A:	jsr     _ppu_wait_frame
;
; spr=0;
;
	lda     #$00
	sta     _spr
;
; oam_clear();
;
	jsr     _oam_clear
;
; is_update_dirty = 0;
;
	lda     #$00
	sta     _is_update_dirty
;
; scroll_amount = 0;
;
	sta     _scroll_amount
;
; if(craft_lives[0] && craft_y[0] < 150) scroll_amount = 150-craft_y[0];
;
	lda     _craft_lives
	beq     L1155
	lda     _craft_y
	cmp     #$96
	bcs     L1155
	lda     #$96
	sec
	sbc     _craft_y
	sta     _scroll_amount
;
; if(craft_lives[1] && craft_y[1] < 150){
;
L1155:	lda     _craft_lives+1
	beq     L1167
	lda     _craft_y+1
	cmp     #$96
	bcs     L1167
;
; temp2 = 150-craft_y[1];
;
	lda     #$96
	sec
	sbc     _craft_y+1
	sta     _temp2
;
; if(temp2 > scroll_amount){
;
	sec
	sbc     _scroll_amount
	bcc     L1167
	beq     L1167
;
; scroll_amount = temp2;
;
	lda     _temp2
	sta     _scroll_amount
;
; if(scroll_amount){
;
L1167:	lda     _scroll_amount
	beq     L116B
;
; is_update_dirty = (scr&0xF)<scroll_amount;
;
	lda     _scr
	and     #$0F
	cmp     _scroll_amount
	jsr     boolult
	sta     _is_update_dirty
;
; tick_crafts();
;
L116B:	jsr     _tick_crafts
;
; tick_enemies();
;
	jsr     _tick_enemies
;
; tick_bullets();
;
	jsr     _tick_bullets
;
; draw_all();
;
	jsr     _draw_all
;
; check_pause();
;
	jsr     _check_pause
;
; scroll_screen();
;
	jsr     _scroll_screen
;
; ++frame;
;
	inc     _frame
;
; }
;
	jmp     L114A

.endproc

